kind: Deploy
apiVersion: garden.io/v2
name: gptr
description: AI Research Wizard full-stack application
type: container

spec:
  image: docker.io/bolabaden/ai-researchwizard-aio-fullstack:master
  env:
    ANTHROPIC_API_KEY: ${var.ANTHROPIC_API_KEY}
    BRAVE_API_KEY: ${var.BRAVE_API_KEY}
    DEEPSEEK_API_KEY: ${var.DEEPSEEK_API_KEY}
    EXA_API_KEY: ${var.EXA_API_KEY}
    FIRECRAWL_API_KEY: ${var.FIRECRAWL_API_KEY}
    FIRE_CRAWL_API_KEY: ${var.FIRE_CRAWL_API_KEY}
    GEMINI_API_KEY: ${var.GEMINI_API_KEY}
    GLAMA_API_KEY: ${var.GLAMA_API_KEY}
    GROQ_API_KEY: ${var.GROQ_API_KEY}
    HF_TOKEN: ${var.HF_TOKEN}
    HUGGINGFACE_ACCESS_TOKEN: ${var.HUGGINGFACE_ACCESS_TOKEN}
    HUGGINGFACE_API_TOKEN: ${var.HUGGINGFACE_API_TOKEN}
    LANGCHAIN_API_KEY: ${var.LANGCHAIN_API_KEY}
    MISTRAL_API_KEY: ${var.MISTRAL_API_KEY}
    MISTRALAI_API_KEY: ${var.MISTRALAI_API_KEY}
    OPENAI_API_KEY: ${var.OPENAI_API_KEY}
    OPENROUTER_API_KEY: ${var.OPENROUTER_API_KEY}
    PERPLEXITY_API_KEY: ${var.PERPLEXITY_API_KEY}
    PERPLEXITYAI_API_KEY: ${var.PERPLEXITYAI_API_KEY}
    REPLICATE_API_KEY: ${var.REPLICATE_API_KEY}
    REVID_API_KEY: ${var.REVID_API_KEY}
    SAMBANOVA_API_KEY: ${var.SAMBANOVA_API_KEY}
    SEARCH1API_KEY: ${var.SEARCH1API_KEY}
    SERPAPI_API_KEY: ${var.SERPAPI_API_KEY}
    TAVILY_API_KEY: ${var.TAVILY_API_KEY}
    TOGETHERAI_API_KEY: ${var.TOGETHERAI_API_KEY}
    UNIFY_API_KEY: ${var.UNIFY_API_KEY}
    UPSTAGE_API_KEY: ${var.UPSTAGE_API_KEY}
    UPSTAGEAI_API_KEY: ${var.UPSTAGEAI_API_KEY}
    YOU_API_KEY: ${var.YOU_API_KEY}
    CHOKIDAR_USEPOLLING: ${var.CHOKIDAR_USEPOLLING:-true}
    LOGGING_LEVEL: ${var.GPTR_LOGGING_LEVEL:-DEBUG}
    NEXT_PUBLIC_GA_MEASUREMENT_ID: ${var.NEXT_PUBLIC_GA_MEASUREMENT_ID}
    NEXT_PUBLIC_GPTR_API_URL: https://gptr.${var.domain}
    LANGSMITH_TRACING: ${var.LANGSMITH_TRACING:-true}
    LANGSMITH_ENDPOINT: ${var.LANGSMITH_ENDPOINT:-https://api.smith.langchain.com}
    LANGSMITH_API_KEY: ${var.LANGSMITH_API_KEY}
  ports:
    - name: nginx
      containerPort: 3000
    - name: nextjs
      containerPort: 3001
    - name: static
      containerPort: 8000
    - name: mcp
      containerPort: 8080
  volumes:
    - name: logs
      containerPath: /usr/src/app/logs
      sourcePath: ${var.config-path}/gptr/logs
    - name: outputs
      containerPath: /usr/src/app/outputs
      sourcePath: ${var.config-path}/gptr/outputs
    - name: reports
      containerPath: /usr/src/app/reports
      sourcePath: ${var.config-path}/gptr/reports
  ingresses:
    - path: /
      port: nginx
      hostname: gptr-nextjs.${var.domain}
    - path: /
      port: static
      hostname: gptr.${var.domain}
    - path: /
      port: mcp
      hostname: gptr-mcp.${var.domain}
  healthCheck:
    exec:
      command: [sh, -c, "(wget -qO- http://127.0.0.1:3000 > /dev/null 2>&1 && wget -qO- http://127.0.0.1:8000 > /dev/null 2>&1) || exit 1"]
  restartPolicy: always
