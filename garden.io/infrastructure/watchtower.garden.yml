kind: Deploy
apiVersion: garden.io/v2
name: watchtower
description: Automatic container updates
type: container

spec:
  image: docker.io/containrrr/watchtower:latest
  env:
    TZ: ${var.tz}
    DOCKER_HOST: ${var.DOCKER_HOST:-unix:///var/run/docker.sock}
    DOCKER_API_VERSION: ${var.DOCKER_API_VERSION:-1.24}
    DOCKER_TLS_VERIFY: ${var.DOCKER_TLS_VERIFY:-false}
    REPO_USER: ${var.WATCHTOWER_REPO_USER:-bolabaden}
    REPO_PASS: ${var.WATCHTOWER_REPO_PASS:-${var.sudo-password}}
    WATCHTOWER_INCLUDE_RESTARTING: ${var.WATCHTOWER_INCLUDE_RESTARTING:-true}
    WATCHTOWER_INCLUDE_STOPPED: ${var.WATCHTOWER_INCLUDE_STOPPED:-true}
    WATCHTOWER_REVIVE_STOPPED: ${var.WATCHTOWER_REVIVE_STOPPED:-false}
    WATCHTOWER_LABEL_ENABLE: ${var.WATCHTOWER_LABEL_ENABLE:-false}
    WATCHTOWER_DISABLE_CONTAINERS: ${var.WATCHTOWER_DISABLE_CONTAINERS:-}
    WATCHTOWER_LABEL_TAKE_PRECEDENCE: ${var.WATCHTOWER_LABEL_TAKE_PRECEDENCE:-true}
    WATCHTOWER_SCOPE: ${var.WATCHTOWER_SCOPE:-}
    WATCHTOWER_POLL_INTERVAL: ${var.WATCHTOWER_POLL_INTERVAL:-86400}
    WATCHTOWER_SCHEDULE: ${var.WATCHTOWER_SCHEDULE:-0 0 6 * * *}
    WATCHTOWER_MONITOR_ONLY: ${var.WATCHTOWER_MONITOR_ONLY:-false}
    WATCHTOWER_NO_RESTART: ${var.WATCHTOWER_NO_RESTART:-false}
    WATCHTOWER_NO_PULL: ${var.WATCHTOWER_NO_PULL:-false}
    WATCHTOWER_CLEANUP: ${var.WATCHTOWER_CLEANUP:-true}
    WATCHTOWER_REMOVE_VOLUMES: ${var.WATCHTOWER_REMOVE_VOLUMES:-false}
    WATCHTOWER_ROLLING_RESTART: ${var.WATCHTOWER_ROLLING_RESTART:-false}
    WATCHTOWER_TIMEOUT: ${var.WATCHTOWER_TIMEOUT:-10s}
    WATCHTOWER_RUN_ONCE: ${var.WATCHTOWER_RUN_ONCE:-false}
    WATCHTOWER_NO_STARTUP_MESSAGE: ${var.WATCHTOWER_NO_STARTUP_MESSAGE:-false}
    WATCHTOWER_WARN_ON_HEAD_FAILURE: ${var.WATCHTOWER_WARN_ON_HEAD_FAILURE:-auto}
    WATCHTOWER_HTTP_API_UPDATE: ${var.WATCHTOWER_HTTP_API_UPDATE:-false}
    WATCHTOWER_HTTP_API_TOKEN: ${var.WATCHTOWER_HTTP_API_TOKEN:-}
    WATCHTOWER_HTTP_API_PERIODIC_POLLS: ${var.WATCHTOWER_HTTP_API_PERIODIC_POLLS:-false}
    WATCHTOWER_HTTP_API_METRICS: ${var.WATCHTOWER_HTTP_API_METRICS:-false}
    WATCHTOWER_DEBUG: ${var.WATCHTOWER_DEBUG:-true}
    WATCHTOWER_TRACE: ${var.WATCHTOWER_TRACE:-false}
    WATCHTOWER_LOG_LEVEL: ${var.WATCHTOWER_LOG_LEVEL:-debug}
    WATCHTOWER_LOG_FORMAT: ${var.WATCHTOWER_LOG_FORMAT:-Auto}
    NO_COLOR: ${var.NO_COLOR:-false}
    WATCHTOWER_PORCELAIN: ${var.WATCHTOWER_PORCELAIN:-}
    WATCHTOWER_NOTIFICATION_URL: ${var.WATCHTOWER_NOTIFICATION_URL:-}
    WATCHTOWER_NOTIFICATION_REPORT: ${var.WATCHTOWER_NOTIFICATION_REPORT:-true}
    WATCHTOWER_NOTIFICATION_TEMPLATE: |
      {{- if .Report -}}
        {{- with .Report -}}
          {{- if ( or .Updated .Failed ) -}}
      {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed
            {{- range .Updated}}
      - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}
            {{- end -}}
            {{- range .Skipped}}
      - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
            {{- range .Failed}}
      - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
      {{- else -}}
        {{range .Entries -}}{{.Message}}{{"\n"}}{{- end -}}
      {{- end -}}
  volumes:
    - name: docker-sock
      containerPath: /var/run/docker.sock
      sourcePath: ${var.docker-socket}
    - name: docker-config
      containerPath: /config.json
      sourcePath: ~/.docker/config.json
      readOnly: true
  restartPolicy: always

