from __future__ import annotations

import logging
from typing import TYPE_CHECKING

from jinja2 import Template

if TYPE_CHECKING:
    from nginx_traefik_converter.models.config import ProxyConfig

logger = logging.getLogger(__name__)


class NginxConfGenerator:
    """Generator for nginx configuration."""

    def generate(
        self,
        config: ProxyConfig,
        is_public_instance: bool = False,
    ) -> str:
        """Generate nginx configuration."""
        nginx_template: str = """# Generated nginx configuration from Traefik config
# Generated by nginx-traefik-converter

# Upstream definitions
{% for service in services %}
{{ service.to_nginx_upstream() }}

{% endfor %}

# Server blocks
{% for route in routes %}
server {
    {% if route.tls %}
    listen 443 ssl http2;
    {% if route.cert_resolver %}
    ssl_certificate /etc/nginx/certs/{{ route.host }}.crt;
    ssl_certificate_key /etc/nginx/certs/{{ route.host }}.key;
    {% endif %}   
    {% else %}
    listen 80;
    {% endif %}

    {% if route.host %}
    server_name {{ route.host }};
    {% endif %}

    {% if route.client_ip %}
    # Client IP restriction
    allow {{ route.client_ip }};
    deny all;
    {% endif %}

    {{ route.to_nginx_location() }} {
        {% if route.method %}
        # Method restriction
        if ($request_method !~ ^({{ route.method }})$ ) {
            return 405;
        }
        {% endif %}

        {% for header_name, header_value in route.headers.items() %}
        # Header check for {{ header_name }}
        if ($http_{{ header_name.lower().replace('-', '_') }} != "{{ header_value }}") {
            return 400;
        }
        {% endfor %}

        {% for param_name, param_value in route.query_params.items() %}
        # Query parameter check for {{ param_name }}
        if ($arg_{{ param_name }} != "{{ param_value }}") {
            return 400;
        }
        {% endfor %}

        # Proxy configuration
        {% if route.service %}
        {% set service = config.get_service_by_name(route.service) %}
        {% if service %}
        proxy_pass http://{{ service.name }};
        {% else %}
        proxy_pass http://{{ route.service }};
        {% endif %}
        {% else %}
        proxy_pass http://backend;
        {% endif %}
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

{% endfor %}

# HTTP to HTTPS redirect
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
"""

        template: Template = Template(nginx_template)
        return template.render(
            services=config.services,
            routes=config.routes,
            config=config,
            is_public_instance=is_public_instance,
        )
