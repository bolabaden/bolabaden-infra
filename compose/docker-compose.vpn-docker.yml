# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json



networks:
  vpn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.89.0.0/16
          gateway: 10.89.0.1



configs:
  openvpn-client-config:
    content: |
      client
      dev tun
      proto udp
      remote us-chicago.privacy.network 1197
      resolv-retry infinite
      nobind
      persist-key
      persist-tun
      cipher aes-256-gcm
      tls-client
      remote-cert-tls server
      auth-user-pass /etc/openvpn/client/auth.conf
      compress
      verb 1
      reneg-sec 0
      <ca>
      -----BEGIN CERTIFICATE-----
      MIIHqzCCBZOgAwIBAgIJAJ0u+vODZJntMA0GCSqGSIb3DQEBDQUAMIHoMQswCQYD
      VQQGEwJVUzELMAkGA1UECBMCQ0ExEzARBgNVBAcTCkxvc0FuZ2VsZXMxIDAeBgNV
      BAoTF1ByaXZhdGUgSW50ZXJuZXQgQWNjZXNzMSAwHgYDVQQLExdQcml2YXRlIElu
      dGVybmV0IEFjY2VzczEgMB4GA1UEAxMXUHJpdmF0ZSBJbnRlcm5ldCBBY2Nlc3Mx
      IDAeBgNVBCkTF1ByaXZhdGUgSW50ZXJuZXQgQWNjZXNzMS8wLQYJKoZIhvcNAQkB
      FiBzZWN1cmVAcHJpdmF0ZWludGVybmV0YWNjZXNzLmNvbTAeFw0xNDA0MTcxNzQw
      MzNaFw0zNDA0MTIxNzQwMzNaMIHoMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0Ex
      EzARBgNVBAcTCkxvc0FuZ2VsZXMxIDAeBgNVBAoTF1ByaXZhdGUgSW50ZXJuZXQg
      QWNjZXNzMSAwHgYDVQQLExdQcml2YXRlIEludGVybmV0IEFjY2VzczEgMB4GA1UE
      AxMXUHJpdmF0ZSBJbnRlcm5ldCBBY2Nlc3MxIDAeBgNVBCkTF1ByaXZhdGUgSW50
      ZXJuZXQgQWNjZXNzMS8wLQYJKoZIhvcNAQkBFiBzZWN1cmVAcHJpdmF0ZWludGVy
      bmV0YWNjZXNzLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALVk
      hjumaqBbL8aSgj6xbX1QPTfTd1qHsAZd2B97m8Vw31c/2yQgZNf5qZY0+jOIHULN
      De4R9TIvyBEbvnAg/OkPw8n/+ScgYOeH876VUXzjLDBnDb8DLr/+w9oVsuDeFJ9K
      V2UFM1OYX0SnkHnrYAN2QLF98ESK4NCSU01h5zkcgmQ+qKSfA9Ny0/UpsKPBFqsQ
      25NvjDWFhCpeqCHKUJ4Be27CDbSl7lAkBuHMPHJs8f8xPgAbHRXZOxVCpayZ2SND
      fCwsnGWpWFoMGvdMbygngCn6jA/W1VSFOlRlfLuuGe7QFfDwA0jaLCxuWt/BgZyl
      p7tAzYKR8lnWmtUCPm4+BtjyVDYtDCiGBD9Z4P13RFWvJHw5aapx/5W/CuvVyI7p
      Kwvc2IT+KPxCUhH1XI8ca5RN3C9NoPJJf6qpg4g0rJH3aaWkoMRrYvQ+5PXXYUzj
      tRHImghRGd/ydERYoAZXuGSbPkm9Y/p2X8unLcW+F0xpJD98+ZI+tzSsI99Zs5wi
      jSUGYr9/j18KHFTMQ8n+1jauc5bCCegN27dPeKXNSZ5riXFL2XX6BkY68y58UaNz
      meGMiUL9BOV1iV+PMb7B7PYs7oFLjAhh0EdyvfHkrh/ZV9BEhtFa7yXp8XR0J6vz
      1YV9R6DYJmLjOEbhU8N0gc3tZm4Qz39lIIG6w3FDAgMBAAGjggFUMIIBUDAdBgNV
      HQ4EFgQUrsRtyWJftjpdRM0+925Y6Cl08SUwggEfBgNVHSMEggEWMIIBEoAUrsRt
      yWJftjpdRM0+925Y6Cl08SWhge6kgeswgegxCzAJBgNVBAYTAlVTMQswCQYDVQQI
      EwJDQTETMBEGA1UEBxMKTG9zQW5nZWxlczEgMB4GA1UEChMXUHJpdmF0ZSBJbnRl
      cm5ldCBBY2Nlc3MxIDAeBgNVBAsTF1ByaXZhdGUgSW50ZXJuZXQgQWNjZXNzMSAw
      HgYDVQQDExdQcml2YXRlIEludGVybmV0IEFjY2VzczEgMB4GA1UEKRMXUHJpdmF0
      ZSBJbnRlcm5ldCBBY2Nlc3MxLzAtBgkqhkiG9w0BCQEWIHNlY3VyZUBwcml2YXRl
      aW50ZXJuZXRhY2Nlc3MuY29tggkAnS7684Nkme0wDAYDVR0TBAUwAwEB/zANBgkq
      hkiG9w0BAQ0FAAOCAgEAJsfhsPk3r8kLXLxY+v+vHzbr4ufNtqnL9/1Uuf8NrsCt
      pXAoyZ0YqfbkWx3NHTZ7OE9ZRhdMP/RqHQE1p4N4Sa1nZKhTKasV6KhHDqSCt/dv
      Em89xWm2MVA7nyzQxVlHa9AkcBaemcXEiyT19XdpiXOP4Vhs+J1R5m8zQOxZlV1G
      tF9vsXmJqWZpOVPmZ8f35BCsYPvv4yMewnrtAC8PFEK/bOPeYcKN50bol22QYaZu
      LfpkHfNiFTnfMh8sl/ablPyNY7DUNiP5DRcMdIwmfGQxR5WEQoHL3yPJ42LkB5zs
      6jIm26DGNXfwura/mi105+ENH1CaROtRYwkiHb08U6qLXXJz80mWJkT90nr8Asj3
      5xN2cUppg74nG3YVav/38P48T56hG1NHbYF5uOCske19F6wi9maUoto/3vEr0rnX
      JUp2KODmKdvBI7co245lHBABWikk8VfejQSlCtDBXn644ZMtAdoxKNfR2WTFVEwJ
      iyd1Fzx0yujuiXDROLhISLQDRjVVAvawrAtLZWYK31bY7KlezPlQnl/D9Asxe85l
      8jO5+0LdJ6VyOs/Hd4w52alDW/MFySDZSfQHMTIc30hLBJ8OnCEIvluVQQ2UQvoW
      +no177N9L2Y+M9TcTA62ZyMXShHQGeh20rb4kK8f+iFX8NxtdHVSkxMEFSfDDyQ=
      -----END CERTIFICATE-----
      </ca>
      disable-occ
  
  openvpn-auth:
    content: |
      p6969448
      3trzYcgdSw
  
  vpn-up-script:
    content: |
      #!/bin/sh
      set -xe
      dev=$$1          # tun0
      tun_mtu=$$2
      link_mtu=$$3
      local_ip=$$4     # assigned VPN client IP
      netmask=$$5
      type=$$6
      remote_ip=$$trusted_ip  # VPN server IP from OpenVPN env
      docker_net="10.89.0.0/16"
      lan_if="eth0"   # Container's network interface
      local_gateway=$$(/sbin/ip route | grep default | awk '{print $$3}' | head -1)
      echo "docker_net=$$docker_net"
      echo "local_gateway=$$local_gateway"
      echo "remote_ip=$$remote_ip"
      # Create routing table 'vpn' if missing
      mkdir -p /etc/iproute2
      touch /etc/iproute2/rt_tables
      if ! grep -q "^[0-9]\+[[:space:]]\+vpn$$" /etc/iproute2/rt_tables; then
          table_id=100
          while grep -q "^$$table_id[[:space:]]" /etc/iproute2/rt_tables; do
              table_id=$$((table_id + 1))
              if [ $$table_id -gt 255 ]; then
                  echo "Error: No available table IDs found"
                  exit 1
              fi
          done
          echo "$$table_id vpn" >> /etc/iproute2/rt_tables
          echo "Created routing table 'vpn' with ID $$table_id"
      fi
      # Remove previous rules and flush table
      /sbin/ip rule | /sbin/sed -n 's/.*iif[ \t]*'"$$lan_if"'.*vpn//p' | while read RULE; do
          /sbin/ip rule del iif $$lan_if lookup vpn || true
      done
      /sbin/ip route flush table vpn
      # Add route to VPN endpoint if values available (optional, as OpenVPN handles initial connection)
      if [ -n "$$local_gateway" ] && [ -n "$$remote_ip" ]; then
          /sbin/ip route add $$remote_ip via $$local_gateway dev $$lan_if || true
      else
          echo "Skipping VPN endpoint route addition (values unavailable or unnecessary)"
      fi
      # Add policy rule for incoming traffic on LAN interface
      /sbin/ip rule add iif $$lan_if lookup vpn
      # Add routes to VPN table
      /sbin/ip route add 0.0.0.0/1 dev $$dev table vpn
      /sbin/ip route add 128.0.0.0/1 dev $$dev table vpn
      /sbin/ip route add $$docker_net dev $$lan_if table vpn
      # Set up iptables for forwarding and NAT
      iptables -A FORWARD -i $$lan_if -o $$dev -j ACCEPT
      iptables -A FORWARD -i $$dev -o $$lan_if -j ACCEPT
      iptables -t nat -A POSTROUTING -s $$docker_net ! -d $$docker_net -o $$dev -j MASQUERADE
      exit 0
  
  vpn-down-script:
    content: |
      #!/bin/sh
      set -xe
      dev=$$1
      tun_mtu=$$2
      link_mtu=$$3
      local_ip=$$4
      netmask=$$5
      type=$$6
      remote_ip=$$trusted_ip
      docker_net="10.89.0.0/16"
      lan_if="eth0"
      local_gateway=$$(/sbin/ip route | grep default | awk '{print $$3}' | head -1)
      echo "docker_net=$$docker_net"
      echo "local_gateway=$$local_gateway"
      # Flush VPN table
      /sbin/ip route flush table vpn
      # Remove policy rules
      /sbin/ip rule | grep "iif $$lan_if lookup vpn" | sed "s/^[0-9]*:[ \t]*//" | while read RULE; do
          /sbin/ip rule del $$RULE || true
      done
      # Remove route to VPN endpoint
      if [ -n "$$local_gateway" ] && [ -n "$$remote_ip" ]; then
          /sbin/ip route del $$remote_ip via $$local_gateway dev $$lan_if 2>/dev/null || true
      fi
      # Clean up iptables
      iptables -D FORWARD -i $$lan_if -o $$dev -j ACCEPT 2>/dev/null || true
      iptables -D FORWARD -i $$dev -o $$lan_if -j ACCEPT 2>/dev/null || true
      iptables -t nat -D POSTROUTING -s $$docker_net ! -d $$docker_net -o $$dev -j MASQUERADE 2>/dev/null || true
      echo "VPN routing cleanup completed"
      exit 0
  
  vpn-init-script:
    content: |
      #!/bin/sh
      set -xe
      # Install required packages
      apk add --no-cache sed openvpn openssl curl iptables ip6tables iproute2
      # Create necessary directories
      mkdir -p /etc/openvpn/client
      # Verify versions
      echo "OpenVPN version: $$(openvpn --version | head -1)"
      echo "OpenSSL version: $$(openssl version)"
      # Start OpenVPN
      echo "Starting OpenVPN..."
      exec openvpn \
        --config /etc/openvpn/client/vpn_config.conf \
        --script-security 2 \
        --up /etc/openvpn/client/vpn-up.sh \
        --down /etc/openvpn/client/vpn-down.sh \
        --auth-nocache
services:
  openvpn-router:
    image: alpine
    container_name: openvpn-router
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    networks:
      vpn-network:
        ipv4_address: 10.89.0.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    sysctls:
      - net.ipv4.ip_forward=1
    healthcheck:
      test: ["CMD-SHELL", "curl -s ifconfig.me | grep -E '^(104\\.(1[6-9]|2[0-9]|3[0-1])\\.|193\\.(1[6-9]|2[0-9]|3[0-1])\\.)' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    configs:
      - source: openvpn-client-config
        target: /etc/openvpn/client/vpn_config.conf
        mode: '0700'
      - source: openvpn-auth
        target: /etc/openvpn/client/auth.conf
        mode: '0700'
      - source: vpn-up-script
        target: /etc/openvpn/client/vpn-up.sh
        mode: '0700'
      - source: vpn-down-script
        target: /etc/openvpn/client/vpn-down.sh
        mode: '0700'
      - source: vpn-init-script
        target: /etc/openvpn/init.sh
        mode: '0700'
    command: ["/etc/openvpn/init.sh"]
    restart: always