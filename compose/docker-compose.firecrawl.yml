# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json



secrets:
  openai-api-key:
    file: ${SECRETS_PATH:?}/openai-api-key.txt
  firecrawl-api-key:
    file: ${SECRETS_PATH:?}/firecrawl-api-key.txt


services:
  playwright-service:
    # NOTE: If you don't want to build the service locally,
    # uncomment the build: statement and comment out the image: statement
    build: https://github.com/firecrawl/firecrawl.git#main:/apps/playwright-service-ts
    # uncomment on amd64 only
    #image: ghcr.io/firecrawl/playwright-service
    container_name: playwright-service
    hostname: playwright-service
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - backend
    environment:
      PORT: ${FIRECRAWL_PLAYWRIGHT_SERVICE_PORT:-3000}
      PROXY_SERVER: ${FIRECRAWL_PROXY_SERVER:-}
      PROXY_USERNAME: ${FIRECRAWL_PROXY_USERNAME:-}
      PROXY_PASSWORD: ${FIRECRAWL_PROXY_PASSWORD:-}
      BLOCK_MEDIA: ${FIRECRAWL_BLOCK_MEDIA:-false}
    restart: always
  firecrawl:
    depends_on:
      redis:
        condition: service_healthy
      playwright-service:
        condition: service_started
      nuq-postgres:
        condition: service_healthy
    build: https://github.com/firecrawl/firecrawl.git#main:/apps/api
    image: ghcr.io/firecrawl/firecrawl
    container_name: firecrawl
    hostname: api
    networks:
      - backend
      - publicnet
    secrets:
      - openai-api-key
      - firecrawl-api-key
    extra_hosts:
      - host.docker.internal:host-gateway
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    expose:
      - ${FIRECRAWL_INTERNAL_PORT:-3002}
      - ${FIRECRAWL_EXTRACT_WORKER_PORT:-3004}
      - ${FIRECRAWL_WORKER_PORT:-3005}
    environment:
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      PLAYWRIGHT_MICROSERVICE_URL: ${PLAYWRIGHT_HOST:-http://playwright-service:3000/scrape}
      NUQ_DATABASE_URL: postgres://postgres:postgres@nuq-postgres:5432/postgres
      EXTRACT_WORKER_PORT: ${FIRECRAWL_EXTRACT_WORKER_PORT:-3004}
      # To turn on DB authentication, you need to set up Supabase.
      USE_DB_AUTHENTICATION: ${FIRECRAWL_USE_DB_AUTHENTICATION:-}  # supabase is required
      # Provide your OpenAI API key here to enable AI features
      OPENAI_API_KEY_FILE: /run/secrets/openai-api-key
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-}  # e.g. http://localhost:11434/api
      MODEL_NAME: ${FIRECRAWL_MODEL_NAME:-}  # e.g. deepseek-r1:7b
      MODEL_EMBEDDING_NAME: ${FIRECRAWL_MODEL_EMBEDDING_NAME:-}  # e.g. nomic-embed-text
      # Experimental: Use Ollama
      OLLAMA_BASE_URL: ${FIRECRAWL_OLLAMA_BASE_URL:-}  # e.g. https://example.com/v1
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      # This key lets you access the queue admin panel. Change this if your deployment is publicly accessible.
      BULL_AUTH_KEY_FILE: /run/secrets/firecrawl-api-key
      # Use if you've set up authentication and want to test with a real API key
      TEST_API_KEY_FILE: /run/secrets/firecrawl-api-key
      POSTHOG_API_KEY: ${POSTHOG_API_KEY:-}
      POSTHOG_HOST: ${POSTHOG_HOST:-}
      # Supabase Setup (used to support DB authentication, advanced logging, etc.)
      SUPABASE_ANON_TOKEN: ${SUPABASE_ANON_TOKEN:-}
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_SERVICE_TOKEN: ${FIRECRAWL_SUPABASE_SERVICE_TOKEN:-}
      SELF_HOSTED_WEBHOOK_URL: ${FIRECRAWL_SELF_HOSTED_WEBHOOK_URL:-}
      SERPER_API_KEY: ${SERPER_API_KEY:-}
      SEARCHAPI_API_KEY: ${SEARCHAPI_API_KEY:-}
      # You can specify a SearXNG server with the JSON format enabled, if you'd like to use that instead of direct Google.
      # You can also customize the engines and categories parameters, but the defaults should also work just fine.
      # SEARXNG_ENDPOINT: http://your.searxng.server
      SEARXNG_ENDPOINT: ${SEARXNG_ENDPOINT:-https://searxng.$DOMAIN}
      #SEARXNG_ENGINES: ${FIRECRAWL_SEARXNG_ENGINES:-}
      #SEARXNG_CATEGORIES: ${FIRECRAWL_SEARXNG_CATEGORIES:-}
      HOST: 0.0.0.0
      PORT: ${FIRECRAWL_INTERNAL_PORT:-3002}
      WORKER_PORT: ${FIRECRAWL_WORKER_PORT:-3005}
      ENV: ${FIRECRAWL_ENV:-local}
    labels:
      traefik.enable: true
      traefik.http.routers.firecrawl.rule: Host(`firecrawl-api.$DOMAIN`) || Host(`firecrawl-api.$TS_HOSTNAME.$DOMAIN`)
      traefik.http.services.firecrawl.loadbalancer.server.port: ${FIRECRAWL_INTERNAL_PORT:-3002}
    command: node dist/src/harness.js --start-docker
    mem_reservation: 4G
    cpus: 4.0
    restart: always
  
  nuq-postgres:
    build: https://github.com/firecrawl/firecrawl.git#main:/apps/nuq-postgres
    container_name: nuq-postgres
    hostname: ${NUQ_POSTGRES_HOSTNAME:-nuq-postgres}
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - backend
    environment:
      POSTGRES_USER: ${FIRECRAWL_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${FIRECRAWL_POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${FIRECRAWL_POSTGRES_DB:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
