# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json



secrets:
  premiumize-auth:
    file: ${CONFIG_PATH:-./volumes}/premiumize-auth.txt



configs:
  grafana.ini:
    content: |
      ##################### Grafana Configuration Defaults #####################
      #
      # Do not modify this file in grafana installs
      #

      # possible values : production, development
      app_mode = production

      # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
      instance_name = $$HOSTNAME

      #################################### Paths ###############################
      [paths]
      # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
      data = data

      # Temporary files in `data` directory older than given duration will be removed
      temp_data_lifetime = 24h

      # Directory where grafana can store logs
      logs = data/log

      # Directory where grafana will automatically scan and look for plugins
      plugins = data/plugins

      # folder that contains provisioning config files that grafana will apply on startup and while running.
      provisioning = conf/provisioning

      # Directories that are permitted to contain local repositories.
      # This is a list. Each entry is delimited by a pipe (|). No leading or trailing spaces are supported.
      # These do not need to be absolute paths, in which case they'll be relative to the path where you are running Grafana.
      # Empty entries will return an error, unless the string is just a single pipe.
      # Example: permitted_provisioning_paths = /tmp|/etc/grafana/repositories|conf/provisioning
      permitted_provisioning_paths = devenv/dev-dashboards|conf/provisioning

      #################################### Server ##############################
      [server]
      # Protocol (http, https, h2, socket)
      protocol = http

      # Minimum TLS version allowed. By default, this value is empty. Accepted values are: TLS1.2, TLS1.3. If nothing is set TLS1.2 would be taken
      min_tls_version = ""

      # The ip address to bind to, empty will bind to all interfaces
      http_addr =

      # The http port to use
      http_port = ${GRAFANA_PORT:-3000}

      # The public facing domain name used to access grafana from a browser
      domain = localhost

      # Redirect to correct domain if host header does not match domain
      # Prevents DNS rebinding attacks
      enforce_domain = false

      # The full public facing url
      root_url = %(protocol)s://%(domain)s:%(http_port)s/

      # Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
      serve_from_sub_path = false

      # Log web requests
      router_logging = ${GF_ROUTER_LOGGING:-true}

      # the path relative working path
      static_root_path = public

      # enable gzip
      enable_gzip = ${GF_ENABLE_GZIP:-false}

      # https certs & key file
      cert_file =
      cert_key =
      cert_pass =

      # Certificates file watch interval
      certs_watch_interval =

      # Unix socket gid
      # Changing the gid of a file without privileges requires that the target group is in the group of the process and that the process is the file owner
      # It is recommended to set the gid as http server user gid
      # Not set when the value is -1
      socket_gid = -1

      # Unix socket mode
      socket_mode = 0660

      # Unix socket path
      socket = ${GF_TEMP_SOCKET:-/tmp/grafana.sock}

      # CDN Url
      cdn_url = ${GF_CDN_URL:-}

      # Sets the maximum time in minutes before timing out read of an incoming request and closing idle connections.
      # `0` means there is no timeout for reading the request.
      read_timeout = ${GF_READ_TIMEOUT:-0}

      # This setting enables you to specify additional headers that the server adds to HTTP(S) responses.
      [server.custom_response_headers]
      #exampleHeader1 = exampleValue1
      #exampleHeader2 = exampleValue2

      [environment]
      # Sets whether the local file system is available for Grafana to use. Default is true for backward compatibility.
      local_file_system_available = ${GF_LOCAL_FILE_SYSTEM_AVAILABLE:-true}

      #################################### GRPC Server #########################
      [grpc_server]
      network = "tcp"
      address = "127.0.0.1:${GF_GRPC_PORT:-10000}"
      use_tls = false
      cert_file =
      key_file =
      # this will log the request and response for each unary gRPC call
      enable_logging = ${GF_GRPC_ENABLE_LOGGING:-false}

      # Maximum size of a message that can be received in bytes. If not set, uses the gRPC default (4MiB).
      max_recv_msg_size = ${GF_GRPC_MAX_RECV_MSG_SIZE:-}

      # Maximum size of a message that can be sent in bytes. If not set, uses the gRPC default (unlimited).
      max_send_msg_size = ${GF_GRPC_MAX_SEND_MSG_SIZE:-}

      #################################### Database ############################
      [database]
      # You can configure the database connection by specifying type, host, name, user and password
      # as separate properties or as on string using the url property.

      # Either "mysql", "postgres" or "sqlite3", it's your choice
      type = sqlite3
      host = 127.0.0.1:${GF_DB_SQLITE_PORT:-3306}
      name = ${GF_DB_SQLITE_NAME:-grafana}
      user = ${GF_DB_SQLITE_USER:-root}
      # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
      password = ${GF_DB_SQLITE_PASSWORD:-}
      # Use either URL or the previous fields to configure the database
      # Example: mysql://user:secret@host:port/database
      url = ${GF_DB_SQLITE_URL:-}

      # Set to true or false to enable or disable high availability mode.
      # When it's set to false some functions will be simplified and only run in-process
      # instead of relying on the database.
      #
      # Only set it to false if you run only a single instance of Grafana.
      high_availability = ${GF_DB_SQLITE_HIGH_AVAILABILITY:-false}

      # Max idle conn setting default is 2
      max_idle_conn = ${GF_DB_SQLITE_MAX_IDLE_CONN:-2}

      # Max conn setting default is 0 (mean not set)
      max_open_conn = ${GF_DB_SQLITE_MAX_OPEN_CONN:-0}

      # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
      conn_max_lifetime = ${GF_DB_SQLITE_CONN_MAX_LIFETIME:-14400}

      # Set to true to log the sql calls and execution times.
      log_queries = ${GF_DB_SQLITE_LOG_QUERIES:-}

      # For "postgres", use either "disable", "require" or "verify-full"
      # For "mysql", use either "true", "false", or "skip-verify".
      ssl_mode = ${GF_DB_SQLITE_SSL_MODE:-disable}

      # For "postgres", use either "1" to enable or "0" to disable SNI
      ssl_sni = ${GF_DB_SQLITE_SSL_SNI:-0}

      # Database drivers may support different transaction isolation levels.
      # Currently, only "mysql" driver supports isolation levels.
      # If the value is empty - driver's default isolation level is applied.
      # For "mysql" use "READ-UNCOMMITTED", "READ-COMMITTED", "REPEATABLE-READ" or "SERIALIZABLE".
      isolation_level = ${GF_DB_SQLITE_ISOLATION_LEVEL:-}

      ca_cert_path = ${GF_DB_SQLITE_CA_CERT_PATH:-}
      client_key_path = ${GF_DB_SQLITE_CLIENT_KEY_PATH:-}
      client_cert_path = ${GF_DB_SQLITE_CLIENT_CERT_PATH:-}
      server_cert_name = ${GF_DB_SQLITE_SERVER_CERT_NAME:-}

      # For "sqlite3" only, path relative to data_path setting
      path = ${GF_DB_SQLITE_PATH:-grafana.db}

      # For "sqlite3" only. cache mode setting used for connecting to the database
      cache_mode = ${GF_DB_SQLITE_CACHE_MODE:-private}

      # For "sqlite3" only. Enable/disable Write-Ahead Logging, https://sqlite.org/wal.html. Default is false.
      wal = ${GF_DB_SQLITE_WAL:-false}

      # For "mysql" and "postgres". Lock the database for the migrations, default is true.
      migration_locking = ${GF_DB_SQLITE_MIGRATION_LOCKING:-true}

      # For "mysql" and "postgres" only if migrationLocking is set. How many seconds to wait before failing to lock the database for the migrations, default is 0.
      locking_attempt_timeout_sec = ${GF_DB_SQLITE_LOCKING_ATTEMPT_TIMEOUT_SEC:-0}

      # For "sqlite" only. How many times to retry query in case of database is locked failures. Default is 0 (disabled).
      query_retries = ${GF_DB_SQLITE_QUERY_RETRIES:-0}

      # For "sqlite" only. How many times to retry transaction in case of database is locked failures. Default is 5.
      transaction_retries = ${GF_DB_SQLITE_TRANSACTION_RETRIES:-5}

      # Set to true to add metrics and tracing for database queries.
      instrument_queries = ${GF_DB_SQLITE_INSTRUMENT_QUERIES:-false}

      #################################### Cache server #############################
      [remote_cache]
      # Either "redis", "memcached" or "database" default is "database"
      type = ${GF_DB_REDIS_TYPE:-database}

      # cache connectionstring options
      # database: will use Grafana primary database.
      # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0,username=grafana,password=grafanaRocks,ssl=false`. Only addr is required. ssl may be 'true', 'false', or 'insecure'.
      # memcache: 127.0.0.1:${GF_REMOTE_CACHE_MEMCACHE_PORT:-11211}
      connstr = ${GF_REMOTE_CACHE_CONNSTR:-}

      # prefix prepended to all the keys in the remote cache
      prefix = ${GF_REMOTE_CACHE_PREFIX:-}

      # This enables encryption of values stored in the remote cache
      encryption = ${GF_REMOTE_CACHE_ENCRYPTION:-}

      #################################### Data proxy ###########################
      [dataproxy]

      # This enables data proxy logging, default is false
      logging = ${GF_DATA_PROXY_LOGGING:-false}

      # How long the data proxy waits to read the headers of the response before timing out, default is 30 seconds.
      # This setting also applies to core backend HTTP data sources where query requests use an HTTP client with timeout set.
      timeout = ${GF_DATA_PROXY_TIMEOUT:-30}

      # How long the data proxy waits to establish a TCP connection before timing out, default is 10 seconds.
      dialTimeout = ${GF_DATA_PROXY_DIALECT_TIMEOUT:-10}

      # How many seconds the data proxy waits before sending a keepalive request.
      keep_alive_seconds = ${GF_DATA_PROXY_KEEP_ALIVE_SECONDS:-30}

      # How many seconds the data proxy waits for a successful TLS Handshake before timing out.
      tls_handshake_timeout_seconds = ${GF_DATA_PROXY_TLS_HANDSHAKE_TIMEOUT_SECONDS:-10}

      # How many seconds the data proxy will wait for a server's first response headers after
      # fully writing the request headers if the request has an "Expect: 100-continue"
      # header. A value of 0 will result in the body being sent immediately, without
      # waiting for the server to approve.
      expect_continue_timeout_seconds = ${GF_DATA_PROXY_EXPECT_CONTINUE_TIMEOUT_SECONDS:-1}

      # Optionally limits the total number of connections per host, including connections in the dialing,
      # active, and idle states. On limit violation, dials will block.
      # A value of zero (0) means no limit.
      max_conns_per_host = ${GF_DATA_PROXY_MAX_CONNS_PER_HOST:-0}

      # The maximum number of idle connections that Grafana will keep alive.
      max_idle_connections = ${GF_DATA_PROXY_MAX_IDLE_CONNECTIONS:-100}

      # How many seconds the data proxy keeps an idle connection open before timing out.
      idle_conn_timeout_seconds = ${GF_DATA_PROXY_IDLE_CONN_TIMEOUT_SECONDS:-90}

      # If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request.
      send_user_header = ${GF_DATA_PROXY_SEND_USER_HEADER:-false}

      # Limit the amount of bytes that will be read/accepted from responses of outgoing HTTP requests.
      response_limit = ${GF_DATA_PROXY_RESPONSE_LIMIT:-0}

      # Limits the number of rows that Grafana will process from SQL data sources.
      row_limit = ${GF_DATA_PROXY_ROW_LIMIT:-1000000}

      # Sets a custom value for the `User-Agent` header for outgoing data proxy requests. If empty, the default value is `Grafana/<BuildVersion>` (for example `Grafana/9.0.0`).
      user_agent = ${GF_DATA_PROXY_USER_AGENT:-}

      #################################### Analytics ###########################
      [analytics]
      # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
      # No ip addresses are being tracked, only simple counters to track
      # running instances, dashboard and error counts. It is very helpful to us.
      # Change this option to false to disable reporting.
      reporting_enabled = ${GF_ANALYTICS_REPORTING_ENABLED:-true}

      # The name of the distributor of the Grafana instance. Ex hosted-grafana, grafana-labs
      reporting_distributor = ${GF_ANALYTICS_REPORTING_DISTRIBUTOR:-grafana-labs}

      # Set to false to disable all checks to https://grafana.com
      # for new versions of grafana. The check is used
      # in some UI views to notify that a grafana update exists.
      # This option does not cause any auto updates, nor send any information
      # only a GET request to https://grafana.com/api/grafana/versions/stable to get the latest version.
      check_for_updates = ${GF_ANALYTICS_CHECK_FOR_UPDATES:-true}

      # Set to false to disable all checks to https://grafana.com
      # for new versions of plugins. The check is used
      # in some UI views to notify that a plugin update exists.
      # This option does not cause any auto updates, nor send any information
      # only a GET request to https://grafana.com to get the latest versions.
      check_for_plugin_updates = ${GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES:-true}

      # Google Analytics universal tracking code, only enabled if you specify an id here
      google_analytics_ua_id = ${GF_ANALYTICS_GOOGLE_ANALYTICS_UA_ID:-}

      # Google Analytics 4 tracking code, only enabled if you specify an id here
      google_analytics_4_id = ${GF_ANALYTICS_GOOGLE_ANALYTICS_4_ID:-}

      # When Google Analytics 4 Enhanced event measurement is enabled, we will try to avoid sending duplicate events and let Google Analytics 4 detect navigation changes, etc.
      google_analytics_4_send_manual_page_views = ${GF_ANALYTICS_GOOGLE_ANALYTICS_4_SEND_MANUAL_PAGE_VIEWS:-false}

      # Google Tag Manager ID, only enabled if you specify an id here
      google_tag_manager_id = ${GF_ANALYTICS_GOOGLE_TAG_MANAGER_ID:-}

      # Rudderstack write key, enabled only if rudderstack_data_plane_url is also set
      rudderstack_write_key = ${GF_ANALYTICS_RUDDERSTACK_WRITE_KEY:-}

      # Rudderstack data plane url, enabled only if rudderstack_write_key is also set
      rudderstack_data_plane_url = ${GF_ANALYTICS_RUDDERSTACK_DATA_PLANE_URL:-}

      # Rudderstack SDK url, optional, only valid if rudderstack_write_key and rudderstack_data_plane_url is also set
      rudderstack_sdk_url = ${GF_ANALYTICS_RUDDERSTACK_SDK_URL:-}

      # Rudderstack Config url, optional, used by Rudderstack SDK to fetch source config
      rudderstack_config_url = ${GF_ANALYTICS_RUDDERSTACK_CONFIG_URL:-}

      # Rudderstack Integrations URL, optional. Only valid if you pass the SDK version 1.1 or higher
      rudderstack_integrations_url = ${GF_ANALYTICS_RUDDERSTACK_INTEGRATIONS_URL:-}

      # Intercom secret, optional, used to hash user_id before passing to Intercom via Rudderstack
      intercom_secret = ${GF_ANALYTICS_INTERCOM_SECRET:-}

      # Application Insights connection string. Specify an URL string to enable this feature.
      application_insights_connection_string = ${GF_ANALYTICS_APPLICATION_INSIGHTS_CONNECTION_STRING:-}

      # Optional. Specifies an Application Insights endpoint URL where the endpoint string is wrapped in backticks ``.
      application_insights_endpoint_url = ${GF_ANALYTICS_APPLICATION_INSIGHTS_ENDPOINT_URL:-}

      # Controls if the UI contains any links to user feedback forms
      feedback_links_enabled = ${GF_ANALYTICS_FEEDBACK_LINKS_ENABLED:-true} 

      # Static context that is being added to analytics events
      reporting_static_context = ${GF_ANALYTICS_REPORTING_STATIC_CONTEXT:-}

      # Logs interaction events to the browser javascript console, intended for development only
      browser_console_reporter = ${GF_ANALYTICS_BROWSER_CONSOLE_REPORTER:-false}

      #################################### Security ############################
      [security]
      # disable creation of admin user on first start of grafana
      disable_initial_admin_creation = ${GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION:-false}

      # default admin user, created on startup
      admin_user = ${GF_SECURITY_ADMIN_USER:-admin}

      # default admin password, can be changed before first start of grafana, or in profile settings
      admin_password = ${GF_SECURITY_ADMIN_PASSWORD:-admin}

      # default admin email, created on startup
      admin_email = ${GF_SECURITY_ADMIN_EMAIL:-admin@localhost}

      # used for signing
      secret_key = ${GF_SECURITY_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}

      # current key provider used for envelope encryption, default to static value specified by secret_key
      encryption_provider = ${GF_SECURITY_ENCRYPTION_PROVIDER:-secretKey.v1}

      # list of configured key providers, space separated (Enterprise only): e.g., awskms.v1 azurekv.v1
      available_encryption_providers = ${GF_SECURITY_AVAILABLE_ENCRYPTION_PROVIDERS:-}

      # disable gravatar profile images
      disable_gravatar = ${GF_SECURITY_DISABLE_GRAVATAR:-false}

      # data source proxy whitelist (ip_or_domain:port separated by spaces)
      data_source_proxy_whitelist = ${GF_SECURITY_DATA_SOURCE_PROXY_WHITELIST:-}

      # disable protection against brute force login attempts
      disable_brute_force_login_protection = ${GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION:-false}

      # max number of failed login attempts before user gets locked
      brute_force_login_protection_max_attempts = ${GF_SECURITY_BRUTE_FORCE_LOGIN_PROTECTION_MAX_ATTEMPTS:-5}

      # disable protection against brute force login attempts by IP address
      disable_ip_address_login_protection = ${GF_SECURITY_DISABLE_IP_ADDRESS_LOGIN_PROTECTION:-true}

      # set to true if you host Grafana behind HTTPS. default is false.
      cookie_secure = ${GF_SECURITY_COOKIE_SECURE:-false}

      # set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
      cookie_samesite = ${GF_SECURITY_COOKIE_SAMESITE:-lax}

      # set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
      allow_embedding = ${GF_SECURITY_ALLOW_EMBEDDING:-false}

      # Set to true if you want to enable http strict transport security (HSTS) response header.
      # HSTS tells browsers that the site should only be accessed using HTTPS.
      strict_transport_security = ${GF_SECURITY_STRICT_TRANSPORT_SECURITY:-false}

      # Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
      strict_transport_security_max_age_seconds = ${GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS:-86400}

      # Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
      strict_transport_security_preload = ${GF_SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD:-false}

      # Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
      strict_transport_security_subdomains = ${GF_SECURITY_STRICT_TRANSPORT_SECURITY_SUBDOMAINS:-false}

      # Set to true to enable the X-Content-Type-Options response header.
      # The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
      # in the Content-Type headers should not be changed and be followed.
      x_content_type_options = ${GF_SECURITY_X_CONTENT_TYPE_OPTIONS:-true}

      # Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
      # when they detect reflected cross-site scripting (XSS) attacks.
      x_xss_protection = ${GF_SECURITY_X_XSS_PROTECTION:-true}

      # Enable adding the Content-Security-Policy header to your requests.
      # CSP allows to control resources the user agent is allowed to load and helps prevent XSS attacks.
      content_security_policy = ${GF_SECURITY_CONTENT_SECURITY_POLICY:-false}

      # Set Content Security Policy template used when adding the Content-Security-Policy header to your requests.
      # $$NONCE in the template includes a random nonce.
      # $$ROOT_PATH is server.root_url without the protocol.
      content_security_policy_template = """script-src 'self' 'unsafe-eval' 'unsafe-inline' 'strict-dynamic' $$NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline' blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com ws://$$ROOT_PATH wss://$$ROOT_PATH;manifest-src 'self';media-src 'none';form-action 'self';"""

      # Enable adding the Content-Security-Policy-Report-Only header to your requests.
      # Allows you to monitor the effects of a policy without enforcing it.
      content_security_policy_report_only = ${GF_SECURITY_CONTENT_SECURITY_POLICY_REPORT_ONLY:-false}

      # Set Content Security Policy Report Only template used when adding the Content-Security-Policy-Report-Only header to your requests.
      # $$NONCE in the template includes a random nonce.
      # $$ROOT_PATH is server.root_url without the protocol.
      content_security_policy_report_only_template = """script-src 'self' 'unsafe-eval' 'unsafe-inline' 'strict-dynamic' $$NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline' blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com ws://$$ROOT_PATH wss://$$ROOT_PATH;manifest-src 'self';media-src 'none';form-action 'self';"""

      # Controls if old angular plugins are supported or not.
      angular_support_enabled = ${GF_SECURITY_ANGULAR_SUPPORT_ENABLED:-false}

      # The CSRF check will be executed even if the request has no login cookie.
      csrf_always_check = ${GF_SECURITY_CSRF_ALWAYS_CHECK:-false}

      # Comma-separated list of plugins ids that will be loaded inside the frontend sandbox
      # Currently behind the feature flag pluginsFrontendSandbox
      enable_frontend_sandbox_for_plugins = ${GF_SECURITY_ENABLE_FRONTEND_SANDBOX_FOR_PLUGINS:-}

      # Comma-separated list of paths for POST/PUT URL in actions. Empty will allow anything that is not on the same origin
      actions_allow_post_url = ${GF_SECURITY_ACTIONS_ALLOW_POST_URL:-}

      [security.encryption]
      # Defines the time-to-live (TTL) for decrypted data encryption keys stored in memory (cache).
      # Please note that small values may cause performance issues due to a high frequency decryption operations.
      data_keys_cache_ttl = ${GF_SECURITY_DATA_KEYS_CACHE_TTL:-15m}

      # Defines the frequency of data encryption keys cache cleanup interval.
      # On every interval, decrypted data encryption keys that reached the TTL are removed from the cache.
      data_keys_cache_cleanup_interval = ${GF_SECURITY_DATA_KEYS_CACHE_CLEANUP_INTERVAL:-1m}

      #################################### Snapshots ###########################
      [snapshots]
      # set to false to remove snapshot functionality
      enabled = ${GF_SNAPSHOTS_ENABLED:-true}

      # snapshot sharing options
      external_enabled = ${GF_SNAPSHOTS_EXTERNAL_ENABLED:-true}
      external_snapshot_url = ${GF_SNAPSHOTS_EXTERNAL_SNAPSHOT_URL:-https://snapshots.raintank.io}
      external_snapshot_name = Publish to snapshots.raintank.io

      # Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
      # creating and deleting snapshots.
      public_mode = ${GF_SNAPSHOTS_PUBLIC_MODE:-false}

      #################################### Dashboards ##################

      [dashboards]
      # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
      versions_to_keep = ${GF_SNAPSHOTS_VERSIONS_TO_KEEP:-20}

      # Minimum dashboard refresh interval. When set, this will restrict users to set the refresh interval of a dashboard lower than given interval. Per default this is 5 seconds.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      min_refresh_interval = ${GF_SNAPSHOTS_MIN_REFRESH_INTERVAL:-5s}

      # Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + "dashboards/home.json"
      default_home_dashboard_path = ${GF_SNAPSHOTS_DEFAULT_HOME_DASHBOARD_PATH:-}

      # Dashboards UIDs to report performance metrics for. * can be used to report metrics for all dashboards
      dashboard_performance_metrics = ${GF_SNAPSHOTS_DASHBOARD_PERFORMANCE_METRICS:-}

      # Maximum number of series that will be showed in a single panel. Users can opt in to rendering all series. Default is 0 (unlimited).
      panel_series_limit = ${GF_SNAPSHOTS_PANEL_SERIES_LIMIT:-0}

      ################################### Data sources #########################
      [datasources]
      # Upper limit of data sources that Grafana will return. This limit is a temporary configuration and it will be deprecated when pagination will be introduced on the list data sources API.
      datasource_limit = ${GF_SNAPSHOTS_DATASOURCE_LIMIT:-5000}

      # Number of queries to be executed concurrently. Only for the datasource supports concurrency.
      # For now only Loki and InfluxDB (with influxql) are supporting concurrency behind the feature flags.
      # Check datasource documentations for enabling concurrency.
      concurrent_query_count = ${GF_SNAPSHOTS_CONCURRENT_QUERY_COUNT:-10}

      # Default behavior for the "Manage alerts via Alerting UI" toggle when configuring a data source.
      # It only works if the data source's `jsonData.manageAlerts` prop does not contain a previously configured value.
      default_manage_alerts_ui_toggle = ${GF_SNAPSHOTS_DEFAULT_MANAGE_ALERTS_UI_TOGGLE:-true}

      # Default behavior for the "Allow as recording rules target" toggle when configuring a data source.
      # It only works if the data source's `jsonData.allowAsRecordingRulesTarget` prop does not contain a previously configured value.
      default_allow_recording_rules_target_alerts_ui_toggle = ${GF_SNAPSHOTS_DEFAULT_ALLOW_RECORDING_RULES_TARGET_ALERTS_UI_TOGGLE:-true}

      ################################### SQL Data Sources #####################
      [sql_datasources]
      # Default maximum number of open connections maintained in the connection pool
      # when connecting to SQL based data sources
      max_open_conns_default = ${GF_SNAPSHOTS_MAX_OPEN_CONNS_DEFAULT:-100}

      # Default maximum number of idle connections maintained in the connection pool
      # when connecting to SQL based data sources
      max_idle_conns_default = ${GF_SNAPSHOTS_MAX_IDLE_CONNS_DEFAULT:-100}

      # Default maximum connection lifetime used when connecting
      # to SQL based data sources.
      max_conn_lifetime_default = ${GF_SNAPSHOTS_MAX_CONN_LIFETIME_DEFAULT:-14400}

      #################################### Users ###############################
      [users]
      # disable user signup / registration
      allow_sign_up = ${GF_USERS_ALLOW_SIGN_UP:-false}

      # Allow non admin users to create organizations
      allow_org_create = ${GF_USERS_ALLOW_ORG_CREATE:-false}

      # Set to true to automatically assign new users to the default organization (id 1)
      auto_assign_org = ${GF_USERS_AUTO_ASSIGN_ORG:-true}

      # Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
      auto_assign_org_id = ${GF_USERS_AUTO_ASSIGN_ORG_ID:-1}

      # Default role new users will be automatically assigned
      auto_assign_org_role = ${GF_USERS_AUTO_ASSIGN_ORG_ROLE:-Viewer}

      # Require email validation before sign up completes
      verify_email_enabled = ${GF_USERS_VERIFY_EMAIL_ENABLED:-false}

      # Redirect to default OrgId after login
      login_default_org_id = ${GF_USERS_LOGIN_DEFAULT_ORG_ID:-}

      # Background text for the user field on the login page
      login_hint = ${GF_USERS_LOGIN_HINT:-}
      password_hint =

      # Default UI theme ("dark" or "light" or "system")
      default_theme = ${GF_USERS_DEFAULT_THEME:-dark}

      # Default UI language (supported IETF language tag, such as en-US)
      default_language = ${GF_USERS_DEFAULT_LANGUAGE:-en-US}

      # Path to a custom home page. Users are only redirected to this if the default home dashboard is used. It should match a frontend route and contain a leading slash.
      home_page = ${GF_USERS_HOME_PAGE:-}

      # External user management
      external_manage_link_url = ${GF_USERS_EXTERNAL_MANAGE_LINK_URL:-}
      external_manage_link_name = ${GF_USERS_EXTERNAL_MANAGE_LINK_NAME:-}
      external_manage_info =

      # Deprecated: Assign your viewers to editors.
      # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
      viewers_can_edit = ${GF_USERS_VIEWERS_CAN_EDIT:-false}

      # Deprecated: Assign your editors to admins.
      # Editors can administrate dashboard, folders and teams they create
      editors_can_admin = ${GF_USERS_EDITORS_CAN_ADMIN:-false}

      # The duration in time a user invitation remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 24h (24 hours). The minimum supported duration is 15m (15 minutes).
      user_invite_max_lifetime_duration = ${GF_USERS_USER_INVITE_MAX_LIFETIME_DURATION:-24h}

      # The duration in time a verification email, used to update the email address of a user, remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 1h (1 hour).
      verification_email_max_lifetime_duration = ${GF_USERS_VERIFICATION_EMAIL_MAX_LIFETIME_DURATION:-1h}

      # Frequency of updating a user's last seen time. The minimum supported duration is 5m (5 minutes). The maximum supported duration is 1h (1 hour)
      last_seen_update_interval = ${GF_USERS_LAST_SEEN_UPDATE_INTERVAL:-15m}

      # Enter a comma-separated list of usernames to hide them in the Grafana UI. These users are shown to Grafana admins and to themselves.
      hidden_users = ${GF_USERS_HIDDEN_USERS:-}

      [secretscan]
      # Enable secretscan feature
      enabled = ${GF_SECRETSCAN_ENABLED:-false}

      # Interval to check for token leaks
      interval = ${GF_SECRETSCAN_INTERVAL:-5m}

      # base URL of the grafana token leak check service
      base_url = ${GF_SECRETSCAN_BASE_URL:-https://secret-scanning.grafana.net}

      # URL to send outgoing webhooks to in case of detection
      oncall_url = ${GF_SECRETSCAN_ONCALL_URL:-}

      # Whether to revoke the token if a leak is detected or just send a notification
      revoke = ${GF_SECRETSCAN_REVOKE:-true}

      [service_accounts]
      # When set, Grafana will not allow the creation of tokens with expiry greater than this setting.
      token_expiration_day_limit = ${GF_SERVICE_ACCOUNTS_TOKEN_EXPIRATION_DAY_LIMIT:-}

      [auth]
      # Login cookie name
      login_cookie_name = grafana_session

      # Disable usage of Grafana's built-in login solution.
      disable_login = ${GF_AUTH_DISABLE_LOGIN:-false}

      # The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation (token_rotation_interval_minutes).
      login_maximum_inactive_lifetime_duration = ${GF_AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DURATION:-}

      # The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
      login_maximum_lifetime_duration = ${GF_AUTH_LOGIN_MAXIMUM_LIFETIME_DURATION:-}

      # How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
      token_rotation_interval_minutes = ${GF_AUTH_TOKEN_ROTATION_INTERVAL_MINUTES:-10}

      # Set to true to disable (hide) the login form, useful if you use OAuth
      disable_login_form = ${GF_AUTH_DISABLE_LOGIN_FORM:-false}

      # Set to true to disable the sign out link in the side menu. Useful if you use auth.proxy or auth.jwt.
      disable_signout_menu = ${GF_AUTH_DISABLE_SIGNOUT_MENU:-false}

      # URL to redirect the user to after sign out
      signout_redirect_url = ${GF_AUTH_SIGNOUT_REDIRECT_URL:-}

      # Set to true to attempt login with OAuth automatically, skipping the login screen.
      # This setting is ignored if multiple OAuth providers are configured.
      # Deprecated, use auto_login option for specific provider instead.
      oauth_auto_login = ${GF_AUTH_OAUTH_AUTO_LOGIN:-false}

      # OAuth state max age cookie duration in seconds. Defaults to 600 seconds.
      oauth_state_cookie_max_age = ${GF_AUTH_OAUTH_STATE_COOKIE_MAX_AGE:-600}

      # Sets a custom oAuth error message. This is useful if you need to point the users to a specific location for support.
      oauth_login_error_message = ${GF_AUTH_OAUTH_LOGIN_ERROR_MESSAGE:-oauth.login.error}

      # Minimum wait time in milliseconds for the server lock retry mechanism.
      # The server lock retry mechanism is used to prevent multiple Grafana instances from
      # simultaneously refreshing OAuth tokens. This mechanism waits at least this amount
      # of time before retrying to acquire the server lock. There are 5 retries in total.
      # The wait time between retries is calculated as random(n, n + 500)
      oauth_refresh_token_server_lock_min_wait_ms = ${GF_AUTH_OAUTH_REFRESH_TOKEN_SERVER_LOCK_MIN_WAIT_MS:-1000}

      # limit of api_key seconds to live before expiration
      api_key_max_seconds_to_live = ${GF_AUTH_API_KEY_MAX_SECONDS_TO_LIVE:-1}

      # Set to true to enable SigV4 authentication option for HTTP-based datasources
      sigv4_auth_enabled = ${GF_AUTH_SIGV4_AUTH_ENABLED:-false}

      # Set to true to enable verbose logging of SigV4 request signing
      sigv4_verbose_logging = ${GF_AUTH_SIGV4_VERBOSE_LOGGING:-false}

      # Set to true to enable Azure authentication option for HTTP-based datasources
      azure_auth_enabled = ${GF_AUTH_AZURE_AUTH_ENABLED:-false}

      # Use email lookup in addition to the unique ID provided by the IdP
      oauth_allow_insecure_email_lookup = ${GF_AUTH_OAUTH_ALLOW_INSECURE_EMAIL_LOOKUP:-false}

      # Set to true to include id of identity as a response header
      id_response_header_enabled = ${GF_AUTH_ID_RESPONSE_HEADER_ENABLED:-false}

      # Prefix used for the id response header, X-Grafana-Identity-Id
      id_response_header_prefix = ${GF_AUTH_ID_RESPONSE_HEADER_PREFIX:-X-Grafana}

      # List of identity namespaces to add id response headers for, separated by space.
      # Available namespaces are user, api-key and service-account.
      # The header value will encode the namespace ("user:<id>", "api-key:<id>", "service-account:<id>")
      id_response_header_namespaces = ${GF_AUTH_ID_RESPONSE_HEADER_NAMESPACES:-user api-key service-account}

      # Enables the use of managed service accounts for plugin authentication
      # This feature currently **only supports single-organization deployments**
      managed_service_accounts_enabled = ${GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED:-false}

      #################################### Passwordless Auth ###########################
      [auth.passwordless]
      enabled = ${GF_AUTH_PASSWORDLESS_ENABLED:-false}
      code_expiration = ${GF_AUTH_PASSWORDLESS_CODE_EXPIRATION:-20m}

      #################################### SSO Settings ###########################
      [sso_settings]
      # interval for reloading the SSO Settings from the database
      # useful in high availability setups running multiple Grafana instances
      # set to 0 to disable this feature
      reload_interval = ${GF_AUTH_SSO_SETTINGS_RELOAD_INTERVAL:-1m}

      # List of providers that can be configured through the SSO Settings API and UI.
      configurable_providers = ${GF_AUTH_SSO_SETTINGS_CONFIGURABLE_PROVIDERS:-github gitlab google generic_oauth azuread okta}

      #################################### Anonymous Auth ######################
      [auth.anonymous]
      # enable anonymous access
      enabled = ${GF_AUTH_ANONYMOUS_ENABLED:-false}

      # specify organization name that should be used for unauthenticated users
      org_name = Main Org.

      # specify role for unauthenticated users
      org_role = Viewer

      # mask the Grafana version number for unauthenticated users
      hide_version = ${GF_AUTH_ANONYMOUS_HIDE_VERSION:-false}

      # number of devices in total
      device_limit = ${GF_AUTH_ANONYMOUS_DEVICE_LIMIT:-}

      #################################### GitHub Auth #########################
      [auth.github]
      name = GitHub
      icon = github
      enabled = ${GF_AUTH_GITHUB_ENABLED:-false}
      allow_sign_up = true
      auto_login = false
      client_id = some_id
      client_secret =
      scopes = user:email,read:org
      auth_url = https://github.com/login/oauth/authorize
      token_url = https://github.com/login/oauth/access_token
      api_url = https://api.github.com/user
      signout_redirect_url = ${GF_AUTH_GITHUB_SIGNOUT_REDIRECT_URL:-}
      allowed_domains = ${GF_AUTH_GITHUB_ALLOWED_DOMAINS:-}
      team_ids = ${GF_AUTH_GITHUB_TEAM_IDS:-}
      allowed_organizations = ${GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS:-}
      role_attribute_path = ${GF_AUTH_GITHUB_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_GITHUB_ROLE_ATTRIBUTE_STRICT:-false}
      org_mapping = ${GF_AUTH_GITHUB_ORG_MAPPING:-}
      allow_assign_grafana_admin = ${GF_AUTH_GITHUB_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_GITHUB_SKIP_ORG_ROLE_SYNC:-false}
      tls_skip_verify_insecure = ${GF_AUTH_GITHUB_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_GITHUB_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_GITHUB_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_GITHUB_TLS_CLIENT_CA:-}
      # GitHub OAuth apps does not provide refresh tokens and the access tokens never expires.
      use_refresh_token = ${GF_AUTH_GITHUB_USE_REFRESH_TOKEN:-false}

      #################################### GitLab Auth #########################
      [auth.gitlab]
      name = GitLab
      icon = gitlab
      enabled = ${GF_AUTH_GITLAB_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_GITLAB_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_GITLAB_AUTO_LOGIN:-false}
      client_id = ${GF_AUTH_GITLAB_CLIENT_ID:-some_id}
      client_secret = ${GF_AUTH_GITLAB_CLIENT_SECRET:-}
      scopes = openid email profile
      auth_url = https://gitlab.com/oauth/authorize
      token_url = https://gitlab.com/oauth/token
      api_url = https://gitlab.com/api/v4
      signout_redirect_url = ${GF_AUTH_GITLAB_SIGNOUT_REDIRECT_URL:-}
      allowed_domains = ${GF_AUTH_GITLAB_ALLOWED_DOMAINS:-}
      allowed_groups = ${GF_AUTH_GITLAB_ALLOWED_GROUPS:-}
      role_attribute_path = ${GF_AUTH_GITLAB_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_GITLAB_ROLE_ATTRIBUTE_STRICT:-false}
      org_mapping = ${GF_AUTH_GITLAB_ORG_MAPPING:-}
      allow_assign_grafana_admin = ${GF_AUTH_GITLAB_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_GITLAB_SKIP_ORG_ROLE_SYNC:-false}
      tls_skip_verify_insecure = ${GF_AUTH_GITLAB_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_GITLAB_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_GITLAB_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_GITLAB_TLS_CLIENT_CA:-}
      use_pkce = ${GF_AUTH_GITLAB_USE_PKCE:-true}
      use_refresh_token = ${GF_AUTH_GITLAB_USE_REFRESH_TOKEN:-true}

      #################################### Google Auth #########################
      [auth.google]
      name = Google
      icon = google
      enabled = ${GF_AUTH_GOOGLE_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_GOOGLE_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_GOOGLE_AUTO_LOGIN:-false}
      client_id = ${GF_AUTH_GOOGLE_CLIENT_ID:-some_client_id}
      client_secret = ${GF_AUTH_GOOGLE_CLIENT_SECRET:-}
      scopes = ${GF_AUTH_GOOGLE_SCOPES:-openid email profile}
      auth_url = ${GF_AUTH_GOOGLE_AUTH_URL:-https://accounts.google.com/o/oauth2/v2/auth}
      token_url = ${GF_AUTH_GOOGLE_TOKEN_URL:-https://oauth2.googleapis.com/token}
      api_url = ${GF_AUTH_GOOGLE_API_URL:-https://openidconnect.googleapis.com/v1/userinfo}
      signout_redirect_url = ${GF_AUTH_GOOGLE_SIGNOUT_REDIRECT_URL:-}
      allowed_domains = ${GF_AUTH_GOOGLE_ALLOWED_DOMAINS:-}
      validate_hd = ${GF_AUTH_GOOGLE_VALIDATE_HD:-true}
      hosted_domain = ${GF_AUTH_GOOGLE_HOSTED_DOMAIN:-}
      allowed_groups = ${GF_AUTH_GOOGLE_ALLOWED_GROUPS:-}
      role_attribute_path = ${GF_AUTH_GOOGLE_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_GOOGLE_ROLE_ATTRIBUTE_STRICT:-false}
      org_mapping = ${GF_AUTH_GOOGLE_ORG_MAPPING:-}
      allow_assign_grafana_admin = ${GF_AUTH_GOOGLE_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_GOOGLE_SKIP_ORG_ROLE_SYNC:-true}
      tls_skip_verify_insecure = ${GF_AUTH_GOOGLE_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_GOOGLE_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_GOOGLE_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_GOOGLE_TLS_CLIENT_CA:-}
      use_pkce = ${GF_AUTH_GOOGLE_USE_PKCE:-true}
      use_refresh_token = ${GF_AUTH_GOOGLE_USE_REFRESH_TOKEN:-true}

      #################################### Grafana.com Auth ####################
      # legacy key names (so they work in env variables)
      [auth.grafananet]
      enabled = ${GF_AUTH_GRAFANANET_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_GRAFANANET_ALLOW_SIGN_UP:-true}
      client_id = ${GF_AUTH_GRAFANANET_CLIENT_ID:-some_id}
      client_secret = ${GF_AUTH_GRAFANANET_CLIENT_SECRET:-}
      scopes = ${GF_AUTH_GRAFANANET_SCOPES:-user:email}
      allowed_organizations = ${GF_AUTH_GRAFANANET_ALLOWED_ORGANIZATIONS:-}
      use_refresh_token = ${GF_AUTH_GRAFANANET_USE_REFRESH_TOKEN:-false}

      [auth.grafana_com]
      name = Grafana.com
      icon = grafana
      enabled = ${GF_AUTH_GRAFANA_COM_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_GRAFANA_COM_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_GRAFANA_COM_AUTO_LOGIN:-false}
      client_id = ${GF_AUTH_GRAFANA_COM_CLIENT_ID:-some_id}
      client_secret = ${GF_AUTH_GRAFANA_COM_CLIENT_SECRET:-}
      scopes = ${GF_AUTH_GRAFANA_COM_SCOPES:-user:email}
      allowed_organizations = ${GF_AUTH_GRAFANA_COM_ALLOWED_ORGANIZATIONS:-}
      skip_org_role_sync = ${GF_AUTH_GRAFANA_COM_SKIP_ORG_ROLE_SYNC:-false}
      use_refresh_token = ${GF_AUTH_GRAFANA_COM_USE_REFRESH_TOKEN:-false}

      #################################### Azure AD OAuth #######################
      [auth.azuread]
      name = Microsoft
      icon = microsoft
      enabled = ${GF_AUTH_AZUREAD_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_AZUREAD_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_AZUREAD_AUTO_LOGIN:-false}
      client_authentication = ${GF_AUTH_AZUREAD_CLIENT_AUTHENTICATION:-}
      client_id = ${GF_AUTH_AZUREAD_CLIENT_ID:-some_client_id}
      client_secret = ${GF_AUTH_AZUREAD_CLIENT_SECRET:-}
      managed_identity_client_id = ${GF_AUTH_AZUREAD_MANAGED_IDENTITY_CLIENT_ID:-}
      federated_credential_audience = ${GF_AUTH_AZUREAD_FEDERATED_CREDENTIAL_AUDIENCE:-}
      workload_identity_token_file = /var/run/secrets/azure/tokens/azure-identity-token
      scopes = ${GF_AUTH_AZUREAD_SCOPES:-openid email profile}
      auth_url = https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/authorize
      token_url = https://login.microsoftonline.com/<tenant-id>/oauth2/v2.0/token
      signout_redirect_url = ${GF_AUTH_AZUREAD_SIGNOUT_REDIRECT_URL:-}
      allowed_domains = ${GF_AUTH_AZUREAD_ALLOWED_DOMAINS:-}
      allowed_groups = ${GF_AUTH_AZUREAD_ALLOWED_GROUPS:-}
      allowed_organizations = ${GF_AUTH_AZUREAD_ALLOWED_ORGANIZATIONS:-}
      role_attribute_strict = ${GF_AUTH_AZUREAD_ROLE_ATTRIBUTE_STRICT:-false}
      org_mapping = ${GF_AUTH_AZUREAD_ORG_MAPPING:-}
      allow_assign_grafana_admin = ${GF_AUTH_AZUREAD_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      force_use_graph_api = ${GF_AUTH_AZUREAD_FORCE_USE_GRAPH_API:-false}
      tls_skip_verify_insecure = ${GF_AUTH_AZUREAD_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_AZUREAD_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_AZUREAD_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_AZUREAD_TLS_CLIENT_CA:-}
      use_pkce = ${GF_AUTH_AZUREAD_USE_PKCE:-true}
      skip_org_role_sync = ${GF_AUTH_AZUREAD_SKIP_ORG_ROLE_SYNC:-false}
      use_refresh_token = ${GF_AUTH_AZUREAD_USE_REFRESH_TOKEN:-true}

      #################################### Okta OAuth #######################
      [auth.okta]
      name = Okta
      icon = okta
      enabled = ${GF_AUTH_OKTA_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_OKTA_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_OKTA_AUTO_LOGIN:-false}
      client_id = ${GF_AUTH_OKTA_CLIENT_ID:-some_id}
      client_secret = ${GF_AUTH_OKTA_CLIENT_SECRET:-}
      scopes = openid profile email groups
      auth_url = ${GF_AUTH_OKTA_AUTH_URL:-https://<tenant-id>.okta.com/oauth2/v1/authorize}
      token_url = ${GF_AUTH_OKTA_TOKEN_URL:-https://<tenant-id>.okta.com/oauth2/v1/token}
      api_url = ${GF_AUTH_OKTA_API_URL:-https://<tenant-id>.okta.com/oauth2/v1/userinfo}
      signout_redirect_url = ${GF_AUTH_OKTA_SIGNOUT_REDIRECT_URL:-}
      allowed_domains = ${GF_AUTH_OKTA_ALLOWED_DOMAINS:-}
      allowed_groups = ${GF_AUTH_OKTA_ALLOWED_GROUPS:-}
      role_attribute_path = ${GF_AUTH_OKTA_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_OKTA_ROLE_ATTRIBUTE_STRICT:-false}
      org_attribute_path = ${GF_AUTH_OKTA_ORG_ATTRIBUTE_PATH:-}
      org_mapping = ${GF_AUTH_OKTA_ORG_MAPPING:-}
      allow_assign_grafana_admin = ${GF_AUTH_OKTA_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_OKTA_SKIP_ORG_ROLE_SYNC:-false}
      tls_skip_verify_insecure = ${GF_AUTH_OKTA_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_OKTA_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_OKTA_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_OKTA_TLS_CLIENT_CA:-}
      use_pkce = ${GF_AUTH_OKTA_USE_PKCE:-true}
      use_refresh_token = ${GF_AUTH_OKTA_USE_REFRESH_TOKEN:-false}

      #################################### Generic OAuth #######################
      [auth.generic_oauth]
      name = OAuth
      icon = signin
      enabled = ${GF_AUTH_GENERIC_OAUTH_ENABLED:-false}
      allow_sign_up = ${GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP:-true}
      auto_login = ${GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN:-false}
      client_id = ${GF_AUTH_GENERIC_OAUTH_CLIENT_ID:-some_id}
      client_secret = ${GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:-}
      scopes = ${GF_AUTH_GENERIC_OAUTH_SCOPES:-user:email}
      empty_scopes = ${GF_AUTH_GENERIC_OAUTH_EMPTY_SCOPES:-false}
      email_attribute_name = ${GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME:-email:primary}
      email_attribute_path = ${GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH:-}
      login_attribute_path = ${GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH:-}
      name_attribute_path = ${GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH:-}
      role_attribute_path = ${GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT:-false}
      org_attribute_path = ${GF_AUTH_GENERIC_OAUTH_ORG_ATTRIBUTE_PATH:-}
      org_mapping = ${GF_AUTH_GENERIC_OAUTH_ORG_MAPPING:-}
      groups_attribute_path = ${GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH:-}
      id_token_attribute_name = ${GF_AUTH_GENERIC_OAUTH_ID_TOKEN_ATTRIBUTE_NAME:-}
      team_ids_attribute_path = ${GF_AUTH_GENERIC_OAUTH_TEAM_IDS_ATTRIBUTE_PATH:-}
      auth_url = ${GF_AUTH_GENERIC_OAUTH_AUTH_URL:-}
      token_url = ${GF_AUTH_GENERIC_OAUTH_TOKEN_URL:-}
      api_url = ${GF_AUTH_GENERIC_OAUTH_API_URL:-}
      signout_redirect_url = ${GF_AUTH_GENERIC_OAUTH_SIGNOUT_REDIRECT_URL:-}
      teams_url = ${GF_AUTH_GENERIC_OAUTH_TEAMS_URL:-}
      allowed_domains = ${GF_AUTH_GENERIC_OAUTH_ALLOWED_DOMAINS:-}
      allowed_groups = ${GF_AUTH_GENERIC_OAUTH_ALLOWED_GROUPS:-}
      team_ids = ${GF_AUTH_GENERIC_OAUTH_TEAM_IDS:-}
      allowed_organizations = ${GF_AUTH_GENERIC_OAUTH_ALLOWED_ORGANIZATIONS:-}
      tls_skip_verify_insecure = ${GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE:-false}
      tls_client_cert = ${GF_AUTH_GENERIC_OAUTH_TLS_CLIENT_CERT:-}
      tls_client_key = ${GF_AUTH_GENERIC_OAUTH_TLS_CLIENT_KEY:-}
      tls_client_ca = ${GF_AUTH_GENERIC_OAUTH_TLS_CLIENT_CA:-}
      use_pkce = ${GF_AUTH_GENERIC_OAUTH_USE_PKCE:-false}
      auth_style = ${GF_AUTH_GENERIC_OAUTH_AUTH_STYLE:-}
      allow_assign_grafana_admin = ${GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_GENERIC_OAUTH_SKIP_ORG_ROLE_SYNC:-false}
      use_refresh_token = ${GF_AUTH_GENERIC_OAUTH_USE_REFRESH_TOKEN:-false}

      #################################### Basic Auth ##########################
      [auth.basic]
      enabled = ${GF_AUTH_BASIC_ENABLED:-true}
      # This setting will enable a stronger password policy for user's password under basic auth.
      # The password will need to comply with the following password policy
      # 1. Have a minimum of 12 characters
      # 2. Composed by at least 1 uppercase character
      # 3. Composed by at least 1 lowercase character
      # 4. Composed by at least 1 digit character
      # 5. Composed by at least 1 symbol character
      password_policy = ${GF_AUTH_BASIC_PASSWORD_POLICY:-false}

      #################################### Auth Proxy ##########################
      [auth.proxy]
      enabled = ${GF_AUTH_PROXY_ENABLED:-false}
      header_name = ${GF_AUTH_PROXY_HEADER_NAME:-X-WEBAUTH-USER}
      header_property = ${GF_AUTH_PROXY_HEADER_PROPERTY:-username}
      auto_sign_up = ${GF_AUTH_PROXY_AUTO_SIGN_UP:-true}
      sync_ttl = ${GF_AUTH_PROXY_SYNC_TTL:-15}
      whitelist = ${GF_AUTH_PROXY_WHITELIST:-}
      headers = ${GF_AUTH_PROXY_HEADERS:-}
      headers_encoded = ${GF_AUTH_PROXY_HEADERS_ENCODED:-false}
      enable_login_token = ${GF_AUTH_PROXY_ENABLE_LOGIN_TOKEN:-false}

      #################################### Auth JWT ##########################
      [auth.jwt]
      enabled = ${GF_AUTH_JWT_ENABLED:-false}
      enable_login_token = ${GF_AUTH_JWT_ENABLE_LOGIN_TOKEN:-false}
      header_name = ${GF_AUTH_JWT_HEADER_NAME:-}
      email_claim = ${GF_AUTH_JWT_EMAIL_CLAIM:-}
      username_claim = ${GF_AUTH_JWT_USERNAME_CLAIM:-}
      email_attribute_path = ${GF_AUTH_JWT_EMAIL_ATTRIBUTE_PATH:-}
      username_attribute_path = ${GF_AUTH_JWT_USERNAME_ATTRIBUTE_PATH:-}
      jwk_set_url = ${GF_AUTH_JWT_JWK_SET_URL:-}
      jwk_set_file = ${GF_AUTH_JWT_JWK_SET_FILE:-}
      cache_ttl = ${GF_AUTH_JWT_CACHE_TTL:-60m}
      expect_claims = ${GF_AUTH_JWT_EXPECT_CLAIMS:-{}}
      key_file = ${GF_AUTH_JWT_KEY_FILE:-}
      key_id = ${GF_AUTH_JWT_KEY_ID:-}
      role_attribute_path = ${GF_AUTH_JWT_ROLE_ATTRIBUTE_PATH:-}
      role_attribute_strict = ${GF_AUTH_JWT_ROLE_ATTRIBUTE_STRICT:-false}
      org_attribute_path = ${GF_AUTH_JWT_ORG_ATTRIBUTE_PATH:-}
      org_mapping = ${GF_AUTH_JWT_ORG_MAPPING:-}
      groups_attribute_path = ${GF_AUTH_JWT_GROUPS_ATTRIBUTE_PATH:-}
      auto_sign_up = ${GF_AUTH_JWT_AUTO_SIGN_UP:-false}
      url_login = ${GF_AUTH_JWT_URL_LOGIN:-false}
      allow_assign_grafana_admin = ${GF_AUTH_JWT_ALLOW_ASSIGN_GRAFANA_ADMIN:-false}
      skip_org_role_sync = ${GF_AUTH_JWT_SKIP_ORG_ROLE_SYNC:-false}
      tls_skip_verify_insecure = ${GF_AUTH_JWT_TLS_SKIP_VERIFY_INSECURE:-false}

      #################################### Auth LDAP ###########################
      [auth.ldap]
      enabled = ${GF_AUTH_LDAP_ENABLED:-false}
      config_file = ${GF_AUTH_LDAP_CONFIG_FILE:-/etc/grafana/ldap.toml}
      allow_sign_up = ${GF_AUTH_LDAP_ALLOW_SIGN_UP:-true}
      skip_org_role_sync = ${GF_AUTH_LDAP_SKIP_ORG_ROLE_SYNC:-false}

      # LDAP background sync (Enterprise only)
      # At 1 am every day
      sync_cron = ${GF_AUTH_LDAP_SYNC_CRON:-"0 1 * * *"}
      active_sync_enabled = ${GF_AUTH_LDAP_ACTIVE_SYNC_ENABLED:-true}

      #################################### AWS #####################################
      [aws]
      # Enter a comma-separated list of allowed AWS authentication providers.
      # Options are: default (AWS SDK Default), keys (Access && secret key), credentials (Credentials field), ec2_iam_role (EC2 IAM Role)
      allowed_auth_providers = ${GF_AUTH_AWS_ALLOWED_AUTH_PROVIDERS:-default,keys,credentials}

      # Allow AWS users to assume a role using temporary security credentials.
      # If true, assume role will be enabled for all AWS authentication providers that are specified in aws_auth_providers
      assume_role_enabled = ${GF_AUTH_AWS_ASSUME_ROLE_ENABLED:-true}

      # Specify max no of pages to be returned by the ListMetricPages API
      list_metrics_page_limit = ${GF_AUTH_AWS_LIST_METRICS_PAGE_LIMIT:-500}

      # Experimental, for use in Grafana Cloud only. Please do not set.
      external_id = ${GF_AUTH_AWS_EXTERNAL_ID:-}

      # Sets the expiry duration of an assumed role.
      # This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
      session_duration = ${GF_AUTH_AWS_SESSION_DURATION:-"15m"}

      # Set the plugins that will receive AWS settings for each request (via plugin context)
      # By default this will include all Grafana Labs owned AWS plugins, or those that make use of AWS settings (ElasticSearch, Prometheus).
      forward_settings_to_plugins = ${GF_AUTH_AWS_FORWARD_SETTINGS_TO_PLUGINS:-cloudwatch, grafana-athena-datasource, grafana-redshift-datasource, grafana-x-ray-datasource, grafana-timestream-datasource, grafana-iot-sitewise-datasource, grafana-iot-twinmaker-app, grafana-opensearch-datasource, aws-datasource-provisioner, elasticsearch, prometheus, grafana-amazonprometheus-datasource, grafana-aurora-datasource}

      #################################### Azure ###############################
      [azure]
      # Azure cloud environment where Grafana is hosted
      # Possible values are AzureCloud, AzureChinaCloud, AzureUSGovernment and AzureGermanCloud
      # Default value is AzureCloud (i.e. public cloud)
      cloud = ${GF_AUTH_AZURE_CLOUD:-AzureCloud}

      # A customized list of Azure cloud settings and properties, used by data sources which need this information when run in non-standard azure environments
      # When specified, this list will replace the default cloud list of AzureCloud, AzureChinaCloud, AzureUSGovernment and AzureGermanCloud
      clouds_config = ${GF_AUTH_AZURE_CLOUDS_CONFIG:-}

      # Specifies whether Grafana hosted in Azure service with Managed Identity configured (e.g. Azure Virtual Machines instance)
      # If enabled, the managed identity can be used for authentication of Grafana in Azure services
      # Disabled by default, needs to be explicitly enabled
      managed_identity_enabled = ${GF_AUTH_AZURE_MANAGED_IDENTITY_ENABLED:-false}

      # Client ID to use for user-assigned managed identity
      # Should be set for user-assigned identity and should be empty for system-assigned identity
      managed_identity_client_id = ${GF_AUTH_AZURE_MANAGED_IDENTITY_CLIENT_ID:-}

      # Specifies whether Azure AD Workload Identity authentication should be enabled in datasources that support it
      # For more documentation on Azure AD Workload Identity, review this documentation:
      # https://azure.github.io/azure-workload-identity/docs/
      # Disabled by default, needs to be explicitly enabled
      workload_identity_enabled = ${GF_AUTH_AZURE_WORKLOAD_IDENTITY_ENABLED:-false}

      # Tenant ID of the Azure AD Workload Identity
      # Allows to override default tenant ID of the Azure AD identity associated with the Kubernetes service account
      workload_identity_tenant_id = ${GF_AUTH_AZURE_WORKLOAD_IDENTITY_TENANT_ID:-}

      # Client ID of the Azure AD Workload Identity
      # Allows to override default client ID of the Azure AD identity associated with the Kubernetes service account
      workload_identity_client_id = ${GF_AUTH_AZURE_WORKLOAD_IDENTITY_CLIENT_ID:-}

      # Custom path to token file for the Azure AD Workload Identity
      # Allows to set a custom path to the projected service account token file
      workload_identity_token_file = ${GF_AUTH_AZURE_WORKLOAD_IDENTITY_TOKEN_FILE:-}

      # Specifies whether user identity authentication (on behalf of currently signed-in user) should be enabled in datasources
      # that support it (requires AAD authentication)
      # Disabled by default, needs to be explicitly enabled
      user_identity_enabled = ${GF_AUTH_AZURE_USER_IDENTITY_ENABLED:-false}

      # Specifies whether user identity authentication fallback credentials should be enabled in data sources
      # Enabling this allows data source creators to provide fallback credentials for backend initiated requests
      # e.g. alerting, recorded queries etc.
      # Enabled by default, needs to be explicitly disabled
      # Will not have any effect if user identity is disabled above
      user_identity_fallback_credentials_enabled = ${GF_AUTH_AZURE_USER_IDENTITY_FALLBACK_CREDENTIALS_ENABLED:-true}

      # Override token URL for Azure Active Directory
      # By default is the same as token URL configured for AAD authentication settings
      user_identity_token_url = ${GF_AUTH_AZURE_USER_IDENTITY_TOKEN_URL:-}

      # Override client authentication method for Azure Active Directory
      # By default is the same as client authentication method configured for AAD authentication settings
      user_identity_client_authentication = ${GF_AUTH_AZURE_USER_IDENTITY_CLIENT_AUTHENTICATION:-}

      # Override ADD application ID which would be used to exchange users token to an access token for the datasource
      # By default is the same as used in AAD authentication or can be set to another application (for OBO flow)
      user_identity_client_id = ${GF_AUTH_AZURE_USER_IDENTITY_CLIENT_ID:-}

      # Override the AAD application client secret
      # By default is the same as used in AAD authentication or can be set to another application (for OBO flow)
      user_identity_client_secret = ${GF_AUTH_AZURE_USER_IDENTITY_CLIENT_SECRET:-}

      # Override the AAD managed identity client ID
      # By default is the same as used in AAD authentication or can be set to another managed identity (for OBO flow)
      user_identity_managed_identity_client_id = ${GF_AUTH_AZURE_USER_IDENTITY_MANAGED_IDENTITY_CLIENT_ID:-}

      # Override the AAD federated credential audience
      # By default is the same as used in AAD authentication or can be set to another audience (for OBO flow)
      user_identity_federated_credential_audience = ${GF_AUTH_AZURE_USER_IDENTITY_FEDERATED_CREDENTIAL_AUDIENCE:-}

      # Allows the usage of a custom token request assertion when Grafana is behind an authentication proxy
      # In most cases this will not need to be used. To enable this set the value to "username"
      # The default is empty and any other value will not enable this functionality
      username_assertion = ${GF_AUTH_AZURE_USERNAME_ASSERTION:-}

      # Set the plugins that will receive Azure settings for each request (via plugin context)
      # By default this will include all Grafana Labs owned Azure plugins, or those that make use of Azure settings (Azure Monitor, Azure Data Explorer, Prometheus, MSSQL, Azure Prometheus).
      forward_settings_to_plugins = ${GF_AUTH_AZURE_FORWARD_SETTINGS_TO_PLUGINS:-grafana-azure-monitor-datasource, prometheus, grafana-azure-data-explorer-datasource, mssql, grafana-azureprometheus-datasource}

      # Specifies whether Entra password auth can be used for the MSSQL data source
      # Disabled by default, needs to be explicitly enabled
      azure_entra_password_credentials_enabled = ${GF_AUTH_AZURE_ENTRA_PASSWORD_CREDENTIALS_ENABLED:-false}

      #################################### Role-based Access Control ###########
      [rbac]
      # If enabled, cache permissions in a in memory cache
      permission_cache = true

      # Reset basic roles permissions on boot
      # Warning left to true, basic roles permissions will be reset on every boot
      reset_basic_roles = ${GF_AUTH_RBAC_RESET_BASIC_ROLES:-false}

      # Validate permissions' action and scope on role creation and update
      permission_validation_enabled = true

      #################################### SMTP / Emailing #####################
      [smtp]
      enabled = ${GF_AUTH_SMTP_ENABLED:-false}
      host = ${GF_AUTH_SMTP_HOST:-localhost:25}
      user = ${GF_AUTH_SMTP_USER:-}
      # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
      password = ${GF_AUTH_SMTP_PASSWORD:-}
      cert_file = ${GF_AUTH_SMTP_CERT_FILE:-}
      key_file = ${GF_AUTH_SMTP_KEY_FILE:-}
      skip_verify = ${GF_AUTH_SMTP_SKIP_VERIFY:-false}
      from_address = ${GF_AUTH_SMTP_FROM_ADDRESS:-admin@grafana.localhost}
      from_name = ${GF_AUTH_SMTP_FROM_NAME:-Grafana}
      ehlo_identity = ${GF_AUTH_SMTP_EHLO_IDENTITY:-}
      startTLS_policy = ${GF_AUTH_SMTP_STARTTLS_POLICY:-}
      enable_tracing = ${GF_AUTH_SMTP_ENABLE_TRACING:-false}

      [smtp.static_headers]
      # Include custom static headers in all outgoing emails

      [emails]
      welcome_email_on_sign_up = ${GF_AUTH_EMAILS_WELCOME_EMAIL_ON_SIGN_UP:-false}
      templates_pattern = ${GF_AUTH_EMAILS_TEMPLATES_PATTERN:-emails/*.html, emails/*.txt}
      content_types = ${GF_AUTH_EMAILS_CONTENT_TYPES:-text/html}

      #################################### Logging ##########################
      [log]
      # Either "console", "file", "syslog". Default is console and file
      # Use space to separate multiple modes, e.g. "console file"
      mode = ${GF_AUTH_LOG_MODE:-console file}

      # Either "debug", "info", "warn", "error". Default is "info"
      level = ${GF_AUTH_LOG_LEVEL:-info}

      # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
      filters = ${GF_AUTH_LOG_FILTERS:-}

      # Set the default error message shown to users. This message is displayed instead of sensitive backend errors which should be obfuscated.
      user_facing_default_error = ${GF_AUTH_LOG_USER_FACING_DEFAULT_ERROR:-"please inspect Grafana server log for details"}

      # For "console" mode only
      [log.console]
      level = ${GF_AUTH_LOG_CONSOLE_LEVEL:-info}

      # log line format, valid options are text, console and json
      format = ${GF_AUTH_LOG_CONSOLE_FORMAT:-console}

      # For "file" mode only
      [log.file]
      level = ${GF_AUTH_LOG_FILE_LEVEL:-info}

      # log line format, valid options are text, console and json
      format = ${GF_AUTH_LOG_FILE_FORMAT:-text}

      # This enables automated log rotate(switch of following options), default is true
      log_rotate = ${GF_AUTH_LOG_LOG_ROTATE:-true}

      # Max line number of single file, default is 1000000
      max_lines = ${GF_AUTH_LOG_MAX_LINES:-1000000}

      # Max size shift of single file, default is 28 means 1 << 28, 256MB
      max_size_shift = ${GF_AUTH_LOG_MAX_SIZE_SHIFT:-28}

      # Segment log daily, default is true
      daily_rotate = ${GF_AUTH_LOG_DAILY_ROTATE:-true}

      # Expired days of log file(delete after max days), default is 7
      max_days = ${GF_AUTH_LOG_MAX_DAYS:-7}

      [log.syslog]
      level = ${GF_AUTH_LOG_SYSLOG_LEVEL:-info}

      # log line format, valid options are text, console and json
      format = ${GF_AUTH_LOG_SYSLOG_FORMAT:-text}

      # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
      network = ${GF_AUTH_LOG_SYSLOG_NETWORK:-}
      address = ${GF_AUTH_LOG_SYSLOG_ADDRESS:-}

      # Syslog facility. user, daemon and local0 through local7 are valid.
      facility = ${GF_AUTH_LOG_SYSLOG_FACILITY:-}

      # Syslog tag. By default, the process' argv[0] is used.
      tag = ${GF_AUTH_LOG_SYSLOG_TAG:-}

      [log.frontend]
      # Should Faro javascript agent be initialized
      enabled = ${GF_AUTH_LOG_FRONTEND_ENABLED:-false}

      # Custom HTTP endpoint to send events to. Default will log the events to stdout.
      custom_endpoint = ${GF_AUTH_LOG_FRONTEND_CUSTOM_ENDPOINT:-}

      # Requests per second limit enforced per an extended period, for Grafana backend log ingestion endpoint (/log).
      log_endpoint_requests_per_second_limit = ${GF_AUTH_LOG_FRONTEND_LOG_ENDPOINT_REQUESTS_PER_SECOND_LIMIT:-3}

      # Max requests accepted per short interval of time for Grafana backend log ingestion endpoint (/log)
      log_endpoint_burst_limit = ${GF_AUTH_LOG_FRONTEND_LOG_ENDPOINT_BURST_LIMIT:-15}

      # Enables all Faro default instrumentation by using `getWebInstrumentations`. Overrides other instrumentation flags.
      instrumentations_all_enabled = ${GF_AUTH_LOG_FRONTEND_INSTRUMENTATIONS_ALL_ENABLED:-false}

      # Should error instrumentation be enabled, only affects Grafana Javascript Agent
      instrumentations_errors_enabled = ${GF_AUTH_LOG_FRONTEND_INSTRUMENTATIONS_ERRORS_ENABLED:-true}

      # Should console instrumentation be enabled, only affects Grafana Javascript Agent
      instrumentations_console_enabled = ${GF_AUTH_LOG_FRONTEND_INSTRUMENTATIONS_CONSOLE_ENABLED:-false}

      # Should webvitals instrumentation be enabled, only affects Grafana Javascript Agent
      instrumentations_webvitals_enabled = ${GF_AUTH_LOG_FRONTEND_INSTRUMENTATIONS_WEBVITALS_ENABLED:-false}

      # Should tracing instrumentation be enabled, only affects Grafana Javascript Agent
      instrumentations_tracing_enabled = ${GF_AUTH_LOG_FRONTEND_INSTRUMENTATIONS_TRACING_ENABLED:-false}

      # level of internal logging for debugging Grafana Javascript Agent.
      # possible values are: 0 = OFF, 1 = ERROR, 2 = WARN, 3 = INFO, 4 = VERBOSE
      # more details: https://github.com/grafana/faro-web-sdk/blob/v1.3.7/docs/sources/tutorials/quick-start-browser.md#how-to-activate-debugging
      internal_logger_level = ${GF_AUTH_LOG_FRONTEND_INTERNAL_LOGGER_LEVEL:-0}

      # Api Key, only applies to Grafana Javascript Agent provider
      api_key = ${GF_AUTH_LOG_FRONTEND_API_KEY:-}

      #################################### Usage Quotas ########################
      [quota]
      enabled = ${GF_AUTH_QUOTA_ENABLED:-false}

      #### set quotas to -1 to make unlimited. ####
      # limit number of users per Org.
      org_user = ${GF_AUTH_QUOTA_ORG_USER:-10}

      # limit number of dashboards per Org.
      org_dashboard = ${GF_AUTH_QUOTA_ORG_DASHBOARD:-100}

      # limit number of data_sources per Org.
      org_data_source = ${GF_AUTH_QUOTA_ORG_DATA_SOURCE:-10}

      # limit number of api_keys per Org.
      org_api_key = ${GF_AUTH_QUOTA_ORG_API_KEY:-10}

      # limit number of alerts per Org.
      org_alert_rule = ${GF_AUTH_QUOTA_ORG_ALERT_RULE:-100}

      # limit number of orgs a user can create.
      user_org = ${GF_AUTH_QUOTA_USER_ORG:-10}

      # Global limit of users.
      global_user = ${GF_AUTH_QUOTA_GLOBAL_USER:-1}

      # global limit of orgs.
      global_org = ${GF_AUTH_QUOTA_GLOBAL_ORG:-1}

      # global limit of dashboards
      global_dashboard = -1

      # global limit of api_keys
      global_api_key = ${GF_AUTH_QUOTA_GLOBAL_API_KEY:-1}

      # global limit on number of logged in users.
      global_session = ${GF_AUTH_QUOTA_GLOBAL_SESSION:-1}

      # global limit of alerts
      global_alert_rule = ${GF_AUTH_QUOTA_GLOBAL_ALERT_RULE:-1}

      # global limit of files uploaded to the SQL DB
      global_file = ${GF_AUTH_QUOTA_GLOBAL_FILE:-1000}

      # global limit of correlations
      global_correlations = ${GF_AUTH_QUOTA_GLOBAL_CORRELATIONS:-1}

      # Limit of the number of alert rules per rule group.
      # This is not strictly enforced yet, but will be enforced over time.
      alerting_rule_group_rules = ${GF_AUTH_QUOTA_ALERTING_RULE_GROUP_RULES:-100}

      # Limit the number of query evaluation results per alert rule.
      # If the condition query of an alert rule produces more results than this limit,
      # the evaluation results in an error.
      alerting_rule_evaluation_results = ${GF_AUTH_QUOTA_ALERTING_RULE_EVALUATION_RESULTS:-1}

      #################################### Unified Alerting ####################
      [unified_alerting]
      # Enable the Alerting sub-system and interface.
      enabled = ${GF_AUTH_UNIFIED_ALERTING_ENABLED:-false}

      # Comma-separated list of organization IDs for which to disable unified alerting. Only supported if unified alerting is enabled.
      disabled_orgs = ${GF_AUTH_UNIFIED_ALERTING_DISABLED_ORGS:-}

      # Specify how long to wait for the alerting service to initialize
      initialization_timeout = ${GF_AUTH_UNIFIED_ALERTING_INITIALIZATION_TIMEOUT:-30s}

      # Specify the frequency of polling for admin config changes.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      admin_config_poll_interval = ${GF_AUTH_UNIFIED_ALERTING_ADMIN_CONFIG_POLL_INTERVAL:-60s}

      # Specify the frequency of polling for Alertmanager config changes.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      alertmanager_config_poll_interval = ${GF_AUTH_UNIFIED_ALERTING_ALERTMANAGER_CONFIG_POLL_INTERVAL:-60s}

      # Maximum number of active and pending silences that a tenant can have at once. Default: 0 (no limit).
      alertmanager_max_silences_count = ${GF_AUTH_UNIFIED_ALERTING_ALERTMANAGER_MAX_SILENCE_COUNT:-0}

      # Maximum silence size in bytes. Default: 0 (no limit).
      alertmanager_max_silence_size_bytes = ${GF_AUTH_UNIFIED_ALERTING_ALERTMANAGER_MAX_SILENCE_SIZE_BYTES:-0}

      # Redis server address or addresses. It can be a single Redis address if using Redis standalone,
      # or a list of comma-separated addresses if using Redis Cluster/Sentinel.
      ha_redis_address = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_ADDRESS:-}

      # Set to true when using Redis in Cluster mode. Mutually exclusive with ha_redis_sentinel_mode_enabled.
      ha_redis_cluster_mode_enabled = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_CLUSTER_MODE_ENABLED:-false}

      # Set to true when using Redis in Sentinel mode. Mutually exclusive with ha_redis_cluster_mode_enabled.
      ha_redis_sentinel_mode_enabled = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_SENTINEL_MODE_ENABLED:-false}

      # Redis Sentinel master name. Only applicable when ha_redis_sentinel_mode_enabled is set to true.
      ha_redis_sentinel_master_name = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_SENTINEL_MASTER_NAME:-}

      # The username that should be used to authenticate with Redis.
      ha_redis_username = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_USERNAME:-}

      # The password that should be used to authenticate with Redis.
      ha_redis_password = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_PASSWORD:-}

      # The username that should be used to authenticate with Redis Sentinel.
      # Only applicable when ha_redis_sentinel_mode_enabled is set to true.
      ha_redis_sentinel_username = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_SENTINEL_USERNAME:-}

      # The password that should be used to authenticate with Redis Sentinel.
      # Only applicable when ha_redis_sentinel_mode_enabled is set to true.
      ha_redis_sentinel_password = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_SENTINEL_PASSWORD:-}

      # The Redis database. The default value is 0.
      ha_redis_db = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_DB:-0}

      # A prefix that is used for every key or channel that is created on the Redis server as part of HA for alerting.
      # Useful if you plan to share Redis with multiple Grafana instances.
      ha_redis_prefix = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_PREFIX:-}

      # The name of the cluster peer to use as an identifier. If none is provided, a random one is generated.
      ha_redis_peer_name = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_PEER_NAME:-}

      # The maximum number of simultaneous Redis connections.
      ha_redis_max_conns = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_MAX_CONNS:-5}

      # Enable TLS on the client used to communicate with the Redis server. This should be set to true
      # if using any of the other ha_redis_tls_* fields.
      ha_redis_tls_enabled = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_ENABLED:-false}

      # Path to the PEM-encoded TLS client certificate file used to authenticate with the Redis server.
      # Required if using Mutual TLS.
      ha_redis_tls_cert_path = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_CERT_PATH:-}

      # Path to the PEM-encoded TLS private key file. Also requires the client certificate to be configured.
      # Required if using Mutual TLS.
      ha_redis_tls_key_path = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_KEY_PATH:-}

      # Path to the PEM-encoded CA certificates file. If not set, the host's root CA certificates are used.
      ha_redis_tls_ca_path = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_CA_PATH:-}

      # Overrides the expected name of the Redis server certificate.
      ha_redis_tls_server_name = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_SERVER_NAME:-}

      # Skips validating the Redis server certificate.
      ha_redis_tls_insecure_skip_verify = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_INSECURE_SKIP_VERIFY:-false}

      # Overrides the default TLS cipher suite list.
      ha_redis_tls_cipher_suites = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_CIPHER_SUITES:-}

      # Overrides the default minimum TLS version.
      # Allowed values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13
      ha_redis_tls_min_version = ${GF_AUTH_UNIFIED_ALERTING_HA_REDIS_TLS_MIN_VERSION:-}

      # Listen address/hostname and port to receive unified alerting messages for other Grafana instances. The port is used for both TCP and UDP. It is assumed other Grafana instances are also running on the same port.
      ha_listen_address = ${GF_AUTH_UNIFIED_ALERTING_HA_LISTEN_ADDRESS:-"0.0.0.0:9094"}

      # Explicit address/hostname and port to advertise other Grafana instances. The port is used for both TCP and UDP.
      ha_advertise_address = ${GF_AUTH_UNIFIED_ALERTING_HA_ADVERTISE_ADDRESS:-}

      # Comma-separated list of initial instances (in a format of host:port) that will form the HA cluster. Configuring this setting will enable High Availability mode for alerting.
      ha_peers = ${GF_AUTH_UNIFIED_ALERTING_HA_PEERS:-""}

      # Time to wait for an instance to send a notification via the Alertmanager. In HA, each Grafana instance will
      # be assigned a position (e.g. 0, 1). We then multiply this position with the timeout to indicate how long should
      # each instance wait before sending the notification to take into account replication lag.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      ha_peer_timeout = ${GF_AUTH_UNIFIED_ALERTING_HA_PEER_TIMEOUT:-15s}

      # The label is an optional string to include on each packet and stream.
      # It uniquely identifies the cluster and prevents cross-communication
      # issues when sending gossip messages in an enviromenet with multiple clusters.
      ha_label = ${GF_AUTH_UNIFIED_ALERTING_HA_LABEL:-}

      # The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated
      # across cluster more quickly at the expense of increased bandwidth usage.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      ha_gossip_interval = ${GF_AUTH_UNIFIED_ALERTING_HA_GOSSIP_INTERVAL:-200ms}

      # Length of time to attempt to reconnect to a lost peer. Recommended to be short (<15m) when Grafana is running in a Kubernetes cluster.
      # The string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      ha_reconnect_timeout = ${GF_AUTH_UNIFIED_ALERTING_HA_RECONNECT_TIMEOUT:-6h}

      # The interval between gossip full state syncs. Setting this interval lower (more frequent) will increase convergence speeds
      # across larger clusters at the expense of increased bandwidth usage.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      ha_push_pull_interval = ${GF_AUTH_UNIFIED_ALERTING_HA_PUSH_PULL_INTERVAL:-60s}

      # Enable or disable alerting rule execution. The alerting UI remains visible.
      execute_alerts = ${GF_AUTH_UNIFIED_ALERTING_EXECUTE_ALERTS:-true}

      # Alert evaluation timeout when fetching data from the datasource.
      # The timeout string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      evaluation_timeout = ${GF_AUTH_UNIFIED_ALERTING_EVALUATION_TIMEOUT:-30s}

      # Number of times we'll attempt to evaluate an alert rule before giving up on that evaluation. The default value is 3.
      max_attempts = ${GF_AUTH_UNIFIED_ALERTING_MAX_ATTEMPTS:-3}

      # Minimum interval to enforce between rule evaluations. Rules will be adjusted if they are less than this value or if they are not multiple of the scheduler interval (10s). Higher values can help with resource management as we'll schedule fewer evaluations over time.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      min_interval = ${GF_AUTH_UNIFIED_ALERTING_MIN_INTERVAL:-10s}

      # This is an experimental option to add parallelization to saving alert states in the database.
      # It configures the maximum number of concurrent queries per rule evaluated. The default value is 1
      # (concurrent queries per rule disabled).
      max_state_save_concurrency = ${GF_AUTH_UNIFIED_ALERTING_MAX_STATE_SAVE_CONCURRENCY:-1}

      # If the feature flag 'alertingSaveStatePeriodic' is enabled, this is the interval that is used to persist the alerting instances to the database.
      # The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
      state_periodic_save_interval = ${GF_AUTH_UNIFIED_ALERTING_STATE_PERIODIC_SAVE_INTERVAL:-5m}

      # If the feature flag 'alertingSaveStatePeriodic' is enabled, this is the size of the batch that is saved to the database at once.
      state_periodic_save_batch_size = ${GF_AUTH_UNIFIED_ALERTING_STATE_PERIODIC_SAVE_BATCH_SIZE:-1}

      # Disables the smoothing of alert evaluations across their evaluation window.
      # Rules will evaluate in sync.
      disable_jitter = ${GF_AUTH_UNIFIED_ALERTING_DISABLE_JITTER:-false}

      # Retention period for Alertmanager notification log entries.
      notification_log_retention = ${GF_AUTH_UNIFIED_ALERTING_NOTIFICATION_LOG_RETENTION:-5d}

      # Duration for which a resolved alert state transition will continue to be sent to the Alertmanager.
      resolved_alert_retention = ${GF_AUTH_UNIFIED_ALERTING_RESOLVED_ALERT_RETENTION:-15m}

      # Defines the limit of how many alert rule versions
      # should be stored in the database for each alert rule in an organization including the current one.
      # 0 value means no limit
      rule_version_record_limit = ${GF_AUTH_UNIFIED_ALERTING_RULE_VERSION_RECORD_LIMIT:-0}

      # The retention period for deleted alerting rules.
      # Determines how long deleted rules are retained before being permanently removed.
      # The retention duration must be specified using a time format with unit suffixes
      # such as ms, s, m, h, d (e.g., 30d for 30 days).
      # Default: 30d
      # 0 value means that rules are deleted permanently immediately.
      deleted_rule_retention = ${GF_AUTH_UNIFIED_ALERTING_DELETED_RULE_RETENTION:-30d}

      [unified_alerting.screenshots]
      # Enable screenshots in notifications. You must have either installed the Grafana image rendering
      # plugin, or set up Grafana to use a remote rendering service.
      # For more information on configuration options, refer to [rendering].
      capture = ${GF_AUTH_UNIFIED_ALERTING_CAPTURE:-false}

      # The timeout for capturing screenshots. If a screenshot cannot be captured within the timeout then
      # the notification is sent without a screenshot. The maximum duration is 30 seconds. This timeout
      # should be less than the minimum Interval of all Evaluation Groups to avoid back pressure on alert
      # rule evaluation.
      capture_timeout = ${GF_AUTH_UNIFIED_ALERTING_CAPTURE_TIMEOUT:-10s}

      # The maximum number of screenshots that can be taken at the same time. This option is different from
      # concurrent_render_request_limit as max_concurrent_screenshots sets the number of concurrent screenshots
      # that can be taken at the same time for all firing alerts where as concurrent_render_request_limit sets
      # the total number of concurrent screenshots across all Grafana services.
      max_concurrent_screenshots = ${GF_AUTH_UNIFIED_ALERTING_MAX_CONCURRENT_SCREENSHOTS:-5}

      # Uploads screenshots to the local Grafana server or remote storage such as Azure, S3 and GCS. Please
      # see [external_image_storage] for further configuration options. If this option is false then
      # screenshots will be persisted to disk for up to temp_data_lifetime.
      upload_external_image_storage = ${GF_AUTH_UNIFIED_ALERTING_UPLOAD_EXTERNAL_IMAGE_STORAGE:-false}

      [unified_alerting.reserved_labels]
      # Comma-separated list of reserved labels added by the Grafana Alerting engine that should be disabled.
      # For example: `disabled_labels=grafana_folder`
      disabled_labels = ${GF_AUTH_UNIFIED_ALERTING_RESERVED_LABELS_DISABLED_LABELS:-}

      [unified_alerting.state_history]
      # Enable the state history functionality in Unified Alerting. The previous states of alert rules will be visible in panels and in the UI.
      enabled = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_ENABLED:-true}

      # Select which pluggable state history backend to use. Either "annotations", "loki", "prometheus", or "multiple"
      # "loki" writes state history to an external Loki instance.
      # "prometheus" writes state history as GRAFANA_ALERTS metrics to a Prometheus-compatible data source.
      # "multiple" allows history to be written to multiple backends at once.
      # Defaults to "annotations".
      backend = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_BACKEND:-}

      # For "multiple" only.
      # Indicates the main backend used to serve state history queries.
      # Either "annotations" or "loki"
      primary = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_PRIMARY:-}

      # For "multiple" only.
      # Comma-separated list of additional backends to write state history data to.
      secondaries = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_SECONDARIES:-}

      # For "loki" only.
      # URL of the external Loki instance.
      # Either "loki_remote_url", or both of "loki_remote_read_url" and "loki_remote_write_url" is required for the "loki" backend.
      loki_remote_url = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_REMOTE_URL:-}

      # For "loki" only.
      # URL of the external Loki's read path. To be used in configurations where Loki has separated read and write URLs.
      # Either "loki_remote_url", or both of "loki_remote_read_url" and "loki_remote_write_url" is required for the "loki" backend.
      loki_remote_read_url = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_REMOTE_READ_URL:-}

      # For "loki" only.
      # URL of the external Loki's write path. To be used in configurations where Loki has separated read and write URLs.
      # Either "loki_remote_url", or both of "loki_remote_read_url" and "loki_remote_write_url" is required for the "loki" backend.
      loki_remote_write_url = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_REMOTE_WRITE_URL:-}

      # For "loki" only.
      # Optional tenant ID to attach to requests sent to Loki.
      loki_tenant_id = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_TENANT_ID:-}

      # For "loki" only.
      # Optional username for basic authentication on requests sent to Loki. Can be left blank to disable basic auth.
      loki_basic_auth_username = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_BASIC_AUTH_USERNAME:-}

      # For "loki" only.
      # Optional password for basic authentication on requests sent to Loki. Can be left blank.
      loki_basic_auth_password = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_BASIC_AUTH_PASSWORD:-}

      # For "loki" only.
      # Optional max query length for queries sent to Loki. Default is 721h which matches the default Loki value.
      loki_max_query_length = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_MAX_QUERY_LENGTH:-721h}

      # For "loki" only.
      # Maximum size in bytes for queries sent to Loki. This limit is applied to user provided filters as well as system defined ones, e.g. applied by access control.
      # If filter exceeds the limit, API returns error with code "alerting.state-history.loki.requestTooLong".
      # Default is 64kb
      loki_max_query_size = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_LOKI_MAX_QUERY_SIZE:-65536}

      # For "prometheus" only.
      # Target datasource UID for writing GRAFANA_ALERTS metrics.
      prometheus_target_datasource_uid = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_PROMETHEUS_TARGET_DATASOURCE_UID:-}

      # For "prometheus" only.
      # Metric name for the GRAFANA_ALERTS metric. Default is "GRAFANA_ALERTS".
      prometheus_metric_name = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_PROMETHEUS_METRIC_NAME:-GRAFANA_ALERTS}

      # For "prometheus" only.
      # Timeout for writing GRAFANA_ALERTS metrics to the target datasource. Default is 10s.
      prometheus_write_timeout = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_PROMETHEUS_WRITE_TIMEOUT:-10s}

      [unified_alerting.state_history.external_labels]
      # Optional extra labels to attach to outbound state history records or log streams.
      # Any number of label key-value-pairs can be provided.
      #
      # ex.
      # mylabelkey = mylabelvalue

      [unified_alerting.state_history.annotations]
      # Controls retention of annotations automatically created while evaluating alert rules.
      # Alert state history backend must be configured to be annotations (see setting [unified_alerting.state_history].backend).

      # Configures how long alert annotations are stored for. Default is 0, which keeps them forever.
      # This setting should be expressed as a duration. Ex 6h (hours), 10d (days), 2w (weeks), 1M (month).
      max_age = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_ANNOTATIONS_MAX_AGE:-}

      # Configures max number of alert annotations that Grafana stores. Default value is 0, which keeps all alert annotations.
      max_annotations_to_keep = ${GF_AUTH_UNIFIED_ALERTING_STATE_HISTORY_ANNOTATIONS_MAX_ANNOTATIONS_TO_KEEP:-}

      [unified_alerting.prometheus_conversion]
      # Configuration options for converting Prometheus alerting and recording rules to Grafana rules.
      # These settings affect rules created via the Prometheus conversion API.

      # Offset the rule evaluation time for imported rules by a specified duration in the past.
      # This offset is applied and saved to the rule query during the conversion process from Prometheus to Grafana format.
      # The setting only affects rules imported after the configuration change is made and does not modify existing rules.
      # Accepts duration formats like: 30s, 1m, 1h.
      rule_query_offset = ${GF_AUTH_UNIFIED_ALERTING_PROMETHEUS_CONVERSION_RULE_QUERY_OFFSET:-1m}

      [recording_rules]
      # Enable recording rules.
      enabled = ${GF_AUTH_UNIFIED_ALERTING_RECORDING_RULES_ENABLED:-true}

      # Request timeout for recording rule writes.
      timeout = ${GF_AUTH_UNIFIED_ALERTING_RECORDING_RULES_TIMEOUT:-10s}

      # Default data source UID to write to if not specified in the rule definition.
      default_datasource_uid = ${GF_AUTH_UNIFIED_ALERTING_RECORDING_RULES_DEFAULT_DATASOURCE_UID:-}

      # Optional custom headers to include in recording rule write requests.
      [recording_rules.custom_headers]
      # exampleHeader = exampleValue

      [remote.alertmanager]
      # URL of the remote Alertmanager that will replace the internal one.
      # This URL should be the root path, Grafana will automatically append an "/alertmanager" suffix for certain HTTP calls.
      # Required if `enabled` is set to `true`.
      url = ${GF_AUTH_UNIFIED_ALERTING_REMOTE_ALERTMANAGER_URL:-}

      # Tenant ID to use in requests to the Alertmanager.
      # It will also be used for the basic auth username if a password is configured.
      tenant = ${GF_AUTH_UNIFIED_ALERTING_REMOTE_ALERTMANAGER_TENANT:-}

      # Optional password for basic authentication.
      # If not present, the tenant ID will be set in the X-Scope-OrgID header.
      password = ${GF_AUTH_UNIFIED_ALERTING_REMOTE_ALERTMANAGER_PASSWORD:-}

      sync_interval = ${GF_AUTH_UNIFIED_ALERTING_REMOTE_ALERTMANAGER_SYNC_INTERVAL:-5m}

      # Timeout for the HTTP client. Default is 30 seconds.
      timeout = ${GF_AUTH_UNIFIED_ALERTING_REMOTE_ALERTMANAGER_TIMEOUT:-30s}

      #################################### Annotations #########################
      [annotations]
      # Configures the batch size for the annotation clean-up job. This setting is used for dashboard, API, and alert annotations.
      cleanupjob_batchsize = ${GF_ANNOTATIONS_CLEANUPJOB_BATCHSIZE:-100}

      # Enforces the maximum allowed length of the tags for any newly introduced annotations. It can be between 500 and 4096 inclusive (which is the respective's column length). Default value is 500.
      # Setting it to a higher value would impact performance therefore is not recommended.
      tags_length = ${GF_ANNOTATIONS_TAGS_LENGTH:-500}

      [annotations.dashboard]
      # Dashboard annotations means that annotations are associated with the dashboard they are created on.

      # Configures how long dashboard annotations are stored. Default is 0, which keeps them forever.
      # This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
      max_age = ${GF_ANNOTATIONS_DASHBOARD_MAX_AGE:-}

      # Configures max number of dashboard annotations that Grafana stores. Default value is 0, which keeps all dashboard annotations.
      max_annotations_to_keep = ${GF_ANNOTATIONS_DASHBOARD_MAX_ANNOTATIONS_TO_KEEP:-}

      [annotations.api]
      # API annotations means that the annotations have been created using the API without any
      # association with a dashboard.

      # Configures how long Grafana stores API annotations. Default is 0, which keeps them forever.
      # This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
      max_age = ${GF_ANNOTATIONS_API_MAX_AGE:-}

      # Configures max number of API annotations that Grafana keeps. Default value is 0, which keeps all API annotations.
      max_annotations_to_keep = ${GF_ANNOTATIONS_API_MAX_ANNOTATIONS_TO_KEEP:-}

      #################################### Explore #############################
      [explore]
      # Enable the Explore section
      enabled = ${GF_EXPLORE_ENABLED:-true}

      # set the default offset for the time picker
      defaultTimeOffset = ${GF_EXPLORE_DEFAULT_TIME_OFFSET:-1h}

      # hides the download logs button in Explore
      hide_logs_download = ${GF_EXPLORE_HIDE_LOGS_DOWNLOAD:-false}

      #################################### Help #############################
      [help]
      # Enable the Help section
      enabled = ${GF_HELP_ENABLED:-true}

      #################################### Profile #############################
      [profile]
      # Enable the Profile section
      enabled = ${GF_PROFILE_ENABLED:-true}

      #################################### News #############################
      [news]
      # Enable the news feed section
      news_feed_enabled = ${GF_NEWS_FEED_ENABLED:-true}

      #################################### Query #############################
      [query]
      # Set the number of data source queries that can be executed concurrently in mixed queries. Default is the number of CPUs.
      concurrent_query_limit = ${GF_QUERY_CONCURRENT_QUERY_LIMIT:-}

      #################################### Query History #############################
      [query_history]
      # Enable the Query history
      enabled = ${GF_QUERY_HISTORY_ENABLED:-true}

      #################################### Short Links #############################
      [short_links]
      # Short links that are never accessed will be deleted as cleanup. Time is set up in days. The default is 7 days. Maximum value is 365.
      # 0 means they will be deleted approximately every 10 minutes. A negative value (such as -1) will disable expiration.
      expire_time = ${GF_SHORT_LINKS_EXPIRE_TIME:-7}

      #################################### Internal Grafana Metrics ############
      # Metrics available at HTTP URL /metrics and /metrics/plugins/:pluginId
      [metrics]
      enabled = ${GF_METRICS_ENABLED:-true}
      interval_seconds = ${GF_METRICS_INTERVAL_SECONDS:-10}
      # Disable total stats (stat_totals_*) metrics to be generated
      disable_total_stats = ${GF_METRICS_DISABLE_TOTAL_STATS:-false}
      # The interval at which the total stats collector will update the stats. Default is 1800 seconds.
      total_stats_collector_interval_seconds = ${GF_METRICS_TOTAL_STATS_COLLECTOR_INTERVAL_SECONDS:-1800}

      #If both are set, basic auth will be required for the metrics endpoints.
      basic_auth_username = ${GF_METRICS_BASIC_AUTH_USERNAME:-}
      basic_auth_password = ${GF_METRICS_BASIC_AUTH_PASSWORD:-}

      # Metrics environment info adds dimensions to the `grafana_environment_info` metric, which
      # can expose more information about the Grafana instance.
      [metrics.environment_info]
      exampleLabel1 = ${GF_METRICS_ENVIRONMENT_INFO_EXAMPLELABEL1:-}
      exampleLabel2 = ${GF_METRICS_ENVIRONMENT_INFO_EXAMPLELABEL2:-}

      # Send internal Grafana metrics to graphite
      [metrics.graphite]
      # Enable by setting the address setting (ex localhost:2003)
      address = ${GF_METRICS_GRAPHITE_ADDRESS:-}
      prefix = ${GF_METRICS_GRAPHITE_PREFIX:-prod.grafana.%(instance_name)s.}

      #################################### Grafana.com integration  ##########################
      [grafana_net]
      url = ${GF_GRAFANA_NET_URL:-https://grafana.com}

      [grafana_com]
      url = ${GF_GRAFANA_COM_URL:-https://grafana.com}
      api_url = ${GF_GRAFANA_COM_API_URL:-https://grafana.com/api}
      sso_api_token = ${GF_GRAFANA_COM_SSO_API_TOKEN:-}

      #################################### Distributed tracing ############
      # Opentracing is deprecated use opentelemetry instead
      [tracing.jaeger]
      # jaeger destination (ex localhost:6831)
      address = ${GF_TRACING_JAEGER_ADDRESS:-}
      # tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
      always_included_tag = ${GF_TRACING_JAEGER_ALWAYS_INCLUDED_TAG:-}
      # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
      sampler_type = ${GF_TRACING_JAEGER_SAMPLER_TYPE:-const}
      # jaeger samplerconfig param
      # for "const" sampler, 0 or 1 for always false/true respectively
      # for "probabilistic" sampler, a probability between 0 and 1
      # for "rateLimiting" sampler, the number of spans per second
      # for "remote" sampler, param is the same as for "probabilistic"
      # and indicates the initial sampling rate before the actual one
      # is received from the mothership
      sampler_param = ${GF_TRACING_JAEGER_SAMPLER_PARAM:-1}
      # sampling_server_url is the URL of a sampling manager providing a sampling strategy.
      sampling_server_url = ${GF_TRACING_JAEGER_SAMPLING_SERVER_URL:-}
      # Whether or not to use Zipkin span propagation (x-b3- HTTP headers).
      zipkin_propagation = ${GF_TRACING_JAEGER_ZIPKIN_PROPAGATION:-false}
      # Setting this to true disables shared RPC spans.
      # Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
      disable_shared_zipkin_spans = ${GF_TRACING_JAEGER_DISABLE_SHARED_ZIPKIN_SPANS:-false}

      [tracing.opentelemetry]
      # attributes that will always be included in when creating new spans. ex (key1:value1,key2:value2)
      custom_attributes = ${GF_TRACING_OPENTELEMETRY_CUSTOM_ATTRIBUTES:-}
      # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
      sampler_type = ${GF_TRACING_OPENTELEMETRY_SAMPLER_TYPE:-}
      # Sampler configuration parameter
      # for "const" sampler, 0 or 1 for always false/true respectively
      # for "probabilistic" sampler, a probability between 0.0 and 1.0
      # for "rateLimiting" sampler, the number of spans per second
      # for "remote" sampler, param is the same as for "probabilistic"
      #   and indicates the initial sampling rate before the actual one
      #   is received from the sampling server (set at sampling_server_url)
      sampler_param = ${GF_TRACING_OPENTELEMETRY_SAMPLER_PARAM:-}
      # specifies the URL of the sampling server when sampler_type is remote
      sampling_server_url = ${GF_TRACING_OPENTELEMETRY_SAMPLING_SERVER_URL:-}

      [tracing.opentelemetry.jaeger]
      # jaeger destination (ex http://localhost:14268/api/traces)
      address = ${GF_TRACING_OPENTELEMETRY_JAEGER_ADDRESS:-}
      # Propagation specifies the text map propagation format: w3c, jaeger
      propagation = ${GF_TRACING_OPENTELEMETRY_JAEGER_PROPAGATION:-}

      # This is a configuration for OTLP exporter with GRPC protocol
      [tracing.opentelemetry.otlp]
      # otlp destination (ex localhost:4317)
      address = ${GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS:-}
      # Propagation specifies the text map propagation format: w3c, jaeger
      propagation = ${GF_TRACING_OPENTELEMETRY_OTLP_PROPAGATION:-}
      # Toggles the insecure communication setting, defaults to `true`.
      # When set to `false`, the OTLP client will use TLS credentials with the default system cert pool for communication.
      insecure = ${GF_TRACING_OPENTELEMETRY_OTLP_INSECURE:-}

      #################################### External Image Storage ##############
      [external_image_storage]
      # Used for uploading images to public servers so they can be included in slack/email messages.
      # You can choose between (s3, webdav, gcs, azure_blob, local)
      provider = ${GF_EXTERNAL_IMAGE_STORAGE_PROVIDER:-}

      [external_image_storage.s3]
      endpoint = ${GF_EXTERNAL_IMAGE_STORAGE_S3_ENDPOINT:-}
      path_style_access = ${GF_EXTERNAL_IMAGE_STORAGE_S3_PATH_STYLE_ACCESS:-}
      bucket_url = ${GF_EXTERNAL_IMAGE_STORAGE_S3_BUCKET_URL:-}
      bucket = ${GF_EXTERNAL_IMAGE_STORAGE_S3_BUCKET:-}
      region = ${GF_EXTERNAL_IMAGE_STORAGE_S3_REGION:-}
      path = ${GF_EXTERNAL_IMAGE_STORAGE_S3_PATH:-}
      access_key = ${GF_EXTERNAL_IMAGE_STORAGE_S3_ACCESS_KEY:-}
      secret_key = ${GF_EXTERNAL_IMAGE_STORAGE_S3_SECRET_KEY:-}

      [external_image_storage.webdav]
      url = ${GF_EXTERNAL_IMAGE_STORAGE_WEBDAV_URL:-}
      username = ${GF_EXTERNAL_IMAGE_STORAGE_WEBDAV_USERNAME:-}
      password = ${GF_EXTERNAL_IMAGE_STORAGE_WEBDAV_PASSWORD:-}
      public_url = ${GF_EXTERNAL_IMAGE_STORAGE_WEBDAV_PUBLIC_URL:-}

      [external_image_storage.gcs]
      key_file = ${GF_EXTERNAL_IMAGE_STORAGE_GCS_KEY_FILE:-}
      bucket = ${GF_EXTERNAL_IMAGE_STORAGE_GCS_BUCKET:-}
      path = ${GF_EXTERNAL_IMAGE_STORAGE_GCS_PATH:-}
      enable_signed_urls = ${GF_EXTERNAL_IMAGE_STORAGE_GCS_ENABLE_SIGNED_URLS:-false}
      signed_url_expiration = ${GF_EXTERNAL_IMAGE_STORAGE_GCS_SIGNED_URL_EXPIRATION:-}

      [external_image_storage.azure_blob]
      account_name = ${GF_EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_ACCOUNT_NAME:-}
      account_key = ${GF_EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_ACCOUNT_KEY:-}
      container_name = ${GF_EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_CONTAINER_NAME:-}
      sas_token_expiration_days = ${GF_EXTERNAL_IMAGE_STORAGE_AZURE_BLOB_SAS_TOKEN_EXPIRATION_DAYS:-}

      [external_image_storage.local]
      # does not require any configuration

      [rendering]
      # Options to configure a remote HTTP image rendering service, e.g. using https://github.com/grafana/grafana-image-renderer.
      # URL to a remote HTTP image renderer service, e.g. http://localhost:8081/render, will enable Grafana to render panels and dashboards to PNG-images using HTTP requests to an external service.
      server_url = ${GF_RENDERING_SERVER_URL:-}
      # If the remote HTTP image renderer service runs on a different server than the Grafana server you may have to configure this to a URL where Grafana is reachable, e.g. http://grafana.domain/.
      # The `callback_url` can also be configured to support usage of the image renderer running as a plugin with support for SSL / HTTPS. For example https://localhost:3000/.
      callback_url = ${GF_RENDERING_CALLBACK_URL:-}
      # An auth token that will be sent to and verified by the renderer. The renderer will deny any request without an auth token matching the one configured on the renderer side.
      renderer_token = ${GF_RENDERING_RENDERER_TOKEN:-}
      # Concurrent render request limit affects when the /render HTTP endpoint is used. Rendering many images at the same time can overload the server,
      # which this setting can help protect against by only allowing a certain amount of concurrent requests.
      concurrent_render_request_limit = ${GF_RENDERING_CONCURRENT_RENDER_REQUEST_LIMIT:-30}
      # Determines the lifetime of the render key used by the image renderer to access and render Grafana.
      # This setting should be expressed as a duration. Examples: 10s (seconds), 5m (minutes), 2h (hours).
      # Default is 5m. This should be more than enough for most deployments.
      # Change the value only if image rendering is failing and you see `Failed to get the render key from cache` in Grafana logs.
      render_key_lifetime = ${GF_RENDERING_RENDER_KEY_LIFETIME:-5m}
      # Default width for panel screenshot
      default_image_width = ${GF_RENDERING_DEFAULT_IMAGE_WIDTH:-1000}
      # Default height for panel screenshot
      default_image_height = ${GF_RENDERING_DEFAULT_IMAGE_HEIGHT:-500}
      # Default scale for panel screenshot
      default_image_scale = ${GF_RENDERING_DEFAULT_IMAGE_SCALE:-1}

      [panels]
      # here for to support old env variables, can remove after a few months
      enable_alpha = ${GF_PANELS_ENABLE_ALPHA:-false}
      disable_sanitize_html = ${GF_PANELS_DISABLE_SANITIZE_HTML:-false}

      [plugins]
      enable_alpha = ${GF_PLUGINS_ENABLE_ALPHA:-false}
      app_tls_skip_verify_insecure = ${GF_PLUGINS_APP_TLS_SKIP_VERIFY_INSECURE:-false}
      # Enter a comma-separated list of plugin identifiers to identify plugins to load even if they are unsigned. Plugins with modified signatures are never loaded.
      allow_loading_unsigned_plugins = ${GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS:-}
      # Enable or disable installing / uninstalling / updating plugins directly from within Grafana.
      plugin_admin_enabled = ${GF_PLUGINS_PLUGIN_ADMIN_ENABLED:-true}
      plugin_admin_external_manage_enabled = ${GF_PLUGINS_PLUGIN_ADMIN_EXTERNAL_MANAGE_ENABLED:-false}
      plugin_catalog_url = ${GF_PLUGINS_PLUGIN_CATALOG_URL:-https://grafana.com/grafana/plugins/}
      # Enter a comma-separated list of plugin identifiers to hide in the plugin catalog.
      plugin_catalog_hidden_plugins = ${GF_PLUGINS_PLUGIN_CATALOG_HIDDEN_PLUGINS:-}
      # Log all backend requests for core and external plugins.
      log_backend_requests = ${GF_PLUGINS_LOG_BACKEND_REQUESTS:-false}
      # Disable download of the public key for verifying plugin signature.
      public_key_retrieval_disabled = ${GF_PLUGINS_PUBLIC_KEY_RETRIEVAL_DISABLED:-false}
      # Force download of the public key for verifying plugin signature on startup. If disabled, the public key will be retrieved every 10 days.
      # Requires public_key_retrieval_disabled to be false to have any effect.
      public_key_retrieval_on_startup = ${GF_PLUGINS_PUBLIC_KEY_RETRIEVAL_ON_STARTUP:-false}
      # Enter a comma-separated list of plugin identifiers to avoid loading (including core plugins). These plugins will be hidden in the catalog.
      disable_plugins = ${GF_PLUGINS_DISABLE_PLUGINS:-}
      # Comma separated list of plugin ids for which angular deprecation UI should be disabled
      hide_angular_deprecation = ${GF_PLUGINS_HIDE_ANGULAR_DEPRECATION:-}
      # Comma separated list of plugin ids for which environment variables should be forwarded. Used only when feature flag pluginsSkipHostEnvVars is enabled.
      forward_host_env_vars = ${GF_PLUGINS_FORWARD_HOST_ENV_VARS:-}
      # Comma separated list of plugin ids to install as part of the startup process.
      # These will be installed, by default, asynchronously (in the background) while starting Grafana.
      preinstall = ${GF_PLUGINS_PREINSTALL:-}
      # Comma separated list of plugin ids to install before the startup process
      # These will be installed before starting Grafana. Useful when used with provisioning.
      preinstall_sync = ${GF_PLUGINS_PREINSTALL_SYNC:-}
      # Disables preinstall feature. It has the same effect as setting preinstall to an empty list.
      preinstall_disabled = ${GF_PLUGINS_PREINSTALL_DISABLED:-false}
      # Update strategy for plugins.
      # Available options: "latest", "minor"
      update_strategy = ${GF_PLUGINS_UPDATE_STRATEGY:-minor}

      #################################### Grafana Live ##########################################
      [live]
      # max_connections to Grafana Live WebSocket endpoint per Grafana server instance. See Grafana Live docs
      # if you are planning to make it higher than default 100 since this can require some OS and infrastructure
      # tuning. 0 disables Live, -1 means unlimited connections.
      max_connections = ${GF_LIVE_MAX_CONNECTIONS:-100}

      # message_size_limit is the maximum size in bytes of Websocket messages from clients. Defaults to 64KB.
      # The limit can be disabled by setting it to -1.
      message_size_limit = ${GF_LIVE_MESSAGE_SIZE_LIMIT:-65536}

      # allowed_origins is a comma-separated list of origins that can establish connection with Grafana Live.
      # If not set then origin will be matched over root_url. Supports wildcard symbol "*".
      allowed_origins = ${GF_LIVE_ALLOWED_ORIGINS:-}

      # engine defines an HA (high availability) engine to use for Grafana Live. By default no engine used - in
      # this case Live features work only on a single Grafana server.
      # Available options: "redis".
      ha_engine = ${GF_LIVE_HA_ENGINE:-}

      # ha_engine_address sets a connection address for Live HA engine. Depending on engine type address format can differ.
      # For now we only support Redis connection address in "host:port" format.
      ha_engine_address = ${GF_LIVE_HA_ENGINE_ADDRESS:-127.0.0.1:6379}

      # ha_engine_password allows setting an optional password to authenticate with the engine
      ha_engine_password = ${GF_LIVE_HA_ENGINE_PASSWORD:-}

      # ha_prefix is a prefix for keys in the HA engine. It's used to separate keys for different Grafana instances.
      ha_prefix = ${GF_LIVE_HA_PREFIX:-}

      #################################### Grafana Image Renderer Plugin ##########################
      [plugin.grafana-image-renderer]
      # Instruct headless browser instance to use a default timezone when not provided by Grafana, e.g. when rendering panel image of alert.
      # See ICU’s metaZones.txt (https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt) for a list of supported
      # timezone IDs. Fallbacks to TZ environment variable if not set.
      rendering_timezone = ${TZ:-America/Chicago}

      # Instruct headless browser instance to use a default language when not provided by Grafana, e.g. when rendering panel image of alert.
      # Please refer to the HTTP header Accept-Language to understand how to format this value, e.g. 'fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5'.
      rendering_language = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_LANGUAGE:-}

      # Instruct headless browser instance to use a default device scale factor when not provided by Grafana, e.g. when rendering panel image of alert.
      # Default is 1. Using a higher value will produce more detailed images (higher DPI), but will require more disk space to store an image.
      rendering_viewport_device_scale_factor = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_DEVICE_SCALE_FACTOR:-}

      # Instruct headless browser instance whether to ignore HTTPS errors during navigation. Per default HTTPS errors are not ignored. Due to
      # the security risk it's not recommended to ignore HTTPS errors.
      rendering_ignore_https_errors = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS:-}

      # Instruct headless browser instance whether to capture and log verbose information when rendering an image. Default is false and will
      # only capture and log error messages. When enabled, debug messages are captured and logged as well.
      # For the verbose information to be included in the Grafana server log you have to adjust the rendering log level to debug, configure
      # [log].filter = rendering:debug.
      rendering_verbose_logging = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VERBOSE_LOGGING:-}

      # Instruct headless browser instance whether to output its debug and error messages into running process of remote rendering service.
      # Default is false. This can be useful to enable (true) when troubleshooting.
      rendering_dumpio = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_DUMPIO:-}

      # Instruct headless browser instance whether to register metrics for the duration of every rendering step. Default is false.
      # This can be useful to enable (true) when optimizing the rendering mode settings to improve the plugin performance or when troubleshooting.
      rendering_timing_metrics = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_TIMING_METRICS:-}

      # This is a configuration for OTLP exporter with HTTP protocol, set this URL to enable tracing (ex: http://localhost:4318/v1/traces). Default to empty (tracing disabled).
      rendering_tracing_url = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_TRACING_URL:-}

      # Additional arguments to pass to the headless browser instance. Default is --no-sandbox. The list of Chromium flags can be found
      # here (https://peter.sh/experiments/chromium-command-line-switches/). Multiple arguments is separated with comma-character.
      rendering_args = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_ARGS:-}

      # You can configure the plugin to use a different browser binary instead of the pre-packaged version of Chromium.
      # Please note that this is not recommended, since you may encounter problems if the installed version of Chrome/Chromium is not
      # compatible with the plugin.
      rendering_chrome_bin = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CHROME_BIN:-}

      # Instruct how headless browser instances are created. Default is 'default' and will create a new browser instance on each request.
      # Mode 'clustered' will make sure that only a maximum of browsers/incognito pages can execute concurrently.
      # Mode 'reusable' will have one browser instance and will create a new incognito page on each request.
      rendering_mode = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_MODE:-}

      # When rendering_mode = clustered, you can instruct how many browsers or incognito pages can execute concurrently. Default is 'browser'
      # and will cluster using browser instances.
      # Mode 'context' will cluster using incognito pages.
      rendering_clustering_mode = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CLUSTERING_MODE:-}
      # When rendering_mode = clustered, you can define the maximum number of browser instances/incognito pages that can execute concurrently. Default is '5'.
      rendering_clustering_max_concurrency = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CLUSTERING_MAX_CONCURRENCY:-}
      # When rendering_mode = clustered, you can specify the duration a rendering request can take before it will time out. Default is `30` seconds.
      rendering_clustering_timeout = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_CLUSTERING_TIMEOUT:-}

      # Limit the maximum viewport width, height and device scale factor that can be requested.
      rendering_viewport_max_width = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_WIDTH:-}
      rendering_viewport_max_height = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_HEIGHT:-}
      rendering_viewport_max_device_scale_factor = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR:-}

      # Change the listening host and port of the gRPC server. Default host is 127.0.0.1 and default port is 0 and will automatically assign
      # a port not in use.
      grpc_host = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_GRPC_HOST:-127.0.0.1}
      grpc_port = ${GF_PLUGIN_GRAFANA_IMAGE_RENDERER_GRPC_PORT:-0}

      [enterprise]
      license_path = ${GF_ENTERPRISE_LICENSE_PATH:-}

      [feature_toggles]
      # there are currently two ways to enable feature toggles in the `grafana.ini`.
      # you can either pass an array of feature you want to enable to the `enable` field or
      # configure each toggle by setting the name of the toggle to true/false. Toggles set to true/false
      # will take precedence over toggles in the `enable` list.

      # enable = feature1,feature2
      enable = ${GF_FEATURE_TOGGLES_ENABLE:-}

      # Some features are enabled by default, see:
      # https://grafana.com/docs/grafana/next/setup-grafana/configure-grafana/feature-toggles/
      # To enable features by default, set `Expression:  "true"` in:
      # https://github.com/grafana/grafana/blob/main/pkg/services/featuremgmt/registry.go

      # feature1 = true
      # feature2 = false

      [feature_toggles.openfeature]
      # This is EXPERIMENTAL. Please, do not use this section
      provider = ${GF_FEATURE_TOGGLES_OPENFEATURE_PROVIDER:-static}

      [feature_toggles.openfeature.context]
      # This is EXPERIMENTAL. Please, do not use this section
      # instance = ${GF_FEATURE_TOGGLES_OPENFEATURE_CONTEXT_INSTANCE:-"grafana"}
      # version = ${GF_FEATURE_TOGGLES_OPENFEATURE_CONTEXT_VERSION:-11.0.0}

      [time_picker]
      # Custom quick ranges for the time picker. Each quick range has a display name, a from value, and a to value.
      # Format: [{"from":"now-5m","to":"now","display":"Last 5 minutes"},{"from":"now-15m","to":"now","display":"Last 15 minutes"}]
      quick_ranges = ${GF_TIME_PICKER_QUICK_RANGES:-}

      [date_formats]
      # For information on what formatting patterns that are supported https://momentjs.com/docs/#/displaying/

      # Default system date format used in time range picker and other places where full time is displayed
      full_date = ${GF_DATE_FORMATS_FULL_DATE:-YYYY-MM-DD HH:mm:ss}

      # Used by graph and other places where we only show small intervals
      interval_second = ${GF_DATE_FORMATS_INTERVAL_SECOND:-HH:mm:ss}
      interval_minute = ${GF_DATE_FORMATS_INTERVAL_MINUTE:-HH:mm}
      interval_hour = ${GF_DATE_FORMATS_INTERVAL_HOUR:-MM/DD HH:mm}
      interval_day = ${GF_DATE_FORMATS_INTERVAL_DAY:-MM/DD}
      interval_month = ${GF_DATE_FORMATS_INTERVAL_MONTH:-YYYY-MM}
      interval_year = ${GF_DATE_FORMATS_INTERVAL_YEAR:-YYYY}

      # Experimental feature
      use_browser_locale = ${GF_DATE_FORMATS_USE_BROWSER_LOCALE:-false}

      # Default timezone for user preferences. Options are 'browser' for the browser local timezone or a timezone name from IANA Time Zone database, e.g. 'UTC' or 'Europe/Amsterdam' etc.
      default_timezone = ${GF_DATE_FORMATS_DEFAULT_TIMEZONE:-browser}

      [expressions]
      # Enable or disable the expressions functionality.
      enabled = ${GF_EXPRESSIONS_ENABLED:-true}

      [geomap]
      # Set the JSON configuration for the default basemap
      default_baselayer_config = ${GF_GEOMAP_DEFAULT_BASELAYER_CONFIG:-}

      # Enable or disable loading other base map layers
      enable_custom_baselayers = ${GF_GEOMAP_ENABLE_CUSTOM_BASELAYERS:-true}

      #################################### Support Bundles #####################################
      [support_bundles]
      # Enable support bundle creation (default: true)
      enabled = ${GF_SUPPORT_BUNDLES_ENABLED:-true}
      # Only server admins can generate and view support bundles (default: true)
      server_admin_only = ${GF_SUPPORT_BUNDLES_SERVER_ADMIN_ONLY:-true}
      # If set, bundles will be encrypted with the provided public keys separated by whitespace
      public_keys = ${GF_SUPPORT_BUNDLES_PUBLIC_KEYS:-""}

      #################################### Storage ################################################

      [storage]
      # Allow uploading SVG files without sanitization.
      allow_unsanitized_svg_upload = ${GF_STORAGE_ALLOW_UNSANITIZED_SVG_UPLOAD:-false}

      #################################### Search ################################################

      [search]
      # Defines the number of dashboards loaded at once in a batch during a full reindex.
      # This is a temporary settings that might be removed in the future.
      dashboard_loading_batch_size = ${GF_SEARCH_DASHBOARD_LOADING_BATCH_SIZE:-200}

      # Defines the frequency of a full search reindex.
      # This is a temporary settings that might be removed in the future.
      full_reindex_interval = ${GF_SEARCH_FULL_REINDEX_INTERVAL:-5m}

      # Defines the frequency of partial index updates based on recent changes such as dashboard updates.
      # This is a temporary settings that might be removed in the future.
      index_update_interval = ${GF_SEARCH_INDEX_UPDATE_INTERVAL:-10s}

      # Move an app plugin referenced by its id (including all its pages) to a specific navigation section
      # Format: <Plugin ID> = <Section ID> <Sort Weight>
      [navigation.app_sections]

      # Move a specific app plugin page (referenced by its `path` field) to a specific navigation section
      # Format: <Page URL> = <Section ID> <Sort Weight>
      [navigation.app_standalone_pages]

      #################################### Secure Socks5 Datasource Proxy #####################################
      [secure_socks_datasource_proxy]
      enabled = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_ENABLED:-false}
      root_ca_cert = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_ROOT_CA_CERT:-}
      client_key = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_CLIENT_KEY:-}
      client_cert = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_CLIENT_CERT:-}
      server_name = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_SERVER_NAME:-}
      # The address of the socks5 proxy datasources should connect to
      proxy_address = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_PROXY_ADDRESS:-}
      # Determines if the secure socks proxy should be shown on the datasources page, defaults to true if the feature is enabled
      show_ui = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_SHOW_UI:-true}
      # Disables TLS in the secure socks proxy
      allow_insecure = ${GF_SECURE_SOCKS_DATASOURCE_PROXY_ALLOW_INSECURE:-false}

      ################################## Feature Management ##############################################
      # Options to configure the experimental Feature Toggle Admin Page feature, which is behind the `featureToggleAdminPage` feature toggle. Use at your own risk.
      [feature_management]
      # Allows editing of feature toggles in the feature management page
      allow_editing = ${GF_FEATURE_MANAGEMENT_ALLOW_EDITING:-false}

      # Allow customization of URL for the controller that manages feature toggles
      update_webhook = ${GF_FEATURE_MANAGEMENT_UPDATE_WEBHOOK:-}

      # Allow configuring an auth token for feature management update requests
      update_webhook_token = ${GF_FEATURE_MANAGEMENT_UPDATE_WEBHOOK_TOKEN:-}

      # Hides specific feature toggles from the feature management page
      hidden_toggles = ${GF_FEATURE_MANAGEMENT_HIDDEN_TOGGLES:-}

      # Disables updating specific feature toggles in the feature management page
      read_only_toggles = ${GF_FEATURE_MANAGEMENT_READ_ONLY_TOGGLES:-}

      #################################### Public Dashboards #####################################
      [public_dashboards]
      # Set to false to disable public dashboards
      enabled = ${GF_PUBLIC_DASHBOARDS_ENABLED:-true}

      ###################################### Cloud Migration ######################################
      [cloud_migration]
      # Set to true to enable target-side migration UI
      is_target = ${GF_CLOUD_MIGRATION_IS_TARGET:-false}
      # Token used to send requests to grafana com
      gcom_api_token = ${GF_CLOUD_MIGRATION_GCOM_API_TOKEN:-}
      # How long to wait for a request sent to gms to start a snapshot to complete
      start_snapshot_timeout = ${GF_CLOUD_MIGRATION_START_SNAPSHOT_TIMEOUT:-5s}
      # How long to wait for a request sent to gms to validate a key to complete
      validate_key_timeout = ${GF_CLOUD_MIGRATION_VALIDATE_KEY_TIMEOUT:-5s}
      # How long to wait for a request sent to gms to get a snapshot status to complete
      get_snapshot_status_timeout = ${GF_CLOUD_MIGRATION_GET_SNAPSHOT_STATUS_TIMEOUT:-5s}
      # How long to wait for a request sent to gms to create a presigned upload url
      create_upload_url_timeout = ${GF_CLOUD_MIGRATION_CREATE_UPLOAD_URL_TIMEOUT:-5s}
      # How long to wait for a request sent to gms to report an event
      report_event_timeout = ${GF_CLOUD_MIGRATION_REPORT_EVENT_TIMEOUT:-5s}
      # How long to wait for a request to fetch an instance to complete
      fetch_instance_timeout = ${GF_CLOUD_MIGRATION_FETCH_INSTANCE_TIMEOUT:-5s}
      # How long to wait for a request to create an access policy to complete
      create_access_policy_timeout = ${GF_CLOUD_MIGRATION_CREATE_ACCESS_POLICY_TIMEOUT:-5s}
      # How long to wait for a request to create to fetch an access policy to complete
      fetch_access_policy_timeout = ${GF_CLOUD_MIGRATION_FETCH_ACCESS_POLICY_TIMEOUT:-5s}
      # How long to wait for a request to create to delete an access policy to complete
      delete_access_policy_timeout = ${GF_CLOUD_MIGRATION_DELETE_ACCESS_POLICY_TIMEOUT:-5s}
      # The domain name used to access cms
      domain = ${GF_CLOUD_MIGRATION_DOMAIN:-grafana.net}
      # Folder used to store snapshot files. Defaults to the home dir
      snapshot_folder = ${GF_CLOUD_MIGRATION_SNAPSHOT_FOLDER:-}
      # How frequently should the frontend UI poll for changes while resources are migrating
      frontend_poll_interval = ${GF_CLOUD_MIGRATION_FRONTEND_POLL_INTERVAL:-2s}
      # Controls how the Alert Rules are migrated. Available choices: "paused" and "unchanged". Default: "paused".
      # With "paused", all Alert Rules will be created in Paused state. This is helpful to avoid double notifications.
      # With "unchanged", all Alert Rules will be created with the pause state unchanged coming from the source instance.
      alert_rules_state = ${GF_CLOUD_MIGRATION_ALERT_RULES_STATE:-"paused"}

      ###################################### Secrets Manager ######################################
      [secrets_manager]
      # Used for signing
      secret_key = ${GF_SECRETS_MANAGER_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}
      # Current key provider used for envelope encryption, default to static value specified by secret_key
      encryption_provider = ${GF_SECRETS_MANAGER_ENCRYPTION_PROVIDER:-secretKey.v1}
      # List of configured key providers, space separated (Enterprise only): e.g., awskms.v1 azurekv.v1
      available_encryption_providers = ${GF_SECRETS_MANAGER_AVAILABLE_ENCRYPTION_PROVIDERS:-}

      ################################## Frontend development configuration ###################################
      # Warning! Any settings placed in this section will be available on `process.env.frontend_dev_{foo}` within frontend code
      # Any values placed here may be accessible to the UI. Do not place sensitive information here.
      [frontend_dev]
      # Should UI tests fail when console log/warn/erroring?
      # Does not affect the result when running on CI - only for allowing devs to choose this behaviour locally
      fail_tests_on_console = ${GF_FRONTEND_DEV_FAIL_TESTS_ON_CONSOLE:-true}
      # Whether to enable betterer eslint rules for local development
      # Useful if you want to always see betterer rules that we're trying to fix so they're more prevalent
      betterer_eslint_rules = ${GF_FRONTEND_DEV_BETTERER_ESLINT_RULES:-false}
  grafana-datasource.yaml:
    content: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          uid: prometheus_uid
          url: ${PROMETHEUS_URL:-http://prometheus:9090}
          isDefault: false
          editable: false
          jsonData:
            timeInterval: "5s"
            queryTimeout: "60s"
            httpMethod: "POST"
            exemplarTraceIdDestinations:
              - name: trace_id
                datasourceUid: jaeger_uid
          secureJsonData:
            # Add basic auth if needed
            # basicAuthPassword: "password"
        - name: VictoriaMetrics
          type: prometheus
          access: proxy
          uid: victoriametrics_uid
          url: ${VICTORIAMETRICS_URL:-http://victoriametrics:8428}
          isDefault: true
          editable: false
          jsonData:
            timeInterval: "5s"
            queryTimeout: "60s"
            httpMethod: "POST"
            customQueryParameters: ""
            manageAlerts: true
            alertmanagerUid: "alertmanager_uid"
            prometheusType: "Prometheus"
            prometheusVersion: "2.40.0"
            cacheLevel: "High"
            disableMetricsLookup: false
            incrementalQuerying: true
            incrementalQueryOverlapWindow: "10m"
          secureJsonData:
            # Add basic auth if needed for VictoriaMetrics
            # basicAuthPassword: "$${VICTORIAMETRICS_PASSWORD:-}"
        - name: VictoriaMetrics-Native
          type: victoriametrics-datasource
          access: proxy
          url: ${VICTORIAMETRICS_URL:-http://victoriametrics:8428}
          isDefault: false
          editable: false
          jsonData:
            timeInterval: "5s"
            queryTimeout: "60s"
            httpMethod: "POST"
            lookback: "1m"
            resolution: "1/2"
          secureJsonData:
            # Add basic auth if needed
            # basicAuthPassword: "${VICTORIAMETRICS_PASSWORD:-}"
        - name: Loki
          type: loki
          access: proxy
          uid: loki_uid
          url: ${LOKI_URL:-http://loki:${LOKI_HTTP_LISTEN_PORT:-3100}}
          editable: false
          jsonData:
            maxLines: 1000
            timeout: "60s"
            derivedFields:
              - matcherRegex: "traceID=(\\w+)"
                name: "TraceID"
                url: "$${__value.raw}"
                datasourceUid: "jaeger_uid"
          secureJsonData:
            # Add basic auth if needed
            # basicAuthPassword: "${LOKI_PASSWORD:-${SUDO_PASSWORD:?}}"
        - name: Alertmanager
          type: alertmanager
          access: proxy
          uid: alertmanager_uid
          url: ${ALERTMANAGER_URL:-http://alertmanager:9093}
          editable: false
          jsonData:
            implementation: "prometheus"
            handleGrafanaManagedAlerts: true
          secureJsonData:
            # Add basic auth if needed
            # basicAuthPassword: "${ALERTMANAGER_PASSWORD:-}"
        - name: Flaresolverr
          type: prometheus
          access: proxy
          uid: flaresolverr_uid
          url: ${FLARESOLVERR_URL:-http://flaresolverr:9090}
          editable: false
          jsonData:
            timeInterval: "15s"
            queryTimeout: "60s"
            httpMethod: "GET"
            prometheusType: "Prometheus"
        - name: CrowdSec
          type: prometheus
          access: proxy
          uid: crowdsec_uid
          url: ${CROWDSEC_METRICS_URL:-http://crowdsec:6060}
          editable: false
          jsonData:
            timeInterval: "15s"
            queryTimeout: "60s"
            httpMethod: "GET"
            prometheusType: "Prometheus"
  grafana-dashboard.yaml:
    content: |
      apiVersion: 1
      providers:
        - name: 'System Monitoring'
          orgId: 1
          folder: 'System Monitoring'
          folderUid: 'system_monitoring'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards/system
            foldersFromFilesStructure: false
        - name: 'Infrastructure'
          orgId: 1
          folder: 'Infrastructure'
          folderUid: 'infrastructure'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards/infrastructure
            foldersFromFilesStructure: false
        - name: 'Application Monitoring'
          orgId: 1
          folder: 'Application Monitoring'
          folderUid: 'app_monitoring'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards/apps
            foldersFromFilesStructure: false
        - name: 'Network Monitoring'
          orgId: 1
          folder: 'Network Monitoring'
          folderUid: 'network_monitoring'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards/network
            foldersFromFilesStructure: false
  prometheus.yml:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
        external_labels:
          cluster: 'homelab'
          replica: 'prometheus'

      # Alertmanager configuration
      alerting:
        alertmanagers:
          - static_configs:
              - targets:
                - alertmanager:${ALERTMANAGER_PORT:-9093}

      # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
      rule_files:
        - "alert.rules"

      # Remote write configuration for VictoriaMetrics
      remote_write:
        - url: http://victoriametrics:${VICTORIAMETRICS_PORT:-8428}/api/v1/write
          queue_config:
            max_samples_per_send: 10000
            capacity: 20000
            max_shards: 30
          write_relabel_configs:
            - source_labels: [__name__]
              regex: 'go_.*'
              action: drop

      # A scrape configuration containing exactly one endpoint to scrape:
      scrape_configs:
        # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:${PROMETHEUS_PORT:-9090}']

        - job_name: 'victoriametrics'
          static_configs:
            - targets: ['victoriametrics:${VICTORIAMETRICS_PORT:-8428}']
          scrape_interval: 5s
          metrics_path: /metrics

        - job_name: 'node-exporter'
          static_configs:
            - targets: ['node-exporter:${NODE_EXPORTER_PORT:-9100}']
          scrape_interval: 5s

        - job_name: 'cadvisor'
          static_configs:
            - targets: ['cadvisor:${CADVISOR_PORT:-8080}']
          scrape_interval: 5s

        - job_name: 'grafana'
          static_configs:
            - targets: ['grafana:${GRAFANA_PORT:-3000}']
          scrape_interval: 15s

        - job_name: 'traefik'
          static_configs:
            - targets: ['traefik:8080']
          scrape_interval: 5s

        - job_name: 'crowdsec'
          static_configs:
            - targets: ['crowdsec:6060']
          scrape_interval: 15s

        - job_name: 'docker'
          static_configs:
            - targets: ['host.docker.internal:9323']
          scrape_interval: 15s

        - job_name: 'flaresolverr'
          static_configs:
            - targets: ['flaresolverr:${FLARESOLVERR_PORT:-9090}']
          scrape_interval: 15s
          metrics_path: /metrics

        - job_name: 'redis'
          static_configs:
            - targets: ['redis:${REDIS_PORT:-6379}']
          scrape_interval: 15s

        - job_name: 'mongodb'
          static_configs:
            - targets: ['mongodb:${MONGODB_PORT:-27017}']
          scrape_interval: 30s

        - job_name: 'homepage'
          static_configs:
            - targets: ['homepage:${HOMEPAGE_PORT:-3000}']
          scrape_interval: 30s

        - job_name: 'portainer'
          static_configs:
            - targets: ['portainer:${PORTAINER_PORT:-9000}']
          scrape_interval: 30s

        - job_name: 'searxng'
          static_configs:
            - targets: ['searxng:${SEARXNG_PORT:-8080}']
          scrape_interval: 30s

        - job_name: 'code-server'
          static_configs:
            - targets: ['code-server:${CODE_SERVER_PORT:-8443}']
          scrape_interval: 30s

        - job_name: 'dozzle'
          static_configs:
            - targets: ['dozzle:${DOZZLE_PORT:-8080}']
          scrape_interval: 30s

        - job_name: 'bolabaden-nextjs'
          static_configs:
            - targets: ['bolabaden-nextjs:${BOLABADEN_NEXTJS_PORT:-3000}']
          scrape_interval: 30s

        # Blackbox exporter for endpoint monitoring
        - job_name: 'blackbox'
          metrics_path: /probe
          params:
            module: [http_2xx]
          static_configs:
            - targets:
              - https://grafana.$DOMAIN
              - https://victoriametrics.$DOMAIN
              - https://prometheus.$DOMAIN
              - https://traefik.$DOMAIN
              - https://crowdsec.$DOMAIN
              - https://flaresolverr.$DOMAIN
              - https://homepage.$DOMAIN
              - https://portainer.$DOMAIN
              - https://searxng.$DOMAIN
              - https://code-server.$DOMAIN
              - https://dozzle.$DOMAIN
              - https://$DOMAIN
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: blackbox-exporter:9115

  alert.rules:
    content: |
      groups:
      - name: homelab.rules
        rules:
        - alert: InstanceDown
          expr: up == 0
          for: 10m
          labels:
            severity: page
          annotations:
            summary: "Instance {{ $$labels.instance }} down"
            description: "{{ $$labels.instance }} of job {{ $$labels.job }} has been down for more than 10 minutes."

        - alert: HighCPUUsage
          expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High CPU usage on {{ $$labels.instance }}"
            description: "CPU usage is above 80% on {{ $$labels.instance }} for more than 5 minutes."

        - alert: HighMemoryUsage
          expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 90
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High memory usage on {{ $$labels.instance }}"
            description: "Memory usage is above 90% on {{ $$labels.instance }} for more than 5 minutes."

        - alert: DiskSpaceLow
          expr: (node_filesystem_size_bytes{fstype!="tmpfs"} - node_filesystem_free_bytes{fstype!="tmpfs"}) / node_filesystem_size_bytes{fstype!="tmpfs"} * 100 > 90
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Low disk space on {{ $$labels.instance }}"
            description: "Disk usage is above 90% on {{ $$labels.instance }} {{ $$labels.mountpoint }} for more than 5 minutes."

        - alert: VictoriaMetricsDown
          expr: up{job="victoriametrics"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "VictoriaMetrics is down"
            description: "VictoriaMetrics has been down for more than 5 minutes."

        - alert: PrometheusDown
          expr: up{job="prometheus"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Prometheus is down"
            description: "Prometheus has been down for more than 5 minutes."

        - alert: GrafanaDown
          expr: up{job="grafana"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Grafana is down"
            description: "Grafana has been down for more than 5 minutes."

        - alert: CrowdSecDown
          expr: up{job="crowdsec"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "CrowdSec is down"
            description: "CrowdSec has been down for more than 5 minutes."

        - alert: TraefikDown
          expr: up{job="traefik"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Traefik is down"
            description: "Traefik has been down for more than 5 minutes."

        - alert: HighRequestLatency
          expr: histogram_quantile(0.95, rate(traefik_service_request_duration_seconds_bucket[5m])) > 0.5
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High request latency"
            description: "95th percentile latency is above 500ms for more than 5 minutes."

        - alert: HighErrorRate
          expr: rate(traefik_service_requests_total{code=~"5.."}[5m]) / rate(traefik_service_requests_total[5m]) > 0.1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "High error rate"
            description: "Error rate is above 10% for more than 5 minutes."

        - alert: FlaresolverrDown
          expr: up{job="flaresolverr"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Flaresolverr is down"
            description: "Flaresolverr has been down for more than 5 minutes."

        - alert: RedisDown
          expr: up{job="redis"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Redis is down"
            description: "Redis has been down for more than 5 minutes."

        - alert: MongoDBDown
          expr: up{job="mongodb"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "MongoDB is down"
            description: "MongoDB has been down for more than 5 minutes."

        - alert: HomepageDown
          expr: up{job="homepage"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Homepage is down"
            description: "Homepage has been down for more than 5 minutes."

        - alert: PortainerDown
          expr: up{job="portainer"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Portainer is down"
            description: "Portainer has been down for more than 5 minutes."

        - alert: HedgedocDown
          expr: up{job="hedgedoc"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Hedgedoc is down"
            description: "Hedgedoc has been down for more than 5 minutes."

        - alert: SearxngDown
          expr: up{job="searxng"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "SearxNG is down"
            description: "SearxNG has been down for more than 5 minutes."

        - alert: CodeServerDown
          expr: up{job="code-server"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Code Server is down"
            description: "Code Server has been down for more than 5 minutes."

        - alert: DozzleDown
          expr: up{job="dozzle"} == 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Dozzle is down"
            description: "Dozzle has been down for more than 5 minutes."

        - alert: BolabadeneNextjsDown
          expr: up{job="bolabaden-nextjs"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Bolabaden NextJS is down"
            description: "Bolabaden NextJS has been down for more than 5 minutes."

        - alert: BlackboxProbeFailure
          expr: probe_success == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Blackbox probe failure"
            description: "Probe of $$labels.instance has been failing for more than 5 minutes."

        - alert: HighTraefikLatency
          expr: histogram_quantile(0.99, rate(traefik_service_request_duration_seconds_bucket[5m])) > 2
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "High Traefik latency"
            description: "99th percentile latency is above 2s for more than 10 minutes."

        - alert: CrowdsecHighBanRate
          expr: increase(cs_lapi_decision_total{type="ban"}[1h]) > 100
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High CrowdSec ban rate"
            description: "More than 100 bans in the last hour."

        - alert: VictoriaMetricsHighIngestionRate
          expr: rate(vm_rows_inserted_total[5m]) > 1000000
          for: 10m
          labels:
            severity: info
          annotations:
            summary: "High VictoriaMetrics ingestion rate"
            description: "Ingestion rate is above 1M datapoints/sec for more than 10 minutes."

        - alert: VictoriaMetricsSlowInserts
          expr: rate(vm_slow_row_inserts_total[5m]) / rate(vm_rows_added_to_storage_total[5m]) > 0.1
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "VictoriaMetrics slow inserts"
            description: "More than 10% of inserts are slow, indicating possible memory pressure."

        - alert: ContainerHighCPUUsage
          expr: rate(container_cpu_usage_seconds_total[5m]) * 100 > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Container high CPU usage"
            description: "Container $$labels.name has high CPU usage (>80%) for more than 5 minutes."

        - alert: ContainerHighMemoryUsage
          expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 90
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Container high memory usage"
            description: "Container $$labels.name has high memory usage (>90%) for more than 5 minutes."

        - alert: ContainerRestartLoop
          expr: increase(container_last_seen[1h]) > 5
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Container restart loop"
            description: "Container $$labels.name has restarted more than 5 times in the last hour."

  grafana-alerting.yaml:
    content: |
      apiVersion: 1

      groups:
        - orgId: 1
          name: Homelab Rules
          folder: Alerts
          interval: 60s
          rules:
            - uid: high_cpu
              title: High CPU
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: avg(rate(node_cpu_seconds_total{mode!="idle"}[5m])) * 100
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: High CPU usage detected
              labels:
                severity: critical
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 80
                  op: gt

            - uid: high_mem
              title: High Memory
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: High memory usage detected
              labels:
                severity: critical
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 90
                  op: gt

            - uid: low_disk
              title: Low Disk
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: 100 - (node_filesystem_avail_bytes / node_filesystem_size_bytes * 100)
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: Low disk space detected
              labels:
                severity: warning
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 90
                  op: gt

            - uid: high_temp
              title: High Temp
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: node_hwmon_temp_celsius
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: High temperature detected
              labels:
                severity: warning
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 70
                  op: gt

            - uid: high_latency
              title: High Latency
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: probe_duration_seconds
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: High probe latency detected
              labels:
                severity: warning
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 0.1
                  op: gt

            - uid: container_restart
              title: Container Restart
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 60
                    to: 0
                  model:
                    expr: changes(kube_pod_container_status_restarts[5m])
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 1m
              annotations:
                summary: Container restart detected
              labels:
                severity: warning
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 0
                  op: gt

            - uid: slow_query
              title: Slow DB Query
              condition: A
              data:
                - refId: A
                  datasourceUid: mysql_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: mysql_global_status_slow_queries
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: Slow database queries detected
              labels:
                severity: warning
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 5
                  op: gt

            - uid: high_power
              title: High Power
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 300
                    to: 0
                  model:
                    expr: power_usage_watts
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 5m
              annotations:
                summary: High power usage detected
              labels:
                severity: info
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 500
                  op: gt

            - uid: backup_fail
              title: Backup Failed
              condition: A
              data:
                - refId: A
                  datasourceUid: prom_uid
                  relativeTimeRange:
                    from: 60
                    to: 0
                  model:
                    expr: backup_status
                    intervalMs: 60000
                    maxDataPoints: 43200
              for: 1m
              annotations:
                summary: Backup failed
              labels:
                severity: critical
              noDataState: NoData
              execErrState: Error
              isPaused: false
              thresholds:
                - value: 0
                  op: eq
  blackbox.yml:
    content: |
      modules:
        http_2xx:
          prober: http
          timeout: 5s
          http:
            valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
            valid_status_codes: []  # Defaults to 2xx
            method: GET
            headers:
              Host: vhost.${DOMAIN}
              Accept-Language: en-US
            no_follow_redirects: false
            fail_if_ssl: false
            fail_if_not_ssl: false
            fail_if_body_matches_regexp:
              - "Could not connect to database"
            fail_if_body_not_matches_regexp:
              - "Download the latest version here"
            fail_if_header_matches: # Verifies that no cookies are set
              - header: Set-Cookie
                allow_missing: true
                regexp: '.*'
            fail_if_header_not_matches:
              - header: Access-Control-Allow-Origin
                regexp: '(\*|${DOMAIN})'
            tls_config:
              insecure_skip_verify: false
            preferred_ip_protocol: "ip4" # defaults to "ip6"
            ip_protocol_fallback: false  # no fallback to "ip6"
        http_post_2xx:
          prober: http
          timeout: 5s
          http:
            method: POST
            headers:
              Content-Type: application/json
            body: '{}'
        tcp_connect:
          prober: tcp
          timeout: 5s
        pop3s_banner:
          prober: tcp
          tcp:
            query_response:
              - expect: "^+OK"
            tls: true
            tls_config:
              insecure_skip_verify: false
        grpc:
          prober: grpc
          grpc:
            tls: true
            preferred_ip_protocol: "ip4"
        grpc_plain:
          prober: grpc
          grpc:
            tls: false
            service: "service1"
        ssh_banner:
          prober: tcp
          timeout: 5s
          tcp:
            query_response:
              - expect: "^SSH-2.0-"
            tls: false
        irc_banner:
          prober: tcp
          timeout: 5s
          tcp:
            query_response:
              - send: "NICK prober"
              - send: "USER prober prober prober :prober"
              - expect: "PING :([^ ]+)"
                send: "PONG :$$1"
              - expect: "^:[^ ]+ 001"
        icmp:
          prober: icmp
          timeout: 5s
          icmp:
            preferred_ip_protocol: "ip4"
            source_ip_address: "127.0.0.1"
        dns_udp:
          prober: dns
          timeout: 5s
          dns:
            query_name: "${DOMAIN}"
            query_type: "A"
            valid_rcodes:
            - NOERROR
            validate_answer_rrs:
              fail_if_matches_regexp:
              - ".*127.0.0.1"
              fail_if_all_match_regexp:
              - ".*127.0.0.1"
              fail_if_not_matches_regexp:
              - "www.prometheus.io.\t300\tIN\tCNAME\tprometheus.io."
              - "prometheus.io.\t300\tIN\tA\t46.101.169.55"
            validate_authority_rrs:
              fail_if_matches_regexp:
              - ".*127.0.0.1"
            validate_additional_rrs:
              fail_if_matches_regexp:
              - ".*127.0.0.1"
        dns_soa:
          prober: dns
          dns:
            query_name: "prometheus.io"
            query_type: "SOA"
        dns_tcp:
          prober: dns
          dns:
            transport_protocol: "tcp" # defaults to "udp"
            preferred_ip_protocol: "ip4" # defaults to "ip6"
            query_name: "prometheus.io"
            query_type: "A"
  grafana-notifications.yaml:
    content: |
      apiVersion: 1
      notifiers:
        - name: webhook-default
          type: webhook
          uid: webhook_default_uid
          settings:
            url: ${GRAFANA_WEBHOOK_URL:-http://localhost:3000/webhook}
            httpMethod: POST
            maxAlerts: 0
            username: ""
            password: ""
            title: "Grafana Alert"
            message: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"
        - name: email-default
          type: email
          uid: email_default_uid
          settings:
            addresses: "${GRAFANA_EMAIL_ADDRESSES:-admin@localhost}"
            singleEmail: false
            subject: "Grafana Alert - {{ .GroupLabels.alertname }}"
            message: "{{ range .Alerts }}{{ .Annotations.summary }}\\n{{ .Annotations.description }}{{ end }}"
      contactPoints:
        - orgId: 1
          name: "default-contact-point"
          receivers:
            - uid: "default_receiver_uid"
              type: "email"
              settings:
                addresses: ["${GRAFANA_EMAIL_ADDRESSES:-admin@localhost}"]
                subject: "Grafana Alert Notification"
                message: |
                  {{ define \"__alert_list\" }}{{ range . }}
                  Alert: {{ .Annotations.summary }}
                  Description: {{ .Annotations.description }}
                  Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }}, {{ end }}
                  {{ end }}{{ end }}
                  {{ if gt (len .Alerts.Firing) 0 }}**FIRING**
                  {{ template \"__alert_list\" .Alerts.Firing }}{{ end }}
                  {{ if gt (len .Alerts.Resolved) 0 }}**RESOLVED**
                  {{ template \"__alert_list\" .Alerts.Resolved }}{{ end }}
            - uid: "webhook_receiver_uid"
              type: "webhook"
              settings:
                url: "${GRAFANA_WEBHOOK_URL:-http://localhost:3000/webhook}"
                httpMethod: "POST"
                maxAlerts: 0
      policies:
        - orgId: 1
          receiver: "default-contact-point"
          group_by: ["alertname", "cluster", "service"]
          group_wait: "30s"
          group_interval: "5m"
          repeat_interval: "1h"
          routes:
            - receiver: "default-contact-point"
              object_matchers:
                - ["severity", "=", "critical"]
              group_wait: "10s"
              repeat_interval: "30m"
            - receiver: "default-contact-point"
              object_matchers:
                - ["severity", "=", "warning"]
              group_wait: "30s"
              repeat_interval: "2h"
  grafana-plugins.yaml:
    content: |
      apiVersion: 1
      apps:
  node-exporter-dashboard.json:
    content: |
      {
        "__inputs": [
          {
            "name": "DS_PROMETHEUS",
            "label": "prometheus",
            "description": "",
            "type": "datasource",
            "pluginId": "prometheus",
            "pluginName": "Prometheus"
          }
        ],
        "__requires": [
          {
            "type": "panel",
            "id": "gauge",
            "name": "Gauge",
            "version": ""
          },
          {
            "type": "grafana",
            "id": "grafana",
            "name": "Grafana",
            "version": "11.6.1"
          },
          {
            "type": "datasource",
            "id": "prometheus",
            "name": "Prometheus",
            "version": "1.0.0"
          },
          {
            "type": "panel",
            "id": "stat",
            "name": "Stat",
            "version": ""
          },
          {
            "type": "panel",
            "id": "timeseries",
            "name": "Time series",
            "version": ""
          }
        ],
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "target": {
                "limit": 100,
                "matchAny": false,
                "tags": [],
                "type": "dashboard"
              },
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 1,
        "id": null,
        "links": [],
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "description": "Overall CPU busy percentage (averaged across all cores)",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "decimals": 1,
                "mappings": [
                  {
                    "options": {
                      "match": "null",
                      "result": {
                        "text": "N/A"
                      }
                    },
                    "type": "special"
                  }
                ],
                "max": 100,
                "min": 0,
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "rgba(50, 172, 45, 0.97)"
                    },
                    {
                      "color": "rgba(237, 129, 40, 0.89)",
                      "value": 85
                    },
                    {
                      "color": "rgba(245, 54, 54, 0.9)",
                      "value": 95
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 4,
              "w": 3,
              "x": 0,
              "y": 0
            },
            "id": 20,
            "options": {
              "minVizHeight": 75,
              "minVizWidth": 75,
              "orientation": "auto",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "showThresholdLabels": false,
              "showThresholdMarkers": true,
              "sizing": "auto"
            },
            "pluginVersion": "11.6.1",
            "targets": [
              {
                "editorMode": "code",
                "exemplar": false,
                "expr": "100 * (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\", instance=\"$$node\"}[$$__rate_interval])))",
                "hide": false,
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "range": false,
                "refId": "A",
                "step": 240
              }
            ],
            "title": "CPU Busy",
            "type": "gauge"
          }
        ],
        "refresh": "1m",
        "schemaVersion": 41,
        "tags": [
          "linux"
        ],
        "templating": {
          "list": [
            {
              "current": {},
              "includeAll": false,
              "label": "Datasource",
              "name": "DS_PROMETHEUS",
              "options": [],
              "query": "prometheus",
              "refresh": 1,
              "regex": "",
              "type": "datasource"
            },
            {
              "current": {},
              "datasource": {
                "type": "prometheus",
                "uid": "victoriametrics_uid"
              },
              "definition": "",
              "includeAll": false,
              "label": "Job",
              "name": "job",
              "options": [],
              "query": {
                "query": "label_values(node_uname_info, job)",
                "refId": "Prometheus-job-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "sort": 1,
              "type": "query"
            },
            {
              "current": {},
              "datasource": {
                "type": "prometheus",
                "uid": "victoriametrics_uid"
              },
              "definition": "label_values(node_uname_info{job=\"$$job\"}, instance)",
              "includeAll": false,
              "label": "Instance",
              "name": "node",
              "options": [],
              "query": {
                "query": "label_values(node_uname_info{job=\"$$job\"}, instance)",
                "refId": "Prometheus-node-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "sort": 1,
              "type": "query"
            }
          ]
        },
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "timepicker": {},
        "timezone": "browser",
        "title": "Node Exporter Full",
        "uid": "node_exporter_full",
        "version": 1,
        "weekStart": ""
      }
  cadvisor-dashboard.json:
    content: |
      {
        "__inputs": [
          {
            "name": "DS_PROMETHEUS",
            "label": "Prometheus",
            "description": "Prometheus as the datasource is obligatory",
            "type": "datasource",
            "pluginId": "prometheus",
            "pluginName": "Prometheus"
          }
        ],
        "__requires": [
          {
            "type": "grafana",
            "id": "grafana",
            "name": "Grafana",
            "version": "7.4.5"
          },
          {
            "type": "panel",
            "id": "timeseries",
            "name": "Time series",
            "version": ""
          },
          {
            "type": "datasource",
            "id": "prometheus",
            "name": "Prometheus",
            "version": "1.0.0"
          },
          {
            "type": "panel",
            "id": "table",
            "name": "Table",
            "version": ""
          }
        ],
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "gnetId": 14282,
        "graphTooltip": 0,
        "id": null,
        "panels": [
          {
            "collapsed": false,
            "datasource": "victoriametrics_uid",
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "id": 8,
            "panels": [],
            "title": "CPU",
            "type": "row"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 40,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "never",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "normal"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 7,
              "w": 24,
              "x": 0,
              "y": 1
            },
            "id": 15,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true,
                "width": 250
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "multi",
                "sort": "desc"
              }
            },
            "targets": [
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{instance=~\"$$host\",name=~\"$$container\",name=~\".+\"}[5m])) by (name) *100",
                "hide": false,
                "interval": "",
                "legendFormat": "{{name}}",
                "refId": "A"
              }
            ],
            "title": "CPU Usage",
            "type": "timeseries"
          }
        ],
        "schemaVersion": 27,
        "style": "dark",
        "tags": [
          "cadvisor",
          "docker"
        ],
        "templating": {
          "list": [
            {
              "allValue": ".*",
              "current": {},
              "datasource": "victoriametrics_uid",
              "definition": "label_values({__name__=~\"container.*\"},instance)",
              "description": null,
              "error": null,
              "hide": 0,
              "includeAll": true,
              "label": "Host",
              "multi": false,
              "name": "host",
              "options": [],
              "query": {
                "query": "label_values({__name__=~\"container.*\"},instance)",
                "refId": "Prometheus-host-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 5,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {},
              "datasource": "victoriametrics_uid",
              "definition": "label_values({__name__=~\"container.*\", instance=~\"$$host\"},name)",
              "description": null,
              "error": null,
              "hide": 0,
              "includeAll": true,
              "label": "Container",
              "multi": false,
              "name": "container",
              "options": [],
              "query": {
                "query": "label_values({__name__=~\"container.*\", instance=~\"$$host\"},name)",
                "refId": "Prometheus-container-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-6h",
          "to": "now"
        },
        "timepicker": {},
        "timezone": "",
        "title": "Cadvisor Container Monitoring",
        "uid": "cadvisor_monitoring",
        "version": 1,
        "description": "Container monitoring with cAdvisor"
      }
  blackbox-dashboard.json:
    content: |
      {
        "__inputs": [
          {
            "name": "DS_PROMETHEUS",
            "label": "prometheus",
            "description": "",
            "type": "datasource",
            "pluginId": "prometheus",
            "pluginName": "Prometheus"
          }
        ],
        "__requires": [
          {
            "type": "grafana",
            "id": "grafana",
            "name": "Grafana",
            "version": "5.2.2"
          },
          {
            "type": "panel",
            "id": "timeseries",
            "name": "Time series",
            "version": ""
          },
          {
            "type": "datasource",
            "id": "prometheus",
            "name": "Prometheus",
            "version": "5.0.0"
          },
          {
            "type": "panel",
            "id": "stat",
            "name": "Stat",
            "version": ""
          }
        ],
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Prometheus Blackbox Exporter Overview",
        "editable": true,
        "gnetId": 7587,
        "graphTooltip": 0,
        "id": null,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 10,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "never",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "s"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "id": 138,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "multi",
                "sort": "desc"
              }
            },
            "targets": [
              {
                "expr": "probe_duration_seconds{instance=~\"$$target\"}",
                "format": "time_series",
                "interval": "$$interval",
                "intervalFactor": 1,
                "legendFormat": "{{ instance }}",
                "refId": "A"
              }
            ],
            "title": "Global Probe Duration",
            "type": "timeseries"
          }
        ],
        "refresh": "10s",
        "schemaVersion": 16,
        "style": "dark",
        "tags": [
          "blackbox",
          "prometheus"
        ],
        "templating": {
          "list": [
            {
              "auto": true,
              "auto_count": 10,
              "auto_min": "10s",
              "current": {
                "text": "10s",
                "value": "10s"
              },
              "hide": 0,
              "label": "Interval",
              "name": "interval",
              "options": [
                {
                  "selected": false,
                  "text": "auto",
                  "value": "$$__auto_interval_interval"
                },
                {
                  "selected": false,
                  "text": "5s",
                  "value": "5s"
                },
                {
                  "selected": true,
                  "text": "10s",
                  "value": "10s"
                }
              ],
              "query": "5s,10s,30s,1m,10m,30m,1h,6h,12h,1d,7d,14d,30d",
              "refresh": 2,
              "type": "interval"
            },
            {
              "allValue": null,
              "current": {},
              "datasource": "victoriametrics_uid",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "target",
              "options": [],
              "query": "label_values(probe_success, instance)",
              "refresh": 1,
              "regex": "",
              "sort": 0,
              "type": "query"
            }
          ]
        },
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timezone": "",
        "title": "Blackbox Exporter",
        "uid": "blackbox_exporter",
        "version": 1
      }
  traefik-dashboard.json:
    content: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Traefik reverse proxy monitoring",
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "id": null,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 10,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "never",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "reqps"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "id": 1,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "multi",
                "sort": "none"
              }
            },
            "targets": [
              {
                "expr": "sum(rate(traefik_service_requests_total[5m])) by (service)",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "{{service}}",
                "refId": "A"
              }
            ],
            "title": "Request Rate by Service",
            "type": "timeseries"
          }
        ],
        "refresh": "30s",
        "schemaVersion": 27,
        "style": "dark",
        "tags": [
          "traefik",
          "proxy"
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timezone": "",
        "title": "Traefik Monitoring",
        "uid": "traefik_monitoring",
        "version": 1
      }
  crowdsec-dashboard.json:
    content: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "CrowdSec security monitoring",
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "id": null,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 1
                    }
                  ]
                },
                "unit": "short"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 0,
              "y": 0
            },
            "id": 1,
            "options": {
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto",
              "orientation": "auto",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "textMode": "auto",
              "wideLayout": true
            },
            "targets": [
              {
                "expr": "cs_lapi_decision{type=\"ban\"}",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "Active Bans",
                "refId": "A"
              }
            ],
            "title": "Active Bans",
            "type": "stat"
          }
        ],
        "refresh": "30s",
        "schemaVersion": 27,
        "style": "dark",
        "tags": [
          "crowdsec",
          "security"
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timezone": "",
        "title": "CrowdSec Security",
        "uid": "crowdsec_security",
        "version": 1
      }
  flaresolverr-dashboard.json:
    content: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Flaresolverr monitoring",
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "id": null,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "barWidthFactor": 0.6,
                  "drawStyle": "line",
                  "fillOpacity": 10,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "never",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green"
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "reqps"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "id": 1,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "hideZeros": false,
                "mode": "multi",
                "sort": "none"
              }
            },
            "targets": [
              {
                "expr": "rate(flaresolverr_requests_total[5m])",
                "format": "time_series",
                "intervalFactor": 1,
                "legendFormat": "Requests",
                "refId": "A"
              }
            ],
            "title": "Flaresolverr Request Rate",
            "type": "timeseries"
          }
        ],
        "refresh": "30s",
        "schemaVersion": 27,
        "style": "dark",
        "tags": [
          "flaresolverr"
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timezone": "",
        "title": "Flaresolverr Monitoring",
        "uid": "flaresolverr_monitoring",
        "version": 1
      }
  victoriametrics-dashboard.json:
    content: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "target": {
                "limit": 100,
                "matchAny": false,
                "tags": [],
                "type": "dashboard"
              },
              "type": "dashboard"
            }
          ]
        },
        "description": "Overview for single-node VictoriaMetrics",
        "editable": true,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 1,
        "id": null,
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "victoriametrics_uid"
            },
            "description": "How many datapoints are in storage",
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    }
                  ]
                },
                "unit": "short"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 2,
              "w": 5,
              "x": 0,
              "y": 0
            },
            "id": 26,
            "options": {
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto",
              "orientation": "horizontal",
              "reduceOptions": {
                "calcs": [
                  "lastNotNull"
                ],
                "fields": "",
                "values": false
              },
              "showPercentChange": false,
              "textMode": "auto",
              "wideLayout": true
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "victoriametrics_uid"
                },
                "editorMode": "code",
                "exemplar": false,
                "expr": "sum(vm_rows{job=~\"$$job\", instance=~\"$$instance\", type!~\"indexdb.*\"})",
                "format": "time_series",
                "instant": true,
                "interval": "",
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              }
            ],
            "title": "Total datapoints",
            "type": "stat"
          }
        ],
        "refresh": "",
        "schemaVersion": 40,
        "tags": [
          "victoriametrics"
        ],
        "templating": {
          "list": [
            {
              "current": {},
              "datasource": {
                "type": "prometheus",
                "uid": "victoriametrics_uid"
              },
              "definition": "label_values(vm_app_version{version=~\"victoria-metrics-.*\"}, job)",
              "includeAll": false,
              "name": "job",
              "options": [],
              "query": {
                "query": "label_values(vm_app_version{version=~\"victoria-metrics-.*\"}, job)",
                "refId": "VictoriaMetrics-job-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "type": "query"
            },
            {
              "allValue": ".*",
              "current": {},
              "datasource": {
                "type": "prometheus",
                "uid": "victoriametrics_uid"
              },
              "definition": "label_values(vm_app_version{job=~\"$$job\"}, instance)",
              "includeAll": true,
              "multi": true,
              "name": "instance",
              "options": [],
              "query": {
                "query": "label_values(vm_app_version{job=~\"$$job\"}, instance)",
                "refId": "VictoriaMetrics-instance-Variable-Query"
              },
              "refresh": 1,
              "regex": "",
              "type": "query"
            }
          ]
        },
        "time": {
          "from": "now-3h",
          "to": "now"
        },
        "timezone": "",
        "title": "VictoriaMetrics",
        "uid": "victoriametrics_single",
        "version": 1
      }
  loki.yaml:
    content: |
      # This is a complete configuration to deploy Loki backed by the filesystem.
      # The index will be shipped to the storage via tsdb-shipper.
      auth_enabled: false

      server:
        http_listen_port: ${LOKI_HTTP_LISTEN_PORT:-3100}

      common:
        ring:
          instance_addr: 127.0.0.1
          kvstore:
            store: inmemory
        replication_factor: 1
        path_prefix: /tmp/loki

      schema_config:
        configs:
        - from: 2020-05-15
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h

      storage_config:
        filesystem:
          directory: /tmp/loki/chunks
      limits_config:
        volume_enabled: true
  promtail.yaml:
    content: |
      server:
        http_listen_port: ${PROMTAIL_HTTP_LISTEN_PORT:-9080}
        grpc_listen_port: ${PROMTAIL_GRPC_LISTEN_PORT:-0}

      positions:
        filename: /tmp/positions.yaml

      clients:
        - url: http://loki:${LOKI_PORT:-3100}/loki/api/v1/push

      scrape_configs:
        # 🔑 Scrape Docker container logs
        - job_name: docker
          docker_sd_configs:
            - host: unix:///var/run/docker.sock
          relabel_configs:
            - source_labels: ["__meta_docker_container_name"]
              target_label: "container"
              regex: "/(.*)"
              replacement: "$1"

        # 🔑 Scrape host syslog and other files
        - job_name: system-logs
          static_configs:
            - targets:
                - localhost
              labels:
                job: varlogs
                __path__: /var/log/*.log

        # 🔑 Scrape custom mounted logs
        - job_name: extra-logs
          static_configs:
            - targets:
                - localhost
              labels:
                job: extralogs
                __path__: /mnt/extra-logs/*.log

services:
  # VictoriaMetrics initialization container
  init_victoriametrics:
    image: docker.io/victoriametrics/victoria-metrics:v1.119.0
    container_name: init_victoriametrics
    hostname: init_victoriametrics
    extra_hosts:
      - host.docker.internal:host-gateway
    user: root
    entrypoint: /bin/sh -c "chown -R 65534:65534 /storage && chmod -R 755 /storage"
    volumes:
      - ${CONFIG_PATH:-./volumes}/victoriametrics:/storage
    restart: no

  victoriametrics:
    depends_on:
      init_victoriametrics:
        condition: service_completed_successfully
    image: docker.io/victoriametrics/victoria-metrics:v1.119.0
    container_name: victoriametrics
    hostname: victoriametrics
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - backend
    expose:
      - ${VICTORIAMETRICS_PORT:-8428}  # VM UI
    volumes:
      - ${CONFIG_PATH:-./volumes}/victoriametrics:/storage
    environment:
      # VictoriaMetrics specific environment variables
      VM_RETENTION_PERIOD: ${VICTORIAMETRICS_RETENTION_PERIOD:-1y}
      VM_MEMORY_ALLOWED_PERCENT: ${VICTORIAMETRICS_MEMORY_ALLOWED_PERCENT:-60}
      VM_SEARCH_MAX_CONCURRENT_REQUESTS: ${VICTORIAMETRICS_SEARCH_MAX_CONCURRENT_REQUESTS:-8}
      VM_INSERT_MAX_CONCURRENT_REQUESTS: ${VICTORIAMETRICS_INSERT_MAX_CONCURRENT_REQUESTS:-32}
    command:
      - "--bigMergeConcurrency=${VICTORIAMETRICS_BIG_MERGE_CONCURRENCY:-0}"
      - "--dedup.minScrapeInterval=${VICTORIAMETRICS_DEDUP_MIN_SCRAPE_INTERVAL:-0s}"
      - "--enableTCP6=${VICTORIAMETRICS_ENABLE_TCP6:-false}"
      - "--finalMergeDelay=${VICTORIAMETRICS_FINAL_MERGE_DELAY:-0s}"
      - "--http.maxGracefulShutdownDuration=${VICTORIAMETRICS_MAX_GRACEFUL_SHUTDOWN_DURATION:-7s}"
      - "--http.shutdownDelay=${VICTORIAMETRICS_SHUTDOWN_DELAY:-0s}"
      - "--httpListenAddr=:${VICTORIAMETRICS_PORT:-8428}"
      - "--influx.maxLineSize=${VICTORIAMETRICS_INFLUX_MAX_LINE_SIZE:-262144}"
      - "--loggerFormat=${VICTORIAMETRICS_LOG_FORMAT:-default}"
      - "--loggerLevel=${VICTORIAMETRICS_LOG_LEVEL:-INFO}"
      - "--memory.allowedPercent=${VICTORIAMETRICS_MEMORY_ALLOWED_PERCENT:-60}"
      - "--promscrape.maxScrapeSize=${VICTORIAMETRICS_PROMSCRAPE_MAX_SCRAPE_SIZE:-16777216}"
      - "--retentionPeriod=${VICTORIAMETRICS_RETENTION_PERIOD:-1y}"
      - "--search.maxConcurrentRequests=${VICTORIAMETRICS_SEARCH_MAX_CONCURRENT_REQUESTS:-8}"
      - "--search.maxMemoryPerQuery=${VICTORIAMETRICS_SEARCH_MAX_MEMORY_PER_QUERY:-1GB}"
      - "--search.maxPointsPerTimeseries=${VICTORIAMETRICS_SEARCH_MAX_POINTS_PER_TIMESERIES:-30000}"
      - "--search.maxQueryDuration=${VICTORIAMETRICS_SEARCH_MAX_QUERY_DURATION:-30s}"
      - "--search.maxSeries=${VICTORIAMETRICS_SEARCH_MAX_SERIES:-30000}"
      - "--search.maxTagKeys=${VICTORIAMETRICS_SEARCH_MAX_TAG_KEYS:-100000}"
      - "--search.maxTagValues=${VICTORIAMETRICS_SEARCH_MAX_TAG_VALUES:-100000}"
      - "--search.maxUniqueTimeseries=${VICTORIAMETRICS_SEARCH_MAX_UNIQUE_TIMESERIES:-300000}"
      - "--smallMergeConcurrency=${VICTORIAMETRICS_SMALL_MERGE_CONCURRENCY:-0}"
      - "--storageDataPath=/storage"
    labels:
      # Prometheus metrics
      prometheus.io/scrape: true
      prometheus.io/port: ${VICTORIAMETRICS_PORT:-8428}
      prometheus.io/path: /metrics
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:${VICTORIAMETRICS_PORT:-8428}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
  init_prometheus:
    image: docker.io/prom/prometheus
    container_name: init_prometheus
    hostname: init_prometheus
    extra_hosts:
      - host.docker.internal:host-gateway
    user: root
    entrypoint: /bin/sh -c "chown -R 65534:65534 /prometheus"
    volumes:
      - ${CONFIG_PATH:-./volumes}/prometheus/data:/prometheus
    restart: no

  prometheus:
    depends_on:
      init_prometheus:
        condition: service_completed_successfully
      victoriametrics:
        condition: service_healthy
    image: docker.io/prom/prometheus
    container_name: prometheus
    hostname: prometheus
    networks:
      - backend
      - publicnet
    extra_hosts:
      - host.docker.internal:host-gateway
    expose:
      - 9090
    volumes:
      - ${CONFIG_PATH:-./volumes}/prometheus/data:/prometheus
    environment:
      # Prometheus specific environment variables
      PROMETHEUS_RETENTION_TIME: ${PROMETHEUS_RETENTION_TIME:-15d}
      PROMETHEUS_RETENTION_SIZE: ${PROMETHEUS_RETENTION_SIZE:-0}
      PROMETHEUS_QUERY_MAX_CONCURRENCY: ${PROMETHEUS_QUERY_MAX_CONCURRENCY:-20}
      PROMETHEUS_QUERY_TIMEOUT: ${PROMETHEUS_QUERY_TIMEOUT:-2m}
      PROMETHEUS_QUERY_MAX_SAMPLES: ${PROMETHEUS_QUERY_MAX_SAMPLES:-50000000}
      PROMETHEUS_WEB_MAX_CONNECTIONS: ${PROMETHEUS_WEB_MAX_CONNECTIONS:-512}
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
        mode: 0444
      - source: alert.rules
        target: /etc/prometheus/alert.rules
        mode: 0444
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.format=${PROMETHEUS_LOG_FORMAT:-logfmt}'
      - '--log.level=${PROMETHEUS_LOG_LEVEL:-info}'
      - '--query.max-concurrency=${PROMETHEUS_QUERY_MAX_CONCURRENCY:-20}'
      - '--query.max-samples=${PROMETHEUS_QUERY_MAX_SAMPLES:-50000000}'
      - '--query.timeout=${PROMETHEUS_QUERY_TIMEOUT:-2m}'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-0}'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-admin-api'
      - '--web.enable-lifecycle'
      - '--web.max-connections=${PROMETHEUS_WEB_MAX_CONNECTIONS:-512}'
    labels:
      traefik.enable: true
      traefik.http.routers.prometheus.middlewares: nginx-auth@file  # TODO: specify backend ipv4 cidr and whitelist in nginx-traefik-extensions conf.
      traefik.http.routers.prometheus.rule: Host(`prometheus.$DOMAIN`) || Host(`prometheus.$TS_HOSTNAME.$DOMAIN`)
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      homepage.group: Infrastructure
      homepage.name: Prometheus
      homepage.icon: prometheus.png
      homepage.href: https://prometheus.$DOMAIN
      homepage.description: Prometheus is an open-source monitoring system with a dimensional data model, flexible query language, efficient time series database, and modern alerting approach.
      homepage.widget.type: prometheus
      homepage.widget.url: http://prometheus:9090
      kuma.prometheus.http.name: prometheus.$TS_HOSTNAME.$DOMAIN
      kuma.prometheus.http.url: https://prometheus.$DOMAIN
      kuma.prometheus.http.interval: 60
      # Prometheus metrics
      prometheus.io/scrape: true
      prometheus.io/port: 9090
      prometheus.io/path: /metrics
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
  grafana:  # Dashboards
    depends_on:
      prometheus:
        condition: service_healthy
    image: docker.io/grafana/grafana
    container_name: grafana
    hostname: grafana
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - backend
      - publicnet
    expose:
      - 3000
    environment:
      # Enhanced plugin list including VictoriaMetrics datasource and monitoring plugins
      GF_PLUGINS_PREINSTALL: grafana-piechart-panel,grafana-worldmap-panel,natel-discrete-panel,flant-statusmap-panel,vonage-status-panel,michaeldmoore-multistat-panel,grafana-polystat-panel,marcusolsson-dynamictext-panel,yesoreyeram-boomtable-panel,grafana-clock-panel,grafana-simple-json-datasource,btplc-status-dot-panel,camptocamp-prometheus-alertmanager-datasource
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-info}  # For detailed logs
      GF_PATHS_PROVISIONING: ${GF_PATHS_PROVISIONING:-/etc/grafana/provisioning}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:?}
      GF_SERVER_DOMAIN: ${GF_FQDN:-grafana.$DOMAIN}
      GF_SERVER_ROOT_URL: ${GF_URL:-https://${GF_FQDN:-grafana.$DOMAIN}}
      GF_SERVER_SERVE_FROM_SUB_PATH: ${GF_SERVE_FROM_SUB_PATH:-false}  # Explicitly disable if no subpath
      # VictoriaMetrics specific settings
      GF_FEATURE_TOGGLES_ENABLE: ${GF_FEATURE_TOGGLES_ENABLE:-}
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: ${GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS:-victoriametrics-datasource}
      # Enhanced security and performance settings
      GF_SECURITY_COOKIE_SECURE: ${GF_SECURITY_COOKIE_SECURE:-true}
      GF_SECURITY_COOKIE_SAMESITE: ${GF_SECURITY_COOKIE_SAMESITE:-lax}
      GF_SECURITY_CONTENT_TYPE_PROTECTION: ${GF_SECURITY_CONTENT_TYPE_PROTECTION:-true}
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: ${GF_SECURITY_X_CONTENT_TYPE_OPTIONS:-nosniff}
      GF_SECURITY_X_XSS_PROTECTION: ${GF_SECURITY_X_XSS_PROTECTION:-true}
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: ${GF_SECURITY_STRICT_TRANSPORT_SECURITY:-true}
      GF_USERS_ALLOW_SIGN_UP: ${GF_USERS_ALLOW_SIGN_UP:-false}
      GF_USERS_ALLOW_ORG_CREATE: ${GF_USERS_ALLOW_ORG_CREATE:-false}
      GF_USERS_AUTO_ASSIGN_ORG: ${GF_USERS_AUTO_ASSIGN_ORG:-true}
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: ${GF_USERS_AUTO_ASSIGN_ORG_ROLE:-Viewer}
      # Performance settings
      GF_DATABASE_MAX_IDLE_CONN: ${GF_DATABASE_MAX_IDLE_CONN:-2}
      GF_DATABASE_MAX_OPEN_CONN: ${GF_DATABASE_MAX_OPEN_CONN:-0}
      GF_DATABASE_CONN_MAX_LIFETIME: ${GF_DATABASE_CONN_MAX_LIFETIME:-14400}
      # Email settings (using your contact email)
      GF_SMTP_ENABLED: ${GF_SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${GF_SMTP_HOST:-localhost:587}
      GF_SMTP_USER: ${GF_SMTP_USER:-}
      GF_SMTP_PASSWORD: ${GF_SMTP_PASSWORD:-}
      GF_SMTP_FROM_ADDRESS: ${GF_SMTP_FROM_ADDRESS:-contact@bolabaden.org}
      GF_SMTP_FROM_NAME: ${GF_SMTP_FROM_NAME:-Grafana}
    configs:
      - source: grafana.ini
        target: /etc/grafana/grafana.ini
        mode: 0777
      - source: grafana-datasource.yaml
        target: /etc/grafana/provisioning/datasources/grafana-datasource.yaml
        mode: 0777
      - source: grafana-dashboard.yaml
        target: /etc/grafana/provisioning/dashboards/grafana-dashboard.yaml
        mode: 0777
      - source: grafana-alerting.yaml
        target: /etc/grafana/provisioning/alerting/grafana-alerting.yaml
        mode: 0777
      - source: grafana-notifications.yaml
        target: /etc/grafana/provisioning/notifiers/grafana-notifications.yaml
        mode: 0777
      - source: grafana-plugins.yaml
        target: /etc/grafana/provisioning/plugins/grafana-plugins.yaml
        mode: 0777
      - source: node-exporter-dashboard.json
        target: /var/lib/grafana/dashboards/system/node-exporter-dashboard.json
        mode: 0777
      - source: cadvisor-dashboard.json
        target: /var/lib/grafana/dashboards/infrastructure/cadvisor-dashboard.json
        mode: 0777
      - source: blackbox-dashboard.json
        target: /var/lib/grafana/dashboards/network/blackbox-dashboard.json
        mode: 0777
      - source: traefik-dashboard.json
        target: /var/lib/grafana/dashboards/infrastructure/traefik-dashboard.json
        mode: 0777
      - source: crowdsec-dashboard.json
        target: /var/lib/grafana/dashboards/infrastructure/crowdsec-dashboard.json
        mode: 0777
      - source: flaresolverr-dashboard.json
        target: /var/lib/grafana/dashboards/apps/flaresolverr-dashboard.json
        mode: 0777
      - source: victoriametrics-dashboard.json
        target: /var/lib/grafana/dashboards/infrastructure/victoriametrics-dashboard.json
        mode: 0777
      - source: crowdsec-profiles.yaml
        target: /etc/grafana/provisioning/crowdsec-profiles.yaml
        mode: 0777
    volumes:
      - ${CONFIG_PATH:-./volumes}/grafana/dashboards:/var/lib/grafana/dashboards
      - ${CONFIG_PATH:-./volumes}/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting
      - ${CONFIG_PATH:-./volumes}/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ${CONFIG_PATH:-./volumes}/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ${CONFIG_PATH:-./volumes}/grafana/provisioning/plugins:/etc/grafana/provisioning/plugins
      - ${CONFIG_PATH:-./volumes}/grafana/provisioning/notifiers:/etc/grafana/provisioning/notifiers
      - ${CONFIG_PATH:-./volumes}/grafana/logs:/data/log
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.$DOMAIN`) || Host(`grafana.$TS_HOSTNAME.$DOMAIN`)
      traefik.http.services.grafana.loadbalancer.server.port: 3000
      homepage.group: Infrastructure
      homepage.name: Grafana
      homepage.icon: grafana.png
      homepage.href: https://grafana.$DOMAIN
      homepage.description: Grafana is an open-source platform for monitoring and observability.
      kuma.grafana.http.name: grafana.$TS_HOSTNAME.$DOMAIN
      kuma.grafana.http.url: https://grafana.$DOMAIN
      kuma.grafana.http.interval: 60
      # Prometheus metrics
      prometheus.io/scrape: true
      prometheus.io/port: 3000
      prometheus.io/path: metrics
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

  # Node Exporter for system metrics
  node_exporter:
    image: docker.io/prom/node-exporter
    container_name: node_exporter
    hostname: node_exporter
    networks:
      - backend
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
      - /etc/machine-id:/etc/machine-id:ro
      # Add /run/udev/data to avoid "Failed to open directory, disabling udev device properties" warning
      - /run/udev/data:/run/udev/data:ro
    environment:
      - DBUS_SESSION_BUS_ADDRESS=unix:path=/var/run/dbus/system_bus_socket
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.cpu.info'
      # Use the new --collector.diskstats.device-exclude flag instead of deprecated --collector.diskstats.ignored-devices
      - '--collector.diskstats.device-exclude=^(ram|loop|fd|(h|s|v)d[a-z]|nvme\d+n\d+p)\d+$'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
      - '--collector.interrupts'
      - '--collector.processes'
      - '--collector.systemd'
      # Add recommended systemd collector flags to avoid noisy logs and improve compatibility
      - '--collector.systemd.unit-include=.*'
      - '--collector.systemd.unit-exclude=.+\.(automount|device|mount|scope|slice)'
      # Add recommended filesystem fs-types-exclude to match node_exporter best practices
      - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$'
    labels:
      prometheus.io/scrape: true
      prometheus.io/port: 9100
      prometheus.io/path: metrics
    restart: always

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    hostname: cadvisor
    networks:
      - backend
      - publicnet
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    command:
      - '--housekeeping_interval=${CADVISOR_HOUSEKEEPING_INTERVAL:-30s}'
      - '--docker_only=${CADVISOR_DOCKER_ONLY:-true}'
      - '--disable_metrics=${CADVISOR_DISABLE_METRICS:-cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp}'
      - '--store_container_labels=${CADVISOR_STORE_CONTAINER_LABELS:-false}'
    labels:
      traefik.enable: true
      traefik.http.routers.cadvisor.middlewares: nginx-auth@file
      traefik.http.routers.cadvisor.rule: Host(`cadvisor.$DOMAIN`) || Host(`cadvisor.$TS_HOSTNAME.$DOMAIN`)
      traefik.http.services.cadvisor.loadbalancer.server.port: 8080
      homepage.group: Monitoring
      homepage.name: cAdvisor
      homepage.icon: https://raw.githubusercontent.com/google/cadvisor/master/logo.png
      homepage.href: https://cadvisor.$DOMAIN/
      homepage.description: Container resource usage and performance characteristics
      kuma.cadvisor.http.name: cadvisor.$TS_HOSTNAME.$DOMAIN
      kuma.cadvisor.http.url: https://cadvisor.$DOMAIN
      kuma.cadvisor.http.interval: 60
      # Prometheus metrics
      prometheus.io/scrape: true
      prometheus.io/port: 8080
      prometheus.io/path: metrics
    restart: always
  loki:  # Logs
    image: docker.io/grafana/loki
    container_name: loki
    hostname: loki
    networks:
      - backend
      - publicnet
    expose:
      - 3100  # Loki API endpoint
    configs:
      - source: loki.yaml
        target: /etc/loki/config.yaml
        mode: 0777
    volumes:
      - ${CONFIG_PATH:-./volumes}/loki/data:/loki
    command: -config.file=/etc/loki/config.yaml
    restart: always

  promtail:
    depends_on:
      - loki
      - dockerproxy-ro
    image: docker.io/grafana/promtail
    container_name: promtail
    hostname: promtail
    networks:
      - backend
      - publicnet
    extra_hosts:
      - host.docker.internal:host-gateway
    configs:
      - source: promtail.yaml
        target: /etc/promtail/config.yaml
        mode: 0777
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    environment:
      - DOCKER_HOST=tcp://dockerproxy-ro:9323
    command: -config.file=/etc/promtail/config.yaml
    restart: always

  # Blackbox Exporter for endpoint monitoring
  blackbox-exporter:
    image: docker.io/prom/blackbox-exporter
    container_name: blackbox-exporter
    hostname: blackbox-exporter
    networks:
      - backend
      - publicnet
    extra_hosts:
      - host.docker.internal:host-gateway
    expose:
      - 9115
    configs:
      - source: blackbox.yml
        target: ${BLACKBOX_INTERNAL_CONFIG_PATH:-/etc/blackbox_exporter/config.yml}
        mode: 0777
    command:
      - '--config.file=${BLACKBOX_INTERNAL_CONFIG_PATH:-/etc/blackbox_exporter/config.yml}'
      - '--log.level=${BLACKBOX_LOG_LEVEL:-info}'
      - '--log.format=${BLACKBOX_LOG_FORMAT:-logfmt}'
    labels:
      traefik.enable: true
      traefik.http.routers.blackbox-exporter.rule: Host(`blackbox.$DOMAIN`) || Host(`blackbox.$TS_HOSTNAME.$DOMAIN`)
      traefik.http.services.blackbox-exporter.loadbalancer.server.port: 9115
      homepage.group: Monitoring
      homepage.name: Blackbox Exporter
      homepage.icon: prometheus.png
      homepage.href: https://blackbox.$DOMAIN/
      homepage.description: Blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP
      kuma.blackbox-exporter.http.name: blackbox.$TS_HOSTNAME.$DOMAIN
      kuma.blackbox-exporter.http.url: https://blackbox.$DOMAIN
      kuma.blackbox-exporter.http.interval: 60
      # Prometheus metrics
      prometheus.io/scrape: true
      prometheus.io/port: 9115
      prometheus.io/path: metrics
    restart: always
