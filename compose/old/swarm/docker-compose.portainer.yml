# ðŸ”¹ðŸ”¹ Portainer (swarm) ðŸ”¹ðŸ”¹

x-common-env: &common-env
  TZ: ${TZ:-America/Chicago}

x-common-uidgid: &common-uidgid
  user: ${PUID:-1002}:${PGID:-988}

x-resource-limits: &resource-limits
  cpu_shares: 1024
  labels:
    autoheal: "true"

x-portainer-labels: &portainer-labels
  traefik.enable: "true"
  traefik.http.routers.portainer.rule: Host(`portainer.$DOMAIN`)
  traefik.http.routers.portainer.entrypoints: web
  traefik.http.services.portainer.loadbalancer.server.port: 9000
  traefik.http.routers.portainer.service: portainer
  # Edge
  traefik.http.routers.edge.rule: Host(`edge.$DOMAIN`)
  traefik.http.routers.edge.entrypoints: web
  traefik.http.services.edge.loadbalancer.server.port: 8000
  traefik.http.routers.edge.service: edge

services:
  portainer:
    image: portainer/portainer-ce:lts
    container_name: portainer
    hostname: portainer
    command: -H tcp://${PORTAINER_AGENT_CLUSTER_ADDR:-tasks.agent}:${PORTAINER_AGENT_PORT:-9001} --tlsskipverify
    volumes:
      - data:/data
    networks:
      - public
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        <<: *portainer-labels
  portainer-agent:
    image: portainer/agent:lts
    container_name: portainer-agent
    hostname: portainer-agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: ${PORTAINER_AGENT_CLUSTER_ADDR:-tasks.agent}
      AGENT_PORT: ${PORTAINER_AGENT_PORT:-9001}
      LOG_LEVEL: ${PORTAINER_AGENT_LOG_LEVEL:-info}
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock
      - ${DOCKER_VOLUMES:-/var/lib/docker/volumes}:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

networks:
  public:  #  docker network create -d overlay public
    external: true
  agent_network:  #  docker network create -d overlay agent_network
    external: true

volumes:  #  docker volume create portainer_data
   data: