
secrets:
  traefik_forward_auth:
    file: ${SECRETS_DIR:-./secrets}/traefik_forward_auth.txt

x-common-env: &common-env
  PGID: ${PGID:-988}  # 'docker' Group ID
  PUID: ${PUID:-1002}  # A non-root user ID
  TZ: ${TZ:-America/Chicago}  # Your Timezone

x-swarm-resource-limits: &swarm-resource-limits
  resources:
    limits:
      cpus: '0.10'
      memory: 1024M
#    reservations:
 #     cpus: '0.05'
  #    memory:  256M

x-resource-limits: &resource-limits
  cpu_shares: 1024        # CPU share weight (relative, 2-262144). Higher = more CPU *if competing*.
#  mem_limit: 512m        # Max RAM usage (e.g., 64m, 1g). Exceeding = container kill.
#  mem_reservation: 325m  # Soft RAM limit (e.g., 32m, 512m).  Best effort, not guaranteed.
#  mem_swappiness: 30      # Swap usage (0-100). 0 = off. Higher = more swap, may slow down container.
  #memswap_limit: 1024m    # Max RAM + Swap.  Usually same as mem_limit.
  labels:
    autoheal: 'true'

x-common-deploy: &common-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    window: 120s
  labels:
    autoheal: 'true'
    swarm.autoscaler: 'true'

x-traefik-labels: &traefik-labels
  traefik.enable: "true"
  traefik.http.middlewares.admin-auth.basicauth.users: ${TRAEFIK_USERNAME:-admin}:${TRAEFIK_HASHED_PASSWORD:-$$apr1$$89eqM5Ro$$CxaFELthUKV21DpI3UTQO.}
  traefik.http.services.api@internal.loadbalancer.server.port: ${TRAEFIK_DASHBOARD_PORT:-8099}
  homepage.group: Infrastructure
  homepage.name: Traefik
  homepage.icon: traefik
  homepage.href: https://traefik.$DOMAIN
  homepage.description: Reverse proxy
  homepage.widget.type: traefik
  homepage.widget.url: http://traefik.$DOMAIN
  homepage.widget.fields: '["routers", "services", "middleware"]'

x-traefik-forward-auth-labels: &traefik-forward-auth-labels
  traefik.enable: "true"
  traefik.docker.network: auth-net
  traefik.http.routers.auth-rtr.rule: Host(`auth.$DOMAIN`)
  traefik.http.routers.auth-rtr.entrypoints: websecure
  traefik.http.routers.auth-rtr.middlewares: traefik-forward-auth
  traefik.http.routers.auth-rtr.tls: "true"
  traefik.http.routers.auth-rtr.tls.certresolver: myresolver
  traefik.http.services.traefik-forward-auth-svc.loadbalancer.server.port: ${AUTH_PORT:-4181}

services:
  duckdns:
    # ðŸ”¹ðŸ”¹ DuckDNS ðŸ”¹ðŸ”¹
    image: linuxserver/duckdns
    container_name: duckdns
    hostname: duckdns
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - traefik_public
    environment:
      <<: *common-env
      SUBDOMAINS: $DUCKDNS_SUBDOMAIN
      TOKEN: $DUCKDNS_TOKEN
    deploy:
      <<: *common-deploy
    restart: always

  traefik: 
    # ðŸ”¹ðŸ”¹ Traefik ðŸ”¹ðŸ”¹
    depends_on:
      duckdns:
        condition: service_healthy
    image: traefik
    container_name: traefik
    hostname: traefik
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - traefik_public
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - ${TRAEFIK_WEB_PORT:-80}:${TRAEFIK_WEB_PORT:-80}
      # Listen on port 443, default for HTTPS
      - ${TRAEFIK_WEBSECURE_PORT:-443}:${TRAEFIK_WEBSECURE_PORT:-443}
      # Listen on port 8099, default for the Traefik API and Dashboard
      - ${TRAEFIK_DASHBOARD_PORT:-8099}:${TRAEFIK_DASHBOARD_PORT:-8099}
    cap_add:
      - NET_ADMIN
    sysctls:
      net.ipv6.conf.all.disable_ipv6: ${DISABLE_IPV6:-1}
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - ${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock:ro
      - ${ROOT_DIR:-.}/configs/letsencrypt:/letsencrypt
      - ${ROOT_DIR:-.}/.htpasswd:/.htpasswd
#      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *common-env
      # Note: The environment variable names can be suffixed by _FILE to reference a file instead of a value
      DUCKDNS_HTTP_TIMEOUT: ${DUCKDNS_HTTP_TIMEOUT:-90}  # API request timeout in seconds (Default: 30)
      DUCKDNS_POLLING_INTERVAL: ${DUCKDNS_POLLING_INTERVAL:-2}  # Time between DNS propagation check in seconds (Default: 2)
      DUCKDNS_PROPAGATION_TIMEOUT: ${DUCKDNS_PROPAGATION_TIMEOUT:-120}  # Maximum waiting time for DNS propagation in seconds (Default: 60)
      DUCKDNS_SEQUENCE_INTERVAL: ${DUCKDNS_SEQUENCE_INTERVAL:-120}  # Time between sequential requests in seconds (Default: 60)
      DUCKDNS_TOKEN: $DUCKDNS_TOKEN
      DUCKDNS_TTL: ${DUCKDNS_TTL:-120}  # TTL for DNS records in seconds (Default: 120)
#      CLOUDFLARE_EMAIL: $CLOUDFLARE_EMAIL
#      CLOUDFLARE_DNS_API_TOKEN: $CLOUDFLARE_DNS_API_TOKEN
#      CLOUDFLARE_ZONE_API_TOKEN: $CLOUDFLARE_ZONE_API_TOKEN
      LETS_ENCRYPT_EMAIL: $LETS_ENCRYPT_EMAIL
    command:
      - --ping=${TRAEFIK_PING:-true}
      #- --providers.docker  # Enable Docker in Traefik, so that it reads labels from Docker services
      #- --providers.docker.exposedbydefault=${TRAEFIK_DOCKER_EXPOSED_BY_DEFAULT:-false}  # Don't expose services by default, only the ones that have the label "traefik.expose=true"
      - --providers.swarm  # Enable the Swarm provider, so that it reads labels from Docker services
      - --providers.swarm.exposedbydefault=${TRAEFIK_SWARM_EXPOSED_BY_DEFAULT:-false}  # Don't expose services by default, only the ones that have the label "traefik.expose=true"
      - --entrypoints.web.address=:${TRAEFIK_WEB_PORT:-80}
      - --entrypoints.web.http.redirections.entryPoint.permanent=${TRAEFIK_WEB_REDIRECTIONS_ENTRY_POINT_PERMANENT:-false}
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https  # The redirection target scheme (optional, default: https)
      - --entrypoints.websecure.address=:${TRAEFIK_WEBSECURE_PORT:-443}
      #- --entrypoints.websecure.http.encodequerysemicolons=false  # One could use this option to avoid non-encoded semicolons to be interpreted as query parameter separators by Traefik.  When using this option, the non-encoded semicolons characters in query will be transmitted encoded to the backend.
      ##############################
      # HTTPS/SSL
      ##############################
      - --entrypoints.websecure.http.tls=${TRAEFIK_TLS:-true}
      - --entrypoints.websecure.http.tls.certResolver=myresolver
      # Use the DNS challenges instead of HTTP/TLS challenges.
      - --certificatesresolvers.myresolver.acme.dnschallenge=${TRAEFIK_DNS_CHALLENGES:-true}
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${TRAEFIK_DNS_CHALLENGE_PROVIDER:-duckdns}
      #- --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=${TRAEFIK_DNS_CHALLENGE_RESOLVERS:-1.1.1.1:53,8.8.8.8:53}
      #- --certificatesresolvers.myresolver.acme.dnschallenge.delayBeforeCheck=${TRAEFIK_DNS_CHALLENGE_DELAY_BEFORE_CHECK:-60}
      # Use the TLS challenges instead of HTTP/DNS challenges.
      - --certificatesresolvers.myresolver.acme.tlschallenge=${TRAEFIK_TLS_CHALLENGE:-true}
      # Use HTTP challenges instead of TLS/DNS challenges.
      - --certificatesresolvers.myresolver.acme.httpchallenge=${TRAEFIK_HTTP_CHALLENGE:-true}
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=${TRAEFIK_HTTP_CHALLENGE_ENTRYPOINT:-web}
      - --certificatesresolvers.myresolver.acme.email=$TRAEFIK_EMAIL
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"  # Let's Encrypt has a limit: 5 certs generated a week. Use staging when breaking things. see https://doc.traefik.io/traefik/https/acme/#caserver
      - --certificatesresolvers.myresolver.acme.caserver=${TRAEFIK_ACME_CASERVER:-https://acme.zerossl.com/v2/DV90}  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.
      - --certificatesresolvers.myresolver.acme.eab.kid=$TRAEFIK_EAB_KID  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.
      - --certificatesresolvers.myresolver.acme.eab.hmacencoded=$TRAEFIK_EAB_HMAC_KEY  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.
      # Domain name the certificates will be issued for.
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAIN
      ##########################################
      # API
      ##########################################
      - --api  # Enable api/dashboard. When set to true, its sub option api.dashboard is also set to true.
      - --api.dashboard=${TRAEFIK_API_DASHBOARD:-true}  # Enable dashboard (default: false)
      - --api.debug=${TRAEFIK_API_DEBUG:-true}  # Enable additional endpoints for debugging and profiling (default: false)
      - --api.disabledashboardad=${TRAEFIK_API_DISABLE_DASHBOARD_AD:-true}  # Disable the advertisement from the dashboard (default: false)
      - --api.insecure=${TRAEFIK_API_INSECURE:-true}  # Enable the API and the dashboard on the entryPoint named traefik (default: false)
      - --accesslog=${TRAEFIK_ACCESS_LOG:-true}  # Enable the access log, with HTTP requests
      - --log  # Enable the Traefik log, for configurations and errors
      - --log.level=${TRAEFIK_LOG_LEVEL:-DEBUG}
      ##########################################
      # Plugins
      ##########################################
      # A plugin to block abusive clients based on IP address.
#      - --experimental.plugins.fail2ban.modulename=github.com/tomMoulard/fail2ban
#      - --experimental.plugins.fail2ban.version=v0.8.3
      # A free and open-source software to start workloads on demand and stop them after a period of inactivity.
      # Think of it a bit like a serverless platform, but for your own servers.
#      - --experimental.plugins.sablier.modulename=github.com/sablierapp/sablier
#      - --experimental.plugins.sablier.version=v1.8.4
      # A plugin to cache responses from your services, written in Go.
      # https://plugins.traefik.io/plugins/6294728cffc0cd18356a97c2/souin
#      - --experimental.plugins.souin.modulename=github.com/darkweak/souin
#      - --experimental.plugins.souin.version=v1.7.5
      # This plugin aims to implement a Crowdsec Bouncer in a Traefik plugin.
      # CrowdSec is an open-source and collaborative IPS (Intrusion Prevention System) and a security suite. We leverage local behavior analysis and crowd power to build the largest CTI network in the world.
      # The purpose is to enable Traefik to authorize or block requests from IPs based on their reputation and behavior.
      # https://plugins.traefik.io/plugins/6335346ca4caa9ddeffda116/crowdsec-bouncer-traefik-plugin
#      - --experimental.plugins.crowdsec-bouncer-traefik-plugin.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
#      - --experimental.plugins.crowdsec-bouncer-traefik-plugin.version=v1.4.1
      # If Traefik is behind a Cloudflare Proxy/Tunnel, it won't be able to get the real IP from the external client as well as other information.
      # This plugin solves this issue by overwriting the X-Real-IP and X-Forwarded-For with an IP from the CF-Connecting-IP header.
      # The real IP will be the Cf-Connecting-IP if request is come from cloudflare ( truest ip in configuration file).
      # The plugin also writes the CF-Visitor scheme to the X-Forwarded-Proto. (This fixes an infinite redirect issue for wordpress when using CF[443]->PROXY/TUNNEL->Traefik[80]->WP[80])
      # https://plugins.traefik.io/plugins/62e97498e2bf06d4675b9443/real-ip-from-cloudflare-proxy-tunnel
#      - --experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp
#      - --experimental.plugins.cloudflarewarp.version=v1.3.3
      # Simple cache plugin middleware caches responses on disk.
      # https://plugins.traefik.io/plugins/62947353108ecc83915d778d/simple-cache
#      - --experimental.plugins.plugin-simplecache.modulename=github.com/traefik/plugin-simplecache
#      - --experimental.plugins.plugin-simplecache.version=v0.2.1
      # A simple, cookie based Traefik middleware plugin for HTTP Basic or mTLS Single Sign-on
      # https://plugins.traefik.io/plugins/64a53f2e498e334469bdbd28/trauth
#      - --experimental.plugins.trauth.modulename=github.com/leonjza/trauth
#      - --experimental.plugins.trauth.version=v1.6.7
      # A middleware plugin for Traefik which blocks JNDI attacks based on HTTP header values.
      # https://plugins.traefik.io/plugins/628c9ec2ffc0cd18356a97a2/log4-shell
#      - --experimental.plugins.plugin-log4shell.modulename=github.com/traefik/plugin-log4shell
#      - --experimental.plugins.plugin-log4shell.version=v0.1.2
      # Apply themes from http://theme.park to supported applications.
      # https://plugins.traefik.io/plugins/62947288ffc0cd18356a97c1/theme-park
#      - --experimental.plugins.traefik-themepark.modulename=github.com/packruler/traefik-themepark
#      - --experimental.plugins.traefik-themepark.version=v1.4.2
      # Allows users to authenticate using GitHub OAuth
      # https://plugins.traefik.io/plugins/63d26b4f87b836b8c3b0cf01/traefik-git-hub-o-auth-plugin
#      - --experimental.plugins.traefik-github-oauth-plugin.modulename=github.com/MuXiu1997/traefik-github-oauth-plugin
#      - --experimental.plugins.traefik-github-oauth-plugin.version=v0.3.1
      # Enables Traefik Reverse Proxy to feed Umami Analytics with tracking events.
      # https://plugins.traefik.io/plugins/6710d226573cd7803d65cb15/traefik-umami-feeder
#      - --experimental.plugins.traefik-umami-feeder.modulename=github.com/astappiev/traefik-umami-feeder
#      - --experimental.plugins.traefik-umami-feeder.version=v1.2.0
      # Allows users to authenticate using Google OAuth
      # https://plugins.traefik.io/plugins/65d5360746079255c9ffd1e2/google-oidc-auth
#      - --experimental.plugins.google-oidc-auth-middleware.modulename=github.com/andrewkroh/google-oidc-auth-middleware
#      - --experimental.plugins.google-oidc-auth-middleware.version=v0.1.0
      # Add Admin API & Web UI for Traefik configured dynamic files!
      # https://plugins.traefik.io/plugins/65cb8b05769af9e5f2251e07/admin-api-web-ui
#      - --experimental.plugins.traefik-plugin-AdminAPI_WebUI.modulename=github.com/Miromani4/traefik-plugin-AdminAPI_WebUI
#      - --experimental.plugins.traefik-plugin-AdminAPI_WebUI.version=v1.2.5
      # Take control over the response code returned along with removing response headers and response body.
      # https://plugins.traefik.io/plugins/628c9f20108ecc83915d7778/response-code-override
#      - --experimental.plugins.response-code-override.modulename=github.com/Lepkem/traefik-plugin-response-code-override
#      - --experimental.plugins.response-code-override.version=v0.0.3
      # Handle/Whitelist traffic originating from Cloudflare. Rewrite requests X-Forwarded-For header with the user IP
      # https://plugins.traefik.io/plugins/6330891aa4caa9ddeffda114/cloudflare
#      - --experimental.plugins.traefik-cloudflare-plugin.modulename=github.com/Desuuuu/traefik-cloudflare-plugin
#      - --experimental.plugins.traefik-cloudflare-plugin.version=v1.0.0
      # Traefik Plugin based on the Apache Ultimate Bad Bot Blocker(https://raw.githubusercontent.com/mitchellkrogza/apache-ultimate-bad-bot-blocker/tree/master)
      # https://plugins.traefik.io/plugins/66721f91b6203b47e20005b1/trafik-ultimate-bad-bot-blocker
#      - --experimental.plugins.traefik-ultimate-bad-bot-blocker.modulename=github.com/discoverygarden/traefik-ultimate-bad-bot-blocker
#      - --experimental.plugins.traefik-ultimate-bad-bot-blocker.version=v0.2.0
      # (UNFINISHED) Waiting room plugin for Traefik
      # https://plugins.traefik.io/plugins/65dbb16446079255c9ffd1e8/waiting-room
#      - --experimental.plugins.traefik-waiting-room.modulename=github.com/korteke/traefik-waiting-room
#      - --experimental.plugins.traefik-waiting-room.version=v0.0.2
      # Middleware plugin to redirect to another URL on specific HTTP statuses.
      # https://plugins.traefik.io/plugins/65be38dc52addb37b8074614/redirect-errors
#      - --experimental.plugins.redirecterrors.modulename=github.com/indivisible/redirecterrors
#      - --experimental.plugins.redirecterrors.version=v0.1.0
    # Container-level labels used when using docker compose.
    # Not applicable to swarm mode.
    labels:
      <<: *traefik-labels
      homepage.group: Infrastructure
      homepage.name: Traefik
      homepage.icon: traefik
      homepage.href: https://traefik.$DOMAIN/api/
      homepage.description: Reverse proxy
      homepage.widget.type: traefik
      homepage.widget.url: https://traefik.$DOMAIN/
      homepage.widget.fields: '["routers", "services", "middleware"]'
    <<: *resource-limits
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      placement:
        constraints: [node.role == manager]
      # While in Swarm Mode, Traefik uses labels found on services, not on individual containers.
      # Therefore, if you use a compose file with Swarm Mode, labels should be defined in the deploy part of your service
      # as shown:
      labels:
        <<: *traefik-labels
    restart: always

  traefik-forward-auth:
    # ðŸ”¹ðŸ”¹ Traefik Forward Auth ðŸ”¹ðŸ”¹
    # A middleware plugin for Traefik which authenticates requests using a reverse proxy.
    # https://github.com/thomseddon/traefik-forward-auth
    depends_on:
      traefik:
        condition: service_started
    image: thomseddon/traefik-forward-auth
    container_name: traefik-forward-auth
    hostname: traefik
    extra_hosts:
      - "host.docker.internal:host-gateway"-forward-auth
    restart: always
    user: ${PUID:-1002}
    networks:
      - auth-net
    environment:
      PROVIDERS_GOOGLE_CLIENT_ID: $AUTH_PROVIDERS_GOOGLE_CLIENT_ID
      PROVIDERS_GOOGLE_CLIENT_SECRET: $AUTH_PROVIDERS_GOOGLE_CLIENT_SECRET
      SECRET: $AUTH_SECRET
      WHITELIST: $AUTH_WHITELIST
    command: >
      --cookie-domain="$DOMAIN"
      --auth-host="auth.$DOMAIN"
      --config=/etc/authconfig.ini
    volumes:
      - "${ROOT_DIR:-.}/configs/traefik/forward-auth/authconfig.ini:/etc/authconfig.ini:ro"
    labels:
      <<: *traefik-forward-auth-labels
    <<: *resource-limits
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      labels:
        <<: *traefik-forward-auth-labels

networks:
  traefik-public:
    external: false
    driver: overlay
  auth-net:
    external: false
    driver: overlay

volumes:
  traefik-public-certificates: 