
x-common-env: &common-env
  PGID: ${PGID:-988}  # 'docker' Group ID
  PUID: ${PUID:-1002}  # A non-root user ID
  TZ: ${TZ:-America/Chicago}  # Your Timezone

x-resource-limits: &resource-limits
  cpu_shares: 1024        # CPU share weight (relative, 2-262144). Higher = more CPU *if competing*.
#  mem_limit: 512m        # Max RAM usage (e.g., 64m, 1g). Exceeding = container kill.
#  mem_reservation: 325m  # Soft RAM limit (e.g., 32m, 512m).  Best effort, not guaranteed.
#  mem_swappiness: 30      # Swap usage (0-100). 0 = off. Higher = more swap, may slow down container.
  #memswap_limit: 1024m    # Max RAM + Swap.  Usually same as mem_limit.
  labels:
    autoheal: 'true'

x-common-deploy: &common-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    window: 120s
  labels:
    autoheal: 'true'
    swarm.autoscaler: 'true'

x-swarm-resource-limits: &swarm-resource-limits
  resources:
    limits:
      cpus: '0.10'
      memory: 1024M
#    reservations:
 #     cpus: '0.05'
  #    memory:  256M

x-swarm-worker-priority: &swarm-worker-priority
  placement:
    preferences:
      - spread: node.labels.worker_priority

x-swarm-manager-only: &swarm-manager-only
  placement:
    constraints:
      - node.role == manager

x-traefik-labels: &traefik-labels
  traefik.enable: "true"
  traefik.http.middlewares.auth-headers.headers.headers: stsSeconds=315360000,browserXssFilter=true,contentTypeNosniff=true,forceSTSHeader=true,stsIncludeSubdomains=true,stsPreload=true,frameDeny=true
  traefik.http.middlewares.oauth-auth-redirect.forwardAuth.address: http://auth:${OAUTH2_PROXY_PORT:-4180}
  traefik.http.middlewares.oauth-auth-redirect.forwardAuth.trustForwardHeader: "true"
  traefik.http.middlewares.oauth-auth-redirect.forwardAuth.authResponseHeaders: "X-Auth-Request-Access-Token,Authorization"
  traefik.http.middlewares.oauth-auth-wo-redirect.forwardAuth.address: http://auth:${OAUTH2_PROXY_PORT:-4180}/oauth2/auth
  traefik.http.middlewares.oauth-auth-wo-redirect.forwardAuth.trustForwardHeader: "true"
  traefik.http.middlewares.oauth-auth-wo-redirect.forwardAuth.authResponseHeaders: "X-Auth-Request-Access-Token,Authorization"
  #traefik.http.middlewares.admin-auth.basicauth.users: ${TRAEFIK_USERNAME:-admin}:${TRAEFIK_HASHED_PASSWORD:-$$apr1$$89eqM5Ro$$CxaFELthUKV21DpI3UTQO.}
  traefik.http.services.api@internal.loadbalancer.server.port: 8099
  traefik.http.routers.whoami.middlewares: forward-auth
  homepage.group: Infrastructure
  homepage.name: Traefik
  homepage.icon: traefik
  homepage.href: https://traefik.$DOMAIN
  homepage.description: Reverse proxy
  homepage.widget.type: traefik
  homepage.widget.url: http://traefik.$DOMAIN
  homepage.widget.fields: '["routers", "services", "middleware"]'

x-glauthui-labels: &glauthui-labels
  traefik.enable: "true"
  traefik.http.services.glauthui.loadbalancer.server.port: 5000

services:
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.8.1
    container_name: oauth2-proxy
    hostname: oauth2-proxy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${OAUTH2_PROXY_PORT:-4180}:4180/tcp
    networks:
      - auth-net
    command: --config /oauth2-proxy.cfg
    volumes:
      - "./oauth2-proxy.cfg:/oauth2-proxy.cfg"
    restart: always
    depends_on:
      - dex
      - httpbin

  glauthui:
    depends_on:
      glauthui-mariadb:
        condition: service_started
    build:
      context: ${ROOT_DIR:-.}/src/glauth-ui
      dockerfile: Dockerfile
    profiles: [opt]
    image: glauthui:latest
    container_name: glauthui
    hostname: glauthui
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - auth-net
      - traefik_public
    ports:
      - ${GLAUTHUI_PORT:-8201}:5000
    volumes:
      # Mount Folder that contains DB and config file outside the container
      - "${ROOT_DIR:-.}/configs/glauth/db:/home/ldap/db"
    environment:
      - SECRET_KEY=$GLAUTHUI_SECRET_KEY
      # DATABASE CONFIG
      - DATABASE_URL=mysql+pymysql://${GLAUTHUI_DB_USER:-glauthui}:$GLAUTHUI_DB_PASSWORD@glauthui-mariadb:${GLAUTHUI_DB_PORT:-3306}/${GLAUTHUI_DB_NAME:-glauthui}
      # MAIL CONFIG
      - MAIL_SERVER=${GLAUTHUI_MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${GLAUTHUI_MAIL_PORT:-587}
      - MAIL_USE_TLS=${GLAUTHUI_MAIL_USE_TLS:-1}
      - MAIL_USERNAME=${GLAUTHUI_MAIL_USERNAME:-boden.crouch@gmail.com}
      - MAIL_PASSWORD=${GLAUTHUI_MAIL_PASSWORD:-emvg zxoa wgzt jsfl}
      - MAIL_ADMIN=${GLAUTHUI_MAIL_ADMIN:-boden.crouch@gmail.com}
      - ORGANISATION=${GLAUTHUI_ORGANISATION:-Authelia}
      - ADMIN_GROUP=${GLAUTHUI_ADMIN_GROUP:-glauth_admin}
      - FLASK_DEBUG=${GLAUTHUI_FLASK_DEBUG:-false}
    #      - GLAUTH_CFG_PATH=${GLAUTHUI_CFG_PATH:-/home/ldap/db}
    labels:
      <<: *glauthui-labels
      homepage.group: Infrastructure
      homepage.name: GlauthUI
      homepage.icon: glauthui
      homepage.href: https://$DOMAIN/glauthui/
      homepage.description: LDAP UI
      homepage.widget.type: glauthui
      homepage.widget.url: https://$DOMAIN/glauthui/
      homepage.widget.fields: '["users", "groups", "policies"]'
    <<: *resource-limits
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      labels:
        <<: *glauthui-labels
    restart: always

  glauthui-mariadb:
    image: mariadb:11.7.2
    container_name: glauthui-mariadb
    hostname: glauthui-mariadb
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - ${GLAUTHUI_DB_PORT:-3306}:3306
    networks:
      - auth-net
      - traefik_public
    volumes:
      - ${ROOT_DIR:-.}/configs/glauthui/mariadb:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${GLAUTHUI_DB_NAME:-glauthui}
      MYSQL_USER: ${GLAUTHUI_DB_USER:-glauthui}
      MYSQL_PASSWORD: $GLAUTHUI_DB_PASSWORD
      MYSQL_ROOT_PASSWORD: $GLAUTHUI_DB_ROOT_PASSWORD
    restart: always

  dex:
    image: ghcr.io/dexidp/dex
    container_name: dex
    hostname: dex
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${DEX_PORT:-4190}:4190/tcp
    networks:
      dex:
        aliases:
          - dex.localtest.me
      etcd: {}
    command: dex serve /dex.yaml
    volumes:
      - "${ROOT_DIR:-.}/configs/dex/dex.yaml:/dex.yaml"
    depends_on:
      - etcd
    restart: always

  httpbin:
    container_name: httpbin
    image: kennethreitz/httpbin
    ports:
      - ${HTTPBIN_PORT:-8075}:80/tcp
    networks:
      httpbin:
        aliases:
          - httpbin.localtest.me

  etcd:
    container_name: etcd
    image: gcr.io/etcd-development/etcd:v3.5.17
    entrypoint: /usr/local/bin/etcd
    command:
      - --listen-client-urls=http://0.0.0.0:${ETCD_PORT:-2379}
      - --advertise-client-urls=http://etcd:${ETCD_PORT:-2379}
    networks:
      - etcd

  duckdns:
    # ðŸ”¹ðŸ”¹ DuckDNS ðŸ”¹ðŸ”¹
    image: linuxserver/duckdns
    container_name: duckdns
    hostname: duckdns
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - traefik_public
    environment:
      <<: *common-env
      SUBDOMAINS: $DUCKDNS_SUBDOMAIN
      TOKEN: $DUCKDNS_TOKEN
    <<: *resource-limits
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      placement:
        constraints: [node.role == manager]
    restart: always

  traefik: 
    # ðŸ”¹ðŸ”¹ Traefik ðŸ”¹ðŸ”¹
    image: traefik
    container_name: traefik
    hostname: traefik
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - auth-net
      - traefik_public
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - ${TRAEFIK_WEB_PORT:-80}:${TRAEFIK_WEB_PORT:-80}
      # Listen on port 443, default for HTTPS
      - ${TRAEFIK_WEBSECURE_PORT:-443}:${TRAEFIK_WEBSECURE_PORT:-443}
      # Listen on port 8099, default for the Traefik API and Dashboard
      - ${TRAEFIK_DASHBOARD_PORT:-8099}:${TRAEFIK_DASHBOARD_PORT:-8099}
    cap_add:
      - NET_ADMIN
    sysctls:
      net.ipv6.conf.all.disable_ipv6: ${DISABLE_IPV6:-1}
    volumes:
      - ${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock:z
      - ${ROOT_DIR:-.}/configs/traefik/config:/config
      - ${ROOT_DIR:-.}/.htpasswd:/.htpasswd
#      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *common-env
      # Note: The environment variable names can be suffixed by _FILE to reference a file instead of a value
      DUCKDNS_HTTP_TIMEOUT: ${DUCKDNS_HTTP_TIMEOUT:-30}  # API request timeout in seconds (Default: 30)
      DUCKDNS_POLLING_INTERVAL: ${DUCKDNS_POLLING_INTERVAL:-2}  # Time between DNS propagation check in seconds (Default: 2)
      DUCKDNS_PROPAGATION_TIMEOUT: ${DUCKDNS_PROPAGATION_TIMEOUT:-60}  # Maximum waiting time for DNS propagation in seconds (Default: 60)
      DUCKDNS_SEQUENCE_INTERVAL: ${DUCKDNS_SEQUENCE_INTERVAL:-60}  # Time between sequential requests in seconds (Default: 60)
      DUCKDNS_TOKEN: $DUCKDNS_TOKEN
      DUCKDNS_TTL: ${DUCKDNS_TTL:-120}  # TTL for DNS records in seconds (Default: 120)
      CLOUDFLARE_EMAIL: $CLOUDFLARE_EMAIL
      CLOUDFLARE_DNS_API_TOKEN: $CLOUDFLARE_DNS_API_TOKEN
      CLOUDFLARE_ZONE_API_TOKEN: $CLOUDFLARE_ZONE_API_TOKEN
      LETS_ENCRYPT_EMAIL: $LETS_ENCRYPT_EMAIL
    command:
      - --accesslog=${TRAEFIK_ACCESS_LOG:-true}  # Enable the access log, with HTTP requests
      - --api  # Enable api/dashboard. When set to true, its sub option api.dashboard is also set to true.
      - --api.dashboard=${TRAEFIK_API_DASHBOARD:-true}  # Enable dashboard (default: false)
      - --api.debug=${TRAEFIK_API_DEBUG:-false}  # Enable additional endpoints for debugging and profiling (default: false)
      - --api.disabledashboardad=${TRAEFIK_API_DISABLE_DASHBOARD_AD:-false}  # Disable the advertisement from the dashboard (default: false)
      - --api.insecure=${TRAEFIK_API_INSECURE:-false}  # Enable the API and the dashboard on the entryPoint named traefik (default: false)
#      - --certificatesresolvers.myresolver.acme.casystemcertpool=${TRAEFIK_ACME_CASYSTEMCERTPOOL:-false}  # Define if the certificates pool must use a copy of the system cert pool. (Default: false)
#      - --certificatesresolvers.myresolver.acme.certificatesduration=${TRAEFIK_ACME_CERTIFICATESDURATION:-2160}  # Define the duration of the certificates. (Default: 2160)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.propagation.delaybeforechecks=${TRAEFIK_DNS_CHALLENGE_PROPAGATION_DELAY_BEFORE_CHECKS:-0}  # Defines the delay before checking the challenge TXT record propagation. (Default: 0)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.propagation.disableanschecks=${TRAEFIK_DNS_CHALLENGE_PROPAGATION_DISABLE_ANSCHECKS:-false}  # Disables the challenge TXT record propagation checks against authoritative nameservers. (Default: false)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.propagation.disablechecks=${TRAEFIK_DNS_CHALLENGE_PROPAGATION_DISABLE_CHECKS:-false}  # Disables the challenge TXT record propagation checks (not recommended). (Default: false)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.propagation.requireallrns=${TRAEFIK_DNS_CHALLENGE_PROPAGATION_REQUIRE_ALL_RNS:-false}  # Requires the challenge TXT record to be propagated to all recursive nameservers. (Default: false)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.propagation=${TRAEFIK_DNS_CHALLENGE_PROPAGATION:-false}  # Define if the DNS challenge must be propagated to the DNS provider. (Default: false)
#      - --certificatesresolvers.myresolver.acme.dnschallenge.provider.delaybeforechecks=${TRAEFIK_DNS_CHALLENGE_PROVIDER_DELAY_BEFORE_CHECKS:-0}  # Defines the delay before checking the challenge TXT record propagation. (Default: 0)
      - --certificatesresolvers.myresolver.acme.caserver=${TRAEFIK_ACME_CASERVER:-https://acme.zerossl.com/v2/DV90}  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.
#      - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory  # Let's Encrypt has a limit: 5 certs generated a week. Use staging when breaking things. see https://doc.traefik.io/traefik/https/acme/#caserver
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${TRAEFIK_DNS_CHALLENGE_PROVIDER:-duckdns}
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=${TRAEFIK_DNS_CHALLENGE_RESOLVERS:-1.1.1.1:53,8.8.8.8:53}  # Use following DNS servers to resolve the FQDN authority. (default: commented out)
      - --certificatesresolvers.myresolver.acme.dnschallenge=${TRAEFIK_DNS_CHALLENGES:-false}  # Use the DNS challenges instead of HTTP/TLS challenges. (Default: false)
      - --certificatesresolvers.myresolver.acme.eab.hmacencoded=$TRAEFIK_EAB_HMAC_KEY  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.  # Base64 encoded HMAC key from External CA.
      - --certificatesresolvers.myresolver.acme.eab.kid=$TRAEFIK_EAB_KID  # Uncomment this line to use ZeroSSL (no rate limits) over Let's Encrypt.  # Key identifier from External CA.
      - --certificatesresolvers.myresolver.acme.email=$TRAEFIK_EMAIL  # Email address used for registration.
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=$TRAEFIK_HTTP_CHALLENGE_ENTRYPOINT  # HTTP challenge EntryPoint
      - --certificatesresolvers.myresolver.acme.httpchallenge=${TRAEFIK_HTTP_CHALLENGE:-false}  # Activate HTTP-01 Challenge. (Default: false)
      - --certificatesresolvers.myresolver.acme.keytype=${TRAEFIK_ACME_KEYTYPE:-RSA4096}  # KeyType used for generating certificate private key. Allow value 'EC256', 'EC384', 'RSA2048', 'RSA4096', 'RSA8192'. (Default: RSA4096)
      - --certificatesresolvers.myresolver.acme.preferredchain=${TRAEFIK_ACME_PREFERREDCHAIN:-https://acme.zerossl.com/v2/DV90}  # Preferred chain to use.
      - --certificatesresolvers.myresolver.acme.storage=${TRAEFIK_ACME_STORAGE:-/config/acme.json}  # Storage to use. (Default: acme.json)
      - --certificatesresolvers.myresolver.acme.tlschallenge=${TRAEFIK_TLS_CHALLENGE:-true}  # Activate TLS-ALPN-01 Challenge. (Default: true)
      - --entrypoints.web.address=:${TRAEFIK_WEB_PORT:-80}
#      - --entrypoints.web.allowacmebypass=${TRAEFIK_WEB_ALLOW_ACME_BYPASS:-true}  # Enables handling of ACME TLS and HTTP challenges with custom routers. (Default: false)
      - --entrypoints.web.asdefault=${TRAEFIK_WEB_AS_DEFAULT:-true}  # Adds this EntryPoint to the list of default EntryPoints to be used on routers that don't have any Entrypoint defined. (Default: false)
#      - --entrypoints.web.forwardedheaders.insecure=${TRAEFIK_WEB_FORWARDED_HEADERS_INSECURE:-false}  # Trust all forwarded headers. (Default: false)
      - --entrypoints.web.http.redirections.entrypoint.permanent=${TRAEFIK_WEB_REDIRECTIONS_ENTRY_POINT_PERMANENT:-false}
      - --entrypoints.web.http.redirections.entrypoint.priority=${TRAEFIK_WEB_REDIRECTIONS_ENTRY_POINT_PRIORITY:-9223372036854775806}  # Priority of the generated router. (Default: 9223372036854775806)
      - --entrypoints.web.http.redirections.entrypoint.scheme=${TRAEFIK_WEB_REDIRECTIONS_ENTRY_POINT_SCHEME:-https}  # The redirection target scheme (optional, default: https)
      - --entrypoints.web.http.redirections.entrypoint.to=${TRAEFIK_WEB_REDIRECTIONS_ENTRY_POINT_TO:-websecure}
#      - --entrypoints.web.http2.maxconcurrentstreams=${TRAEFIK_WEB_HTTP2_MAX_CONCURRENT_STREAMS:-250}  # Specifies the number of concurrent streams per connection that each client is allowed to initiate. (Default: 250)
#      - --entrypoints.web.http3.advertisedport=${TRAEFIK_WEB_HTTP3_ADVERTISED_PORT:-0}  # UDP port to advertise, on which HTTP/3 is available. (Default: 0)
#      - --entrypoints.web.http3=${TRAEFIK_WEB_HTTP3:-false}  # HTTP/3 configuration. (Default: false)
      - --entrypoints.web.observability.accesslogs=${TRAEFIK_WEB_OBSERVABILITY_ACCESS_LOGS:-true}  # (Default: true)
      - --entrypoints.web.observability.metrics=${TRAEFIK_WEB_OBSERVABILITY_METRICS:-true}  # (Default: true)
      - --entrypoints.web.observability.tracing=${TRAEFIK_WEB_OBSERVABILITY_TRACING:-true}  # (Default: true)
#      - --entrypoints.web.proxyprotocol.insecure=${TRAEFIK_WEB_PROXY_PROTOCOL_INSECURE:-false}  # Trust all. (Default: false)
#      - --entrypoints.web.proxyprotocol=${TRAEFIK_WEB_PROXY_PROTOCOL:-false}  # Proxy-Protocol configuration. (Default: false)
#      - --entrypoints.web.reuseport=${TRAEFIK_WEB_REUSE_PORT:-false}  # Enables EntryPoints from the same or different processes listening on the same TCP/UDP port. (Default: false)
#      - --entrypoints.web.transport.keepalivemaxrequests=${TRAEFIK_WEB_TRANSPORT_KEEPALIVE_MAX_REQUESTS:-0}  # Maximum number of requests before closing a keep-alive connection. (Default: 0)
#      - --entrypoints.web.transport.keepalivemaxtime=${TRAEFIK_WEB_TRANSPORT_KEEPALIVE_MAX_TIME:-0}  # Maximum duration before closing a keep-alive connection. (Default: 0)
#      - --entrypoints.web.transport.lifecycle.gracetimeout=${TRAEFIK_WEB_TRANSPORT_LIFECYCLE_GRACE_TIMEOUT:-10}  # Duration to give active requests a chance to finish before Traefik stops. (Default: 10)
#      - --entrypoints.web.transport.lifecycle.requestacceptgracetimeout=${TRAEFIK_WEB_TRANSPORT_LIFECYCLE_REQUEST_ACCEPT_GRACE_TIMEOUT:-0}  # Duration to keep accepting requests before Traefik initiates the graceful shutdown procedure. (Default: 0)
#      - --entrypoints.web.transport.respondingtimeouts.idletimeout=${TRAEFIK_WEB_TRANSPORT_RESPONDING_TIMEOUTS_IDLE_TIMEOUT:-180}  # IdleTimeout is the maximum amount duration an idle (keep-alive) connection will remain idle before closing itself. If zero, no timeout is set. (Default: 180)
#      - --entrypoints.web.transport.respondingtimeouts.readtimeout=${TRAEFIK_WEB_TRANSPORT_RESPONDING_TIMEOUTS_READ_TIMEOUT:-60}  # ReadTimeout is the maximum duration for reading the entire request, including the body. If zero, no timeout is set. (Default: 60)
#      - --entrypoints.web.transport.respondingtimeouts.writetimeout=${TRAEFIK_WEB_TRANSPORT_RESPONDING_TIMEOUTS_WRITE_TIMEOUT:-0}  # WriteTimeout is the maximum duration before timing out writes of the response. If zero, no timeout is set. (Default: 0)
#      - --entrypoints.web.udp.timeout=${TRAEFIK_WEB_UDP_TIMEOUT:-3}  # Timeout defines how long to wait on an idle session before releasing the related resources. (Default: 3)
      - --entrypoints.websecure.address=:${TRAEFIK_WEBSECURE_PORT:-443}
#      - --entrypoints.websecure.allowacmebypass=${TRAEFIK_WEBSECURE_ALLOW_ACME_BYPASS:-false}  # Enables handling of ACME TLS and HTTP challenges with custom routers. (Default: false)
      - --entrypoints.websecure.asdefault=${TRAEFIK_WEBSECURE_AS_DEFAULT:-true}  # Adds this EntryPoint to the list of default EntryPoints to be used on routers that don't have any Entrypoint defined. (Default: false)
      #- --entrypoints.websecure.http.encodequerysemicolons=${TRAEFIK_WEBSECURE_HTTP_ENCODEQUERYSEMICOLONS:-false}  # One could use this option to avoid non-encoded semicolons to be interpreted as query parameter separators by Traefik.  When using this option, the non-encoded semicolons characters in query will be transmitted encoded to the backend. (Default: false)
#      - --entrypoints.websecure.forwardedheaders.connection=${TRAEFIK_WEBSECURE_FORWARDED_HEADERS_CONNECTION:-X-Forwarded-For,X-Forwarded-Host,X-Forwarded-Proto,X-Forwarded-Uri}  # List of Connection headers that are allowed to pass through the middleware chain before being removed.
#      - --entrypoints.websecure.forwardedheaders.insecure=${TRAEFIK_WEBSECURE_FORWARDED_HEADERS_INSECURE:-false}  # Trust all forwarded headers. (Default: false)
#      - --entrypoints.websecure.forwardedheaders.trustedips=$TRAEFIK_WEBSECURE_FORWARDED_HEADERS_TRUSTED_IPS  # Trust only forwarded headers from selected IPs.
      - --entrypoints.websecure.http.tls.certresolver=myresolver
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAIN
      - --entrypoints.websecure.http.tls=${TRAEFIK_TLS:-true}
#      - --experimental.fastproxy.debug=${TRAEFIK_EXPERIMENTAL_FASTPROXY_DEBUG:-false}  # Enable debug mode for the FastProxy implementation. (Default: false)
#      - --experimental.fastproxy=${TRAEFIK_EXPERIMENTAL_FASTPROXY:-false}  # Enables the FastProxy implementation. (Default: false)
#      - --experimental.otlplogs=${TRAEFIK_EXPERIMENTAL_OTLP_LOGS:-false}  # Enables the OpenTelemetry logs integration. (Default: false)
      - --global.checknewversion=${TRAEFIK_GLOBAL_CHECK_NEW_VERSION:-true}  # Periodically check if a new version has been released. (Default: true)
      - --global.sendanonymoususage=${TRAEFIK_GLOBAL_SEND_ANONYMOUS_USAGE:-false}  # Periodically send anonymous usage statistics. If the option is not specified, it will be disabled by default. (Default: false)
#      - --hostresolver=${TRAEFIK_HOST_RESOLVER:-false}  # Enable CNAME Flattening. (Default: false)
#      - --hostresolver.cnameflattening=${TRAEFIK_HOST_RESOLVER_CNAME_FLATTENING:-false}  # A flag to enable/disable CNAME flattening (Default: false)
#      - --hostresolver.resolvconfig=${TRAEFIK_HOST_RESOLVER_RESOLV_CONFIG:-/resolv.conf}  # resolv.conf used for DNS resolving (Default: /etc/resolv.conf)
      - --hostresolver.resolvdepth=${TRAEFIK_HOST_RESOLVER_RESOLV_DEPTH:-5}  # The maximal depth of DNS recursive resolving (Default: 5)
      - --log  # Enable the Traefik log, for configurations and errors
      - --log.level=${TRAEFIK_LOG_LEVEL:-DEBUG}
      - --ping.entrypoint=${TRAEFIK_PING_ENTRY_POINT:-traefik}  # EntryPoint (Default: traefik)
      - --ping.manualrouting=${TRAEFIK_PING_MANUAL_ROUTING:-false}  # Manual routing (Default: false)
      - --ping.terminatingstatuscode=${TRAEFIK_PING_TERMINATING_STATUS_CODE:-503}  # Terminating status code (Default: 503)
      - --ping=${TRAEFIK_PING:-true}
      - --providers.docker  # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker.exposedbydefault=${TRAEFIK_DOCKER_EXPOSED_BY_DEFAULT:-false}
      - --providers.docker.allowemptyservices=${TRAEFIK_DOCKER_ALLOW_EMPTY_SERVICES:-false}  # Disregards the Docker containers health checks with respect to the creation or removal of the corresponding services. (Default: false)
#      - --providers.docker.constraints=${TRAEFIK_DOCKER_CONSTRAINTS:-}  # Constraints is an expression that Traefik matches against the container's labels to determine whether to create any route for that container.
      - --providers.docker.defaultrule=Host(`{{ .ContainerName }}.$DOMAIN`) || PathPrefix(`/{{ .ContainerName }}`)  # Default rule. (Default: Host(`{{ normalize .Name }}`)
      - --providers.docker.endpoint=${DOCKER_HOST:-unix:///var/run/docker.sock}  # Docker server endpoint. Can be a TCP or a Unix socket endpoint. (Default: unix:///var/run/docker.sock)
      - --providers.docker.httpclienttimeout=${TRAEFIK_DOCKER_HTTP_CLIENT_TIMEOUT:-0}  # Client timeout for HTTP connections. (Default: 0)
      - --providers.docker.network=traefik_public  # Default Docker network used.
#      - --providers.docker.password=${TRAEFIK_DOCKER_PASSWORD:-}  # Password for Basic HTTP authentication.
#      - --providers.docker.tls.ca=${TRAEFIK_DOCKER_TLS_CA:-}  # TLS CA
#      - --providers.docker.tls.cert=${TRAEFIK_DOCKER_TLS_CERT:-}  # TLS cert
#      - --providers.docker.tls.insecureskipverify=${TRAEFIK_DOCKER_TLS_INSECURE_SKIP_VERIFY:-false}  # TLS insecure skip verify (Default: false)
#      - --providers.docker.tls.key=${TRAEFIK_DOCKER_TLS_KEY:-}  # TLS key
      - --providers.docker.usebindportip=${TRAEFIK_DOCKER_USE_BIND_PORT_IP:-false}  # Use the ip address from the bound port, rather than from the inner network. (Default: false)
#      - --providers.docker.username=${TRAEFIK_DOCKER_USERNAME:-}  # Username for Basic HTTP authentication.
      - --providers.docker.watch=${TRAEFIK_DOCKER_WATCH:-true}  # Watch Docker events. (Default: true)
#      - --providers.nomad.throttleDuration=${TRAEFIK_PROVIDERS_NOMAD_THROTTLE_DURATION:-0s}  # Throttle duration for Nomad events. (Default: 0s)
      # Plugins
      ##########################################
#      - --experimental.localplugins.${TRAEFIK_EXPERIMENTAL_LOCAL_PLUGINS_NAME:-traefik-plugin-AdminAPI_WebUI}  # Local plugins configuration. (Default: false)
#      - --experimental.localplugins.<name>.modulename=${TRAEFIK_EXPERIMENTAL_LOCAL_PLUGINS_MODULE_NAME:-github.com/Miromani4/traefik-plugin-AdminAPI_WebUI}  # Plugin's module name.
#      - --experimental.localplugins.<name>.settings=${TRAEFIK_EXPERIMENTAL_LOCAL_PLUGINS_SETTINGS:-}  # Plugin's settings (works only for wasm plugins).
#      - --experimental.localplugins.<name>.settings.envs=${TRAEFIK_EXPERIMENTAL_LOCAL_PLUGINS_SETTINGS_ENVS:-}  # Environment variables to forward to the wasm guest.
#      - --experimental.localplugins.<name>.settings.mounts=${TRAEFIK_EXPERIMENTAL_LOCAL_PLUGINS_SETTINGS_MOUNTS:-}  # Directory to mount to the wasm guest.
      # A plugin to block abusive clients based on IP address.
#      - --experimental.plugins.fail2ban.modulename=github.com/tomMoulard/fail2ban
#      - --experimental.plugins.fail2ban.version=v0.8.3
      # A free and open-source software to start workloads on demand and stop them after a period of inactivity.
      # Think of it a bit like a serverless platform, but for your own servers.
#      - --experimental.plugins.sablier.modulename=github.com/sablierapp/sablier
#      - --experimental.plugins.sablier.version=v1.8.4
      # A plugin to cache responses from your services, written in Go.
      # https://plugins.traefik.io/plugins/6294728cffc0cd18356a97c2/souin
#      - --experimental.plugins.souin.modulename=github.com/darkweak/souin
#      - --experimental.plugins.souin.version=v1.7.5
      # This plugin aims to implement a Crowdsec Bouncer in a Traefik plugin.
      # CrowdSec is an open-source and collaborative IPS (Intrusion Prevention System) and a security suite. We leverage local behavior analysis and crowd power to build the largest CTI network in the world.
      # The purpose is to enable Traefik to authorize or block requests from IPs based on their reputation and behavior.
      # https://plugins.traefik.io/plugins/6335346ca4caa9ddeffda116/crowdsec-bouncer-traefik-plugin
#      - --experimental.plugins.crowdsec-bouncer-traefik-plugin.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
#      - --experimental.plugins.crowdsec-bouncer-traefik-plugin.version=v1.4.1
      # If Traefik is behind a Cloudflare Proxy/Tunnel, it won't be able to get the real IP from the external client as well as other information.
      # This plugin solves this issue by overwriting the X-Real-IP and X-Forwarded-For with an IP from the CF-Connecting-IP header.
      # The real IP will be the Cf-Connecting-IP if request is come from cloudflare ( truest ip in configuration file).
      # The plugin also writes the CF-Visitor scheme to the X-Forwarded-Proto. (This fixes an infinite redirect issue for wordpress when using CF[443]->PROXY/TUNNEL->Traefik[80]->WP[80])
      # https://plugins.traefik.io/plugins/62e97498e2bf06d4675b9443/real-ip-from-cloudflare-proxy-tunnel
#      - --experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp
#      - --experimental.plugins.cloudflarewarp.version=v1.3.3
      # Simple cache plugin middleware caches responses on disk.
      # https://plugins.traefik.io/plugins/62947353108ecc83915d778d/simple-cache
#      - --experimental.plugins.plugin-simplecache.modulename=github.com/traefik/plugin-simplecache
#      - --experimental.plugins.plugin-simplecache.version=v0.2.1
      # A simple, cookie based Traefik middleware plugin for HTTP Basic or mTLS Single Sign-on
      # https://plugins.traefik.io/plugins/64a53f2e498e334469bdbd28/trauth
#      - --experimental.plugins.trauth.modulename=github.com/leonjza/trauth
#      - --experimental.plugins.trauth.version=v1.6.7
      # A middleware plugin for Traefik which blocks JNDI attacks based on HTTP header values.
      # https://plugins.traefik.io/plugins/628c9ec2ffc0cd18356a97a2/log4-shell
#      - --experimental.plugins.plugin-log4shell.modulename=github.com/traefik/plugin-log4shell
#      - --experimental.plugins.plugin-log4shell.version=v0.1.2
      # Apply themes from http://theme.park to supported applications.
      # https://plugins.traefik.io/plugins/62947288ffc0cd18356a97c1/theme-park
#      - --experimental.plugins.traefik-themepark.modulename=github.com/packruler/traefik-themepark
#      - --experimental.plugins.traefik-themepark.version=v1.4.2
      # Allows users to authenticate using GitHub OAuth
      # https://plugins.traefik.io/plugins/63d26b4f87b836b8c3b0cf01/traefik-git-hub-o-auth-plugin
#      - --experimental.plugins.traefik-github-oauth-plugin.modulename=github.com/MuXiu1997/traefik-github-oauth-plugin
#      - --experimental.plugins.traefik-github-oauth-plugin.version=v0.3.1
      # Enables Traefik Reverse Proxy to feed Umami Analytics with tracking events.
      # https://plugins.traefik.io/plugins/6710d226573cd7803d65cb15/traefik-umami-feeder
#      - --experimental.plugins.traefik-umami-feeder.modulename=github.com/astappiev/traefik-umami-feeder
#      - --experimental.plugins.traefik-umami-feeder.version=v1.2.0
      # Allows users to authenticate using Google OAuth
      # https://plugins.traefik.io/plugins/65d5360746079255c9ffd1e2/google-oidc-auth
#      - --experimental.plugins.google-oidc-auth-middleware.modulename=github.com/andrewkroh/google-oidc-auth-middleware
#      - --experimental.plugins.google-oidc-auth-middleware.version=v0.1.0
      # Add Admin API & Web UI for Traefik configured dynamic files!
      # https://plugins.traefik.io/plugins/65cb8b05769af9e5f2251e07/admin-api-web-ui
#      - --experimental.plugins.traefik-plugin-AdminAPI_WebUI.modulename=github.com/Miromani4/traefik-plugin-AdminAPI_WebUI
#      - --experimental.plugins.traefik-plugin-AdminAPI_WebUI.version=v1.2.5
      # Take control over the response code returned along with removing response headers and response body.
      # https://plugins.traefik.io/plugins/628c9f20108ecc83915d7778/response-code-override
#      - --experimental.plugins.response-code-override.modulename=github.com/Lepkem/traefik-plugin-response-code-override
#      - --experimental.plugins.response-code-override.version=v0.0.3
      # Handle/Whitelist traffic originating from Cloudflare. Rewrite requests X-Forwarded-For header with the user IP
      # https://plugins.traefik.io/plugins/6330891aa4caa9ddeffda114/cloudflare
#      - --experimental.plugins.traefik-cloudflare-plugin.modulename=github.com/Desuuuu/traefik-cloudflare-plugin
#      - --experimental.plugins.traefik-cloudflare-plugin.version=v1.0.0
      # Traefik Plugin based on the Apache Ultimate Bad Bot Blocker(https://raw.githubusercontent.com/mitchellkrogza/apache-ultimate-bad-bot-blocker/tree/master)
      # https://plugins.traefik.io/plugins/66721f91b6203b47e20005b1/trafik-ultimate-bad-bot-blocker
#      - --experimental.plugins.traefik-ultimate-bad-bot-blocker.modulename=github.com/discoverygarden/traefik-ultimate-bad-bot-blocker
#      - --experimental.plugins.traefik-ultimate-bad-bot-blocker.version=v0.2.0
      # (UNFINISHED) Waiting room plugin for Traefik
      # https://plugins.traefik.io/plugins/65dbb16446079255c9ffd1e8/waiting-room
#      - --experimental.plugins.traefik-waiting-room.modulename=github.com/korteke/traefik-waiting-room
#      - --experimental.plugins.traefik-waiting-room.version=v0.0.2
      # Middleware plugin to redirect to another URL on specific HTTP statuses.
      # https://plugins.traefik.io/plugins/65be38dc52addb37b8074614/redirect-errors
#      - --experimental.plugins.redirecterrors.modulename=github.com/indivisible/redirecterrors
#      - --experimental.plugins.redirecterrors.version=v0.1.0
    labels:
      <<: *traefik-labels
      homepage.group: Infrastructure
      homepage.name: Traefik
      homepage.icon: traefik
      homepage.href: https://$DOMAIN/api/
      homepage.description: Reverse proxy
      homepage.widget.type: traefik
      homepage.widget.url: https://$DOMAIN/dashboard/
      homepage.widget.fields: '["routers", "services", "middleware"]'
    <<: *resource-limits
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      # While in Swarm Mode, Traefik uses labels found on services, not on individual containers.
      # Therefore, if you use a compose file with Swarm Mode, labels should be defined in the deploy part of your service
      # as shown:
      labels:
        <<: *traefik-labels
      placement:
        constraints: [node.role == manager]
    restart: always

secrets:
  authelia_jwt_secret:
    file: ${SECRETS_DIR:-./secrets}/authelia_jwt_secret
  authelia_session_secret:
    file: ${SECRETS_DIR:-./secrets}/authelia_session_secret
  authelia_storage_encryption_key:
    file: ${SECRETS_DIR:-./secrets}/authelia_storage_encryption_key
  #authelia_storage_mysql_password:
  #  file: ${ROOT_DIR:-.}/secrets/authelia_storage_mysql_password
  #authelia_notifier_smtp_password:
  #  file: ${ROOT_DIR:-.}/secrets/authelia_notifier_smtp_password
  #authelia_duo_api_secret_key:
  #  file: ${ROOT_DIR:-.}/secrets/authelia_duo_api_secret_key


# Generate secrets:
# openssl rand -base64 64 > ${SECRETS_DIR:-./secrets}/authelia/JWT_SECRET
# openssl rand -base64 64 > ${SECRETS_DIR:-./secrets}/authelia/SESSION_SECRET
# openssl rand -base64 64 > ${SECRETS_DIR:-./secrets}/authelia/STORAGE_PASSWORD
# openssl rand -base64 64 > ${SECRETS_DIR:-./secrets}/authelia/STORAGE_ENCRYPTION_KEY
