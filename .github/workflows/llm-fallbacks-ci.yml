name: LLM Fallbacks CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/llm_fallbacks/**'
      - 'compose/docker-compose.llm.yml'
      - '.github/workflows/llm-fallbacks-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/llm_fallbacks/**'
      - 'compose/docker-compose.llm.yml'
  schedule:
    # Run daily at 6 AM UTC to test the model updater
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force model update'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/llm-fallbacks

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        cd src/llm_fallbacks
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        cd src/llm_fallbacks
        python -m pytest tests/ -v --cov=llm_fallbacks --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/llm_fallbacks/coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and test Model Updater image
      run: |
        cd src/llm_fallbacks
        docker build -f Dockerfile.model-updater -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:model-updater-${{ github.sha }} .
        docker build -f Dockerfile.scheduler -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scheduler-${{ github.sha }} .
        
    - name: Test Docker Compose
      run: |
        cd compose
        docker-compose -f docker-compose.llm.yml config
        
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # This could be deploying to your server, updating Docker images, etc.
        
  daily-model-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_update == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd src/llm_fallbacks
        pip install -r requirements.txt
        
    - name: Run model update
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        cd src/llm_fallbacks
        python -m llm_fallbacks.generate_configs
        
    - name: Commit updated models
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add src/llm_fallbacks/free_chat_models.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-update free_chat_models.json [skip ci]"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
