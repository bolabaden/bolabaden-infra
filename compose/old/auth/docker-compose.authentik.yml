# ðŸ”¹ðŸ”¹ Authentik ðŸ”¹ðŸ”¹  # https://goauthentik.io/
# Authentik is a powerful and flexible authentication provider that can be used to secure your applications and services.

x-common-env: &common-env
  TZ: ${TZ:-America/Chicago} # Your Timezone
  PUID: ${PUID:-1002}
  PGID: ${PGID:-988}
  UMASK: ${UMASK:-002}

x-common-uidgid: &common-uidgid
  user: ${PUID:-1002}:${PGID:-988}

x-resource-limits: &resource-limits
  cpu_shares: 1024
  labels:
    autoheal: "true"

x-common-deploy: &common-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    window: 120s
  labels:
    autoheal: "true"
    swarm.autoscaler: "true"

x-swarm-resource-limits: &swarm-resource-limits
  resources:
    limits:
      cpus: "0.10"
      memory: 512M

x-swarm-preferences-worker-priority: &swarm-preferences-worker-priority
  placement:
    preferences:
      - spread: node.labels.worker_priority

x-swarm-constraints-worker-only: &swarm-constraints-worker-only
  placement:
    constraints:
      - node.role == worker

x-swarm-constraints-manager-only: &swarm-constraints-manager-only
  placement:
    constraints:
      - node.role == manager

x-authentik-proxy-labels: &authentik-proxy-labels
  traefik.enable: "true"
  traefik.http.routers.authentik.rule: Host(`authentik-proxy.$DOMAIN`) && PathPrefix(`/outpost.goauthentik.io/`)
  traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:${AUTHENTIK_PORT:-9000}/outpost.goauthentik.io/auth/traefik
  traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: "true"
  traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
  traefik.http.services.authentik.loadbalancer.server.port: 9000

services:
  authentik-proxy:
    image: ghcr.io/goauthentik/proxy
    container_name: authentik-proxy
    hostname: authentik-proxy
    <<: [*common-uidgid, *common-logging, *resource-limits]
    ports:
      - ${AUTHENTIK_PORT:-9000}:9000
      - ${AUTHENTIK_SSL_PORT:-9443}:9443
    environment:
      <<: *common-env
      AUTHENTIK_HOST: https://authentik-proxy.$DOMAIN
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_TOKEN: /run/secrets/authentik_token
      AUTHENTIK_SECRET_KEY: /run/secrets/authentik_secret_key
      # Starting with 2021.9, you can optionally set this too
      # when authentik_host for internal communication doesn't match the public URL
      # AUTHENTIK_HOST_BROWSER: https://external-domain.tld
    labels:
      <<: *authentik-proxy-labels
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
      labels:
        <<: *authentik-proxy-labels
    restart: always

  authentik-worker:
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}
    container_name: authentik-worker
    hostname: authentik-worker
    networks:
      - traefik_public
#      - socket_proxy
    security_opt:
      - no-new-privileges:true
    command: worker
    secrets:
      - authentik_postgresql_user
      - authentik_postgresql_password
      - authentik_secret_key
    environment:
      <<: *common-env
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "false"
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_LOG_LEVEL: ${AUTHENTIK_LOG_LEVEL:-info} # debug, info, warning, error, trace
      AUTHENTIK_POSTGRESQL__HOST: ${AUTHENTIK_POSTGRES__HOST:-postgresql}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRES__NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: /run/secrets/authentik_postgresql_password
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRES__USER:-authentik}
      AUTHENTIK_REDIS__HOST: ${AUTHENTIK_REDIS__HOST:-redis}
      AUTHENTIK_SECRET_KEY: /run/secrets/authentik_secret_key
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - ${CONFIG_PATH:-./volumes}/authentik/certs:/certs
      - ${CONFIG_PATH:-./volumes}/authentik/custom-templates:/templates
      # - $DOCKERDIR/appdata/authentik/geoip/data:/geoip # requires geoipupdate
      - ${SOCK_PATH:-/var/run/docker.sock}:/var/run/docker.sock:z:z # Uncomment if NOT using socket-proxy
      # - $DOCKERDIR/appdata/traefik3/cert_export:/certs:ro # If NOT using reverse proxy, manually map in certificates
    deploy:
      <<: [*common-deploy, *swarm-resource-limits]
    restart: always

secrets:
  authentik_postgresql_password:
    file: ${SECRETS_DIR:-./secrets}/authentik/postgresql_password
  authentik_token:
    file: ${SECRETS_DIR:-./secrets}/authentik/token
  authentik_secret_key:
    file: ${SECRETS_DIR:-./secrets}/authentik/secret_key

# to build the secrets:
# openssl rand -base64 32 > ${SECRETS_DIR:-./secrets}/authentik/postgresql_password
# openssl rand -base64 32 > ${SECRETS_DIR:-./secrets}/authentik/secret_key
# openssl rand -base64 32 > ${SECRETS_DIR:-./secrets}/authentik/token
