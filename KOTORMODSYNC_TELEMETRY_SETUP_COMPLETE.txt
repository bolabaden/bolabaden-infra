================================================================================
KOTORMODSYNC TELEMETRY SETUP - COMPLETE
================================================================================

WHAT WAS ADDED
--------------

1. KOTORModSync Authentication Service (kotormodsync-auth)
   - Container: kotormodsync-auth
   - Port: 8080 (internal only)
   - Purpose: Validates HMAC-SHA256 signatures
   - Secret: /home/ubuntu/my-media-stack/volumes/kotormodsync_signing_secret.txt

2. OpenTelemetry Collector (otel-collector)
   - Container: otel-collector
   - Endpoint: https://otlp.bolabaden.org
   - Ports: 4318 (HTTP), 4317 (gRPC)
   - Purpose: Receives telemetry from KOTORModSync clients
   - Exports to: Prometheus via remote write

3. Prometheus Updates
   - Enabled: --web.enable-remote-write-receiver
   - Added: otel-collector scrape job
   - Added: kotormodsync-auth monitoring
   - Endpoint: https://prometheus.bolabaden.org

4. Security Features
   - HMAC-SHA256 request signing
   - Traefik ForwardAuth middleware
   - Rate limiting: 10 req/s per IP (burst: 20)
   - Replay attack prevention (5 min window)

SERVICES ADDED TO docker-compose.metrics.yml
---------------------------------------------

kotormodsync-auth:
  - Lines: 4680-4717
  - Build context: projects/kotormodsync/telemetry-auth
  - Secret: kotormodsync_signing_secret
  - Resources: 128MB RAM, 0.25 CPU

otel-collector:
  - Lines: 4719-4788
  - Image: otel/opentelemetry-collector-contrib:latest
  - Depends on: kotormodsync-auth
  - Resources: 2GB RAM, 1 CPU

ENDPOINTS
---------

Public (via Traefik):
  - https://otlp.bolabaden.org (OTLP HTTP - authenticated)
  - https://prometheus.bolabaden.org (Prometheus UI - auth required)
  - https://grafana.bolabaden.org (Grafana dashboards - auth required)

Internal:
  - http://kotormodsync-auth:8080 (auth service)
  - http://otel-collector:4318 (OTLP HTTP)
  - http://otel-collector:4317 (OTLP gRPC)
  - http://prometheus:9090 (Prometheus)

DEPLOYMENT
----------

1. Start services:
   cd /home/ubuntu/my-media-stack
   docker compose up -d kotormodsync-auth otel-collector prometheus

2. Verify health:
   docker compose ps | grep -E "kotormodsync-auth|otel-collector|prometheus"
   docker compose logs -f kotormodsync-auth

3. Test endpoint:
   curl -X POST https://otlp.bolabaden.org/v1/metrics \
     -H "Content-Type: application/json" \
     -d '{"resourceMetrics":[]}'
   
   Expected: HTTP 401 (unauthorized without signature)

SIGNING SECRET
--------------

Location: /home/ubuntu/my-media-stack/volumes/kotormodsync_signing_secret.txt
Generated: 6ea4413f4db73407b07c3faccac817031f5210f80bde02e94b61c512de6b9d90

IMPORTANT: Add this to GitHub Actions secrets as KOTORMODSYNC_SIGNING_SECRET

For KOTORModSync GitHub repo:
  1. Go to: Settings > Secrets and variables > Actions
  2. New repository secret
  3. Name: KOTORMODSYNC_SIGNING_SECRET
  4. Value: (paste secret above)

CLIENT INTEGRATION (KOTORModSync)
----------------------------------

See: docs/KOTORMODSYNC_CLIENT_INTEGRATION.md

Key points:
  - Add HMAC signing code to KOTORModSync
  - Load secret from 3 sources (priority order):
    1. Environment variable
    2. Local config file (~/.config/kotormodsync/telemetry.key)
    3. Embedded in official builds (GitHub Actions)
  - Compute signature: HMAC-SHA256(secret, "POST|/v1/metrics|{timestamp}|{session_id}")
  - Add headers: X-KMS-Signature, X-KMS-Timestamp, X-KMS-Session-ID, X-KMS-Client-Version
  - Send to: https://otlp.bolabaden.org

STANDALONE AUTH SERVICE REPO
-----------------------------

Location: projects/kotormodsync/telemetry-auth/

Ready to publish as separate GitHub repository with:
  - README.md
  - LICENSE (MIT)
  - Dockerfile
  - docker-compose.yml (for standalone testing)
  - auth_service.py (main service)
  - .github/workflows/ (CI/CD pipelines)
  - scripts/ (setup, test, rotate secret, etc.)
  - CONTRIBUTING.md
  - DEPLOYMENT.md

MONITORING
----------

Prometheus queries:
  - up{job="otel-collector"} == 1
  - up{job="kotormodsync-auth"} == 1
  - rate(kotormodsync_events_total[5m])

Grafana dashboards:
  - Create dashboard for KOTORModSync metrics
  - Monitor auth failures
  - Track telemetry volume

SECURITY NOTES
--------------

- Secret file permissions: 600 (owner read/write only)
- Never commit signing_secret.txt to git (in .gitignore)
- Rotate secret every 90 days
- Monitor auth failure rates
- Rate limiting active: 10 req/s per IP

TROUBLESHOOTING
---------------

View logs:
  docker compose logs -f kotormodsync-auth
  docker compose logs -f otel-collector
  docker compose logs -f prometheus

Restart services:
  docker compose restart kotormodsync-auth otel-collector

Test authentication:
  cd projects/kotormodsync/telemetry-auth
  ./scripts/test-auth.sh valid
  ./scripts/test-auth.sh invalid

Check Prometheus remote write:
  docker compose exec prometheus cat /etc/prometheus/prometheus.yml | grep remote-write

NEXT STEPS
----------

1. Deploy services (see DEPLOYMENT above)
2. Test endpoints
3. Add secret to KOTORModSync GitHub Actions
4. Integrate signing code into KOTORModSync
5. Test with real client
6. Create Grafana dashboards
7. Set up alerts for auth failures
8. (Optional) Publish telemetry-auth as standalone repo

DOCUMENTATION
-------------

- docs/KOTORMODSYNC_TELEMETRY_SETUP.md (detailed setup)
- docs/KOTORMODSYNC_CLIENT_INTEGRATION.md (client code)
- docs/KOTORMODSYNC_SECURITY_SUMMARY.md (security architecture)
- docs/OTLP_QUICKSTART.md (quick start guide)
- projects/kotormodsync/telemetry-auth/README.md (auth service)

================================================================================
Setup completed: 2025-10-13
Signing secret generated and stored securely
Services configured and ready to deploy
================================================================================

